Actor TargetMaximumHealth : DnD_Info {}
Actor TargetCurrentHealth : DnD_Info {}
Actor TargetLevel : DnD_Info {}
Actor TargetIsWhat : DnD_Info {}
Actor TargetHealthBarColor : DnD_Info {}
Actor TargetTraits : DnD_Info {}
Actor TargetTraits2 : DnD_Info {}
Actor TargetNameSkip : DnD_Info {}
Actor TargetTag : DnD_Info {}
Actor TargetIsElite : DnD_Boolean {}
Actor TargetProperties : DnD_Info {}

// Identification of the monster
Actor MonsterID : DnD_Info {}
Actor MonsterTraits : DnD_Info {}
Actor MonsterTraits2 : DnD_Info {}
Actor MonsterLevel : DnD_Info {}
Actor MonsterBaseHealth : DnD_Info {}
Actor MonsterMaxHealth : DnD_Info {}
Actor MonsterNameSkip : DnD_Info {}
Actor EnemyInDisguise : DnD_Boolean {}
Actor ForcedMonsterLevel : DnD_Info {}
Actor FriendlyInDisguise : DnD_Boolean {} 
Actor MonsterIsElite : DnD_Boolean {}
Actor MonsterProperties : DnD_Info {} // used by custom monsters

Actor LegendaryKills : DnD_Info { }
Actor LegendaryDamageDealt : DnD_Info { }

Actor MagicCausedDeath : DnD_Boolean { }
Actor BookofDeadCausedDeath : DnD_Boolean { }

Actor MonsterRegenPause : DnD_Boolean { }

// Monster IDs - Classic

const int pfff = 0;

enum {
	DND_ZOMBIEMANID,
	DND_SHOTGUNNERID,
	DND_CHAINGUNGUYID,
	DND_DEMONID,
	DND_SPECTREID,
	DND_IMPID,
	DND_CACODEMONID,
	DND_PAINELEMENTALID,
	DND_LOSTSOULID,
	DND_REVENANTID,
	DND_HELLKNIGHTID,
	DND_BARONID,
	DND_FATSOID,
	DND_ARCHVILEID,
	DND_ARACHNOTRONID,
	DND_SPIDERMASTERMINDID,
	DND_CYBERDEMONID,
	DND_NAZIID
};

// Monster info for custom monsters
enum {
	DND_MTYPE_DEMON_POW = 1,
	DND_MTYPE_UNDEAD_POW = 2,
	DND_MTYPE_MAGICAL_POW = 4,
	DND_MTYPE_ROBOTIC_POW = 8,
	DND_MTYPE_ZOMBIE_POW = 16
};

// Monster Traits

enum {
	// Traitset 1
	
	DND_MELEE_RESIST, // obsolete
	
	DND_ENERGY_WEAKNESS,
	DND_SILVER_WEAKNESS,
	DND_FIRE_WEAKNESS = DND_SILVER_WEAKNESS << 1,
	DND_ICE_WEAKNESS = DND_FIRE_WEAKNESS << 1,
	DND_MAGIC_WEAKNESS = DND_ICE_WEAKNESS << 1,
	
	DND_EXPLOSIVE_RESIST = DND_MAGIC_WEAKNESS << 1,
	DND_EXPLOSIVE_IMMUNE = DND_EXPLOSIVE_RESIST << 1,
	DND_EXPLOSIVE_NONE = DND_EXPLOSIVE_IMMUNE << 1,
	DND_BULLET_RESIST = DND_EXPLOSIVE_NONE << 1,
	DND_GHOST = DND_BULLET_RESIST << 1,
	DND_HARDENED_SKIN = DND_GHOST << 1,
	DND_REFLECTIVE = DND_HARDENED_SKIN << 1,
	DND_MINIONS = DND_REFLECTIVE << 1,
	DND_CURSE = DND_MINIONS << 1,
	DND_HEAL = DND_CURSE << 1,
	DND_BLOCK = DND_HEAL << 1,
	DND_SPLIT = DND_BLOCK << 1,
	DND_RAISE = DND_SPLIT << 1,
	DND_TELEPORT = DND_RAISE << 1,
	DND_RESURRECT = DND_TELEPORT << 1,
	DND_MOBILITY = DND_RESURRECT << 1,
	DND_HOMING = DND_MOBILITY << 1,
	DND_POISON = DND_HOMING << 1,
	DND_DEATH = DND_POISON << 1,
	DND_RAGE = DND_DEATH << 1,
	DND_PIERCE = DND_RAGE << 1,
	DND_AGGRESSIVE = DND_PIERCE << 1,
	DND_EXTRAFAST = DND_AGGRESSIVE << 1,
	DND_FASTREACTION = DND_EXTRAFAST << 1,
	DND_NOPAIN = DND_FASTREACTION << 1,
	
	// Traitset 2
	
	DND_BULLET_IMMUNE = 1,
	DND_ENERGY_RESIST = DND_BULLET_IMMUNE << 1,
	DND_ENERGY_IMMUNE = DND_ENERGY_RESIST << 1,
	DND_MAGIC_RESIST = DND_ENERGY_IMMUNE << 1,
	DND_MAGIC_IMMUNE = DND_MAGIC_RESIST << 1,
	DND_ELEMENTAL_RESIST = DND_MAGIC_IMMUNE << 1,
	DND_ELEMENTAL_IMMUNE = DND_ELEMENTAL_RESIST << 1,
	DND_EXTRASTRONG = DND_ELEMENTAL_IMMUNE << 1,
	DND_VITAL = DND_EXTRASTRONG << 1,
	DND_ARMORPEN = DND_VITAL << 1,
	DND_PET = DND_ARMORPEN << 1,
	DND_SUMMONED = DND_PET << 1,
	DND_REVIVED = DND_SUMMONED << 1,
	DND_ICECREATURE = DND_REVIVED << 1,
	DND_FIRECREATURE = DND_ICECREATURE << 1,
	DND_STONECREATURE = DND_FIRECREATURE << 1,
	DND_ELEMENTAL_WEAKNESS = DND_STONECREATURE << 1,
	DND_EARTHCREATURE = DND_ELEMENTAL_WEAKNESS << 1,
	
	DND_LEGENDARY = DND_EARTHCREATURE << 1,
};

const int DND_FORCEDLEVEL = 7;
const int DND_PASSLEVEL = 8;

Actor RunEliteFXScript : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DND Elite Special FX", 0)
		Stop
	}
}