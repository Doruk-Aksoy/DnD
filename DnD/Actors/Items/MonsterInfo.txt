Actor TargetMaximumHealth : DnD_Info {}
Actor TargetCurrentHealth : DnD_Info {}
Actor TargetLevel : DnD_Info {}
Actor TargetIsWhat : DnD_Info {}
Actor TargetHealthBarColor : DnD_Info {}
Actor TargetNameSkip : DnD_Info {}
Actor TargetTag : DnD_Info {}
Actor TargetIsElite : DnD_Boolean {}
Actor TargetProperties : DnD_Info {}

// Identification of the monster
Actor MonsterID : DnD_Info {}
Actor MonsterLevel : DnD_Info {}
Actor MonsterBaseHealth : DnD_Info {}
Actor MonsterMaxHealth : DnD_Info {}
Actor MonsterNameSkip : DnD_Info {}
Actor EnemyInDisguise : DnD_Boolean {}
Actor ForcedMonsterLevel : DnD_Info {}
Actor FriendlyInDisguise : DnD_Boolean {} 
Actor MonsterIsElite : DnD_Boolean {}
Actor MonsterProperties : DnD_Info {} // used by custom monsters

Actor LegendaryKills : DnD_Info { }
Actor LegendaryDamageDealt : DnD_Info { }

Actor MagicCausedDeath : DnD_Boolean { }
Actor BookofDeadCausedDeath : DnD_Boolean { }

Actor MonsterRegenPause : DnD_Boolean { }

// Monster IDs - Classic

const int pfff = 0;

enum {
	DND_ZOMBIEMANID,
	DND_SHOTGUNNERID,
	DND_CHAINGUNGUYID,
	DND_DEMONID,
	DND_SPECTREID,
	DND_IMPID,
	DND_CACODEMONID,
	DND_PAINELEMENTALID,
	DND_LOSTSOULID,
	DND_REVENANTID,
	DND_HELLKNIGHTID,
	DND_BARONID,
	DND_FATSOID,
	DND_ARCHVILEID,
	DND_ARACHNOTRONID,
	DND_SPIDERMASTERMINDID,
	DND_CYBERDEMONID,
	DND_NAZIID
};

// Monster info for custom monsters
enum {
	DND_MTYPE_DEMON_POW = 1,
	DND_MTYPE_UNDEAD_POW = 2,
	DND_MTYPE_MAGICAL_POW = 4,
	DND_MTYPE_ROBOTIC_POW = 8,
	DND_MTYPE_ZOMBIE_POW = 16
};

// Monster Traits

enum {
	// weaknesses
	DND_ENERGY_WEAKNESS,
	DND_SILVER_WEAKNESS,
	DND_FIRE_WEAKNESS,
	DND_ICE_WEAKNESS,
	DND_MAGIC_WEAKNESS,
	DND_ELEMENTAL_WEAKNESS,
	
	// resists
	DND_EXPLOSIVE_RESIST,
	DND_BULLET_RESIST,
	DND_ENERGY_RESIST,
	DND_MAGIC_RESIST,
	DND_ELEMENTAL_RESIST,
	
	// immune
	DND_EXPLOSIVE_IMMUNE,
	DND_EXPLOSIVE_NONE,
	DND_BULLET_IMMUNE,
	DND_ENERGY_IMMUNE,
	DND_MAGIC_IMMUNE,
	DND_ELEMENTAL_IMMUNE,
	
	// other
	DND_GHOST,
	DND_HARDENED_SKIN,
	DND_REFLECTIVE,
	DND_MINIONS,
	DND_CURSE,
	
	DND_HEAL,
	DND_BLOCK,
	DND_SPLIT,
	DND_RAISE,
	DND_TELEPORT,
	
	DND_RESURRECT,
	DND_MOBILITY,
	DND_HOMING,
	DND_POISON,
	DND_DEATH,

	DND_RAGE,
	DND_PIERCE,
	DND_AGGRESSIVE,
	DND_EXTRAFAST,
	DND_FASTREACTION,
	
	DND_NOPAIN,
	DND_EXTRASTRONG,
	DND_VITAL,
	DND_ARMORPEN,
	DND_PET,
	
	DND_ISBLOCKING,
	
	DND_SUMMONED,
	DND_REVIVED,
	DND_ICECREATURE,
	DND_FIRECREATURE,
	DND_STONECREATURE,
	DND_EARTHCREATURE,
	
	DND_LEGENDARY
};

const int DND_FORCEDLEVEL = 7;
const int DND_PASSLEVEL = 8;

Actor RunEliteFXScript : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DND Elite Special FX", 0)
		Stop
	}
}

Actor Rejuvenate_Script_Run : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Rejuvenation")
		Stop
	}
}