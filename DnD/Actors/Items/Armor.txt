enum {
	DND_ARMOR_BONUS,
	DND_ARMOR_GREEN,
	DND_ARMOR_YELLOW,
	DND_ARMOR_BLUE,
	DND_ARMOR_RED,
	
	DND_ARMOR_GUNSLINGER,
	DND_ARMOR_OCCULT,
	DND_ARMOR_DEMO,
	DND_ARMOR_ENERGY,
	DND_ARMOR_ELEMENTAL,
	
	DND_ARMOR_SUPER,
	DND_ARMOR_CYBERNETIC,
	DND_ARMOR_DUELIST,
	DND_ARMOR_NECRO,
	DND_ARMOR_KNIGHT,
	DND_ARMOR_RAVAGER,
	
	DND_ARMOR_SYNTHMETAL,
	DND_ARMOR_LIGHTNINGCOIL
};

const int DND_BASE_ARMORCAP = 300;

Actor DnD_ArmorType : DnD_Info { }

// This is the counter used to know the player's armor
Actor ArmorAmount : Ammo {
	inventory.maxamount 0x7FFFFFFF
	inventory.amount 1
	ammo.backpackamount 0
	ammo.backpackmaxamount 0
	+IGNORESKILL
}

// this is used to display it on statusbarinfo
Actor ArmorAmountVisual : Ammo {
	inventory.maxamount 100
	inventory.amount 1
	ammo.backpackamount 0
	ammo.backpackmaxamount 0
	+IGNORESKILL
}

Actor NewArmorBonus : CustomInventory replaces ArmorBonus {
	Radius 20
	Height 16
	Renderstyle Translucent
	inventory.pickupmessage "\ccArmor pickup  : \c[Y5]Armor Bonus x 1\c-"
	inventory.pickupsound "items/armorbonus"
	+COUNTITEM
	States {
		Spawn:
			BON2 ABCDCB 4
		Loop
		Pickup:
			TNT1 A 0 A_JumpIf(ACS_NamedExecuteWithResult("DnD Check Unique Player Property", PUP_FORBIDARMOR), "Failed")
			TNT1 A 0 ACS_NamedExecuteAlways("DND Armor Give", 0, DND_ARMOR_BONUS, 1)
		Stop
		Failed:
			TNT1 A 0
		Stop
	}
}

Actor GreenArmorPickup_MP : DnD_SharedItem {
	States {
		Spawn:
			ARM1 A 1 NoDelay ACS_NamedExecuteAlways("DND Shared Item Init", 0, SHI_GREENARMOR)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Chest Dropping Item", 0, 10)
			ARM1 A 34 ACS_NamedExecuteAlways("DnD Init Shared Translation", 0)
			TNT1 A 0 Thing_SetSpecial(0, 226, DND_SHARED_ITEM_SCRIPT, 0, tid)
		Idle:
			ARM1 AAAAAA 1 Light("GREENARMOR1") A_SpawnItemEx("InvulnerabilitySphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
			ARM1 BBBBBBB 1 Light("GREENARMOR2") Bright A_SpawnItemEx("InvulnerabilitySphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
		Loop
		IdlePicked:
			ARM1 C -1
		Stop
	}
}

Actor GreenArmor_SP : CustomInventory {
	inventory.pickupsound "Items/armor"
	inventory.pickupmessage "\ccArmor pickup  : \c[Y5]Green Armor 33%\c-"
	Height 16
	Radius 20
	States
	{
		Spawn:
			TNT1 A 0 NoDelay ACS_NamedExecuteAlways("DnD Chest Dropping Item", 0, 10)
		SpawnLoop:
			ARM1 AAAAAA 1 Light("GREENARMOR1") A_SpawnItemEx("InvulnerabilitySphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
			ARM1 BBBBBBB 1 Light("GREENARMOR2") Bright A_SpawnItemEx("InvulnerabilitySphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
		Loop
		Pickup:
			TNT1 A 0 A_JumpIf(1 == ACS_NamedExecuteWithResult("DND Armor Pickup Check", 100, DND_ARMOR_GREEN), "Success")
		Fail
		Success:
			TNT1 A 0 ACS_NamedExecuteAlways("DND Armor Give", 0, DND_ARMOR_GREEN, 100)
		Stop
	}
}

Actor GreenArmorMsg : CustomInventory {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Message Logger", 0, 3, SHI_GREENARMOR)
			TNT1 A 0 A_PlaySound("Items/armor", 6)
			TNT1 A 0 A_SetBlend("25 99 25", 0.6, 17)
		Stop
	}
}

Actor BlueArmorPickup_MP : DnD_SharedItem {
	States {
		Spawn:
			// the delay is needed for the tid to initialize
			ARM2 A 1 NoDelay ACS_NamedExecuteAlways("DND Shared Item Init", 0, SHI_BLUEARMOR)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Chest Dropping Item", 0, 10)
			ARM2 A 34 ACS_NamedExecuteAlways("DnD Init Shared Translation", 0)
			TNT1 A 0 Thing_SetSpecial(0, 226, DND_SHARED_ITEM_SCRIPT, 0, tid)
		Idle:
			ARM2 AAAAAA 1 Light("BLUEARMOR1") A_SpawnItemEx("SoulSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
			ARM2 BBBBBBB 1 Light("BLUEARMOR2") Bright A_SpawnItemEx("SoulSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
		Loop
		IdlePicked:
			ARM2 C -1
		Stop
	}
}

Actor BlueArmor_SP : GreenArmor_SP {
	inventory.pickupsound "Items/armor"
	inventory.pickupmessage "\ccArmor pickup  : \c[Y5]Blue Armor 50%\c-"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay ACS_NamedExecuteAlways("DnD Chest Dropping Item", 0, 10)
		SpawnLoop:
			ARM2 AAAAAA 1 Light("BLUEARMOR1") A_SpawnItemEx("SoulSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
			ARM2 BBBBBBB 1 Light("BLUEARMOR2") Bright A_SpawnItemEx("SoulSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
		Loop
		Pickup:
			TNT1 A 0 A_JumpIf(1 == ACS_NamedExecuteWithResult("DND Armor Pickup Check", 200, DND_ARMOR_BLUE), "Success")
		Fail
		Success:
			TNT1 A 0 ACS_NamedExecuteAlways("DND Armor Give", 0, DND_ARMOR_BLUE, 200)
		Stop
	}
}

Actor BlueArmorMsg : CustomInventory {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Message Logger", 0, 3, SHI_BLUEARMOR)
			TNT1 A 0 A_PlaySound("Items/armor", 6)
			TNT1 A 0 A_SetBlend("25 99 25", 0.6, 17)
		Stop
	}
}

Actor YellowArmorPickup_MP : DnD_SharedItem {
	States {
		Spawn:
			// the delay is needed for the tid to initialize
			ARM3 A 1 NoDelay ACS_NamedExecuteAlways("DND Shared Item Init", 0, SHI_YELLOWARMOR)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Chest Dropping Item", 0, 10)
			ARM3 A 34 ACS_NamedExecuteAlways("DnD Init Shared Translation", 0)
			TNT1 A 0 Thing_SetSpecial(0, 226, DND_SHARED_ITEM_SCRIPT, 0, tid)
		Idle:
			ARM3 AAAAAA 1 Light("YELLOWARMOR1")  A_SpawnItemEx("EvilSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
			ARM3 BBBBBBB 1 Light("YELLOWARMOR2") Bright A_SpawnItemEx("EvilSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
		Loop
		IdlePicked:
			ARM3 C -1
		Stop
	}
}

Actor YellowArmor_SP : GreenArmor_SP {
	inventory.pickupsound "Items/armor"
	inventory.pickupmessage "\ccArmor pickup  : \c[Y5]Yellow Armor 42%\c-"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay ACS_NamedExecuteAlways("DnD Chest Dropping Item", 0, 10)
		SpawnLoop:
			ARM3 AAAAAA 1 Light("YELLOWARMOR1")  A_SpawnItemEx("EvilSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
			ARM3 BBBBBBB 1 Light("YELLOWARMOR2") Bright A_SpawnItemEx("EvilSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
		Loop
		Pickup:
			TNT1 A 0 A_JumpIf(1 == ACS_NamedExecuteWithResult("DND Armor Pickup Check", 150, DND_ARMOR_YELLOW), "Success")
		Fail
		Success:
			TNT1 A 0 ACS_NamedExecuteAlways("DND Armor Give", 0, DND_ARMOR_YELLOW, 150)
		Stop
	}
}

Actor YellowArmorMsg : CustomInventory {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Message Logger", 0, 3, SHI_YELLOWARMOR)
			TNT1 A 0 A_PlaySound("Items/armor", 6)
			TNT1 A 0 A_SetBlend("25 99 25", 0.6, 17)
		Stop
	}
}

Actor RedArmorPickup_MP : DnD_SharedItem {
	States {
		Spawn:
			QRAR A 1 NoDelay ACS_NamedExecuteAlways("DND Shared Item Init", 0, SHI_REDARMOR)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Chest Dropping Item", 0, 10)
			QRAR A 34 ACS_NamedExecuteAlways("DnD Init Shared Translation", 0)
			TNT1 A 0 Thing_SetSpecial(0, 226, DND_SHARED_ITEM_SCRIPT, 0, tid)
		Idle:
			QRAR AAAAAAA 1 Light("THEREDARMOR1") Bright A_SpawnItemEx("UberSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
			QRAR BBBBBB 1 Light("THEREDARMOR2") A_SpawnItemEx("UberSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
		Loop
		IdlePicked:
			QRAR C -1
		Stop
	}
}

Actor RedArmor_SP : GreenArmor_SP {
	inventory.pickupsound "Items/armor"
	inventory.pickupmessage "\ccArmor pickup  : \c[Y5]Red Armor 75%\c-"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay ACS_NamedExecuteAlways("DnD Chest Dropping Item", 0, 10)
		SpawnLoop:
			QRAR AAAAAAA 1 Light("THEREDARMOR1") Bright A_SpawnItemEx("UberSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
			QRAR BBBBBB 1 Light("THEREDARMOR2") A_SpawnItemEx("UberSphereFX", random(-32, 32), random(-32, 32), random(0, 8), 0, 0, random(2,8), 0, SXF_CLIENTSIDE, 0)
		Loop
		Pickup:
			TNT1 A 0 A_JumpIf(1 == ACS_NamedExecuteWithResult("DND Armor Pickup Check", 300, DND_ARMOR_RED), "Success")
		Fail
		Success:
			TNT1 A 0 ACS_NamedExecuteAlways("DND Armor Give", 0, DND_ARMOR_RED, 300)
		Stop
	}
}

Actor RedArmorMsg : CustomInventory {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Message Logger", 0, 3, SHI_REDARMOR)
			TNT1 A 0 A_PlaySound("Items/armor", 6)
			TNT1 A 0 A_SetBlend("25 99 25", 0.6, 17)
		Stop
	}
}

Actor SynthMetalPickup_MP : DnD_SharedItem {
	Scale 0.6
	States {
		Spawn:
			// the delay is needed for the tid to initialize
			AR15 A 1 NoDelay ACS_NamedExecuteAlways("DND Shared Item Init", 0, SHI_SYNTHMETALARMOR)
			AR15 A 34 ACS_NamedExecuteAlways("DnD Init Shared Translation", 0)
			TNT1 A 0 Thing_SetSpecial(0, 226, DND_SHARED_ITEM_SCRIPT, 0, tid)
		Idle:
			AR15 A 10
		Loop
		IdlePicked:
			AR15 A -1
		Stop
	}
}

Actor SynthMetal_SP : GreenArmor_SP {
	Scale 0.6
	inventory.pickupsound "Items/armor"
	inventory.pickupmessage "\ccArmor pickup  : \c[Y5]Synth-metal Armor 65%\c-"
	States
	{
		Spawn:
			AR15 A 10
		Loop
		Pickup:
			TNT1 A 0 A_JumpIf(1 == ACS_NamedExecuteWithResult("DND Armor Pickup Check", 400, DND_ARMOR_SYNTHMETAL), "Success")
		Fail
		Success:
			TNT1 A 0 ACS_NamedExecuteAlways("DND Armor Give", 0, DND_ARMOR_SYNTHMETAL, 400)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Give Research - Regular", 0, RES_SYNTHMETALARMOR, 1)
		Stop
	}
}

Actor SynthMetalArmorMsg : CustomInventory {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Message Logger", 0, 3, SHI_SYNTHMETALARMOR)
			TNT1 A 0 A_PlaySound("Items/armor", 6)
			TNT1 A 0 A_SetBlend("25 99 25", 0.6, 17)
		Stop
	}
}

Actor LightningCoilPickup_MP : DnD_SharedItem {
	Scale 0.6
	States {
		Spawn:
			// the delay is needed for the tid to initialize
			AR16 A 1 NoDelay ACS_NamedExecuteAlways("DND Shared Item Init", 0, SHI_LIGHTNINGCOIL)
			AR16 A 34 ACS_NamedExecuteAlways("DnD Init Shared Translation", 0)
			TNT1 A 0 Thing_SetSpecial(0, 226, DND_SHARED_ITEM_SCRIPT, 0, tid)
		Idle:
			AR16 A 10
		Loop
		IdlePicked:
			AR16 A -1
		Stop
	}
}

Actor LightningCoil_SP : GreenArmor_SP {
	Scale 0.6
	inventory.pickupsound "Items/armor"
	inventory.pickupmessage "\ccArmor pickup: \c[Y5]Lightning Coil Armor 40%\c-"
	States
	{
		Spawn:
			AR16 A 10
		Loop
		Pickup:
			TNT1 A 0 A_JumpIf(1 == ACS_NamedExecuteWithResult("DND Armor Pickup Check", 300, DND_ARMOR_LIGHTNINGCOIL), "Success")
		Fail
		Success:
			TNT1 A 0 ACS_NamedExecuteAlways("DND Armor Give", 0, DND_ARMOR_LIGHTNINGCOIL, 300)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Give Research - Regular", 0, RES_LIGHTNINGCOIL, 1)
		Stop
	}
}

Actor LightningCoilMsg : CustomInventory {
	States {
		Pickup:
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Message Logger", 0, 3, SHI_LIGHTNINGCOIL)
			TNT1 A 0 A_PlaySound("Items/armor", 6)
			TNT1 A 0 A_SetBlend("25 99 25", 0.6, 17)
		Stop
	}
}

Actor GreenArmorSpawner : Randomspawner replaces GreenArmor {
	DropItem "GreenArmorPickup_MP", 255, 16
	DropItem "YellowArmorPickup_MP", 255, 8
}

Actor BlueArmorSpawner : Randomspawner replaces BlueArmor
{
	DropItem "BlueArmorPickup_MP", 255, 16
	DropItem "RedArmorPickup_MP", 255, 4
}

Actor NecroSpikeShooter : DnD_Activator {
	States {
		Use:
			TNT1 A 0 A_SpawnItemEx("NecroSpikeSpawner", 0, 0, 32, 0, 0, 0, 0, SXF_NOCHECKPOSITION)
		Stop
	}
}

Actor NecroSpikeCooldown : PowerProtection {
	damagefactor "normal", 1.0
	powerup.duration 17
}

Actor NecroSpikeSpawner {
	Height 1
	Radius 1
	Speed 0
	+THRUACTORS
	+MISSILE
	+NOGRAVITY
	States {
		Spawn:
			TNT1 A 0
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 0, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 10, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 20, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 30, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 40, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 50, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 60, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 70, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 80, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 90, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 100, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 110, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 120, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 130, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 140, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 150, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 160, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 170, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 180, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 190, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 200, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 210, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 220, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 230, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 240, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 250, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 260, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 270, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 280, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 290, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 300, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 310, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 320, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 330, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 340, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 0 A_CustomMissile("NecroSpike", 0, 0, 350, CMF_TRACKOWNER | CMF_AIMDIRECTION)
			TNT1 A 1
		Stop
	}
}

Actor NecroSpike : DnD_BaseProjectile {
	Speed 32
	Radius 6
	Height 12
	SeeSound "Armors/NecroShard"
	DeathSound "Armors/NecroShardHit"
	Species "Player"
	+THRUSPECIES
	+FOILINVUL
	+DONTREFLECT
	States {
		SpawnState:
			WBON A 1
		Loop
		XDeath:
			TNT1 A 0 ACS_NamedExecuteWithResult("DnD Do Impact Damage", ACS_NamedExecuteWithResult("DND Player Damage Scale", 8 * random(6, 8), TALENT_OCCULT, DND_USETARGET | DND_NECROBULK | DND_ISMELEE), DND_DAMAGETYPE_OCCULT, 0, -1)
		Death:
			TNT1 AAA 0 A_CustomMissile("FireballSmoke", 0, 0, random(0,360), 2, random(0,360))
			HHPF ABCDEF 3
		Stop
	}
}

Actor CyberneticEffect : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 A_SpawnItem("CyberneticEffectSpawner")
			TNT1 A 0 A_SetBlend("24 36 90", 0.3, 15)
		Stop
	}
}

Actor RavagerPower : PowerDamage {
	damagefactor "normal", 1.0
	powerup.duration -4
	powerup.color "72 24 24"
}

Actor RavagerEffect : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 A_SpawnItem("DarkHealEffectSpawner")
			TNT1 A 0 A_SetBlend("72 24 24", 0.3, 15)
		Stop
	}
}

Actor LightningCoilShooter : DnD_Activator {
	States {
		Use:
			TNT1 A 0 A_FireCustomMissile("LightningCoilBolt", 0, 0, 32)
		Stop
	}
}

Actor LightningCoilBolt : DnD_BaseProjectile {
	Speed 50
	Radius 8
	Height 16
	SeeSound "Spell/LightningSpearCast"
	DeathSound "Spell/LightningSpearBounce"
	Species "Player"
	const float r = 12.0;
	const float v = 2.0;
	+THRUSPECIES
	+FOILINVUL
	+DONTREFLECT
	+SEEKERMISSILE
	States {
		SpawnState:
			UP25 A 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SeekerMissile(90, 90, SMF_LOOK)
			UP25 A 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SeekerMissile(90, 90, SMF_LOOK)
			UP25 A 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SpawnItemEx("AbaxothThunderbolt_TrailA", -20)
			TNT1 A 0 A_SpawnItemEx("AbaxothThunderbolt_TrailA", -40)
			TNT1 A 0 A_SeekerMissile(90, 90, SMF_LOOK)
			UP25 B 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SeekerMissile(90, 90, SMF_LOOK)
			UP25 B 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SeekerMissile(90, 90, SMF_LOOK)
			UP25 B 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SpawnItemEx("AbaxothThunderbolt_TrailB", -20)
			TNT1 A 0 A_SpawnItemEx("AbaxothThunderbolt_TrailB", -40)
			TNT1 A 0 A_SeekerMissile(90, 90, SMF_LOOK)
			UP25 C 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SeekerMissile(90, 90, SMF_LOOK)
			UP25 C 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SeekerMissile(90, 90, SMF_LOOK)
			UP25 C 1 Bright Light("AbaxothLightning1") A_SpawnItemEx("AbaxothThunderSparkle", frandom(-r, r), frandom(-r, r), frandom(-r, r), frandom(-v, v), frandom(-v, v), frandom(-v, v))
			TNT1 A 0 A_SpawnItemEx("AbaxothThunderbolt_TrailC", -20)
			TNT1 A 0 A_SpawnItemEx("AbaxothThunderbolt_TrailC", -40)
		Loop
		XDeath:
			TNT1 A 0 ACS_NamedExecuteWithResult("DnD Do Impact Damage", ACS_NamedExecuteWithResult("DND Player Damage Scale", 300, TALENT_ELEMENTAL, DND_USETARGET), DND_DAMAGETYPE_LIGHTNING, 0, -1)
		Death:
			MORZ AAA 1 Light("AbaxothLightning2") A_SetScale(scalex - 0.06, scaley - 0.06)
			MORZ BBB 1 Light("AbaxothLightning2") A_SetScale(scalex - 0.06, scaley - 0.06)
			MORZ CCC 1 Light("AbaxothLightning2") A_SetScale(scalex - 0.06, scaley - 0.06)
			MORZ DDD 1 Light("AbaxothLightning2") A_SetScale(scalex - 0.06, scaley - 0.06)
			MORZ EEE 1 Light("AbaxothLightning2") A_SetScale(scalex - 0.06, scaley - 0.06)
		Stop
	}
}

Actor LightningCoilCooldown : PowerProtection {
	damagefactor "normal", 1.0
	powerup.duration 70
}