/*
// Copy to all monsters (until cleaner solution is found)
		Death.Melee_Magic:
		Death.Melee_MagicFull:
		Death.Magic:
		Death.MagicFull:
		Death.Explosives_Magic:
		Death.Explosives_MagicFull:
		Death.MagicFire:
		Death.MagicFireFull:
		Death.SoulType:
		Death.SoulTypeFull:
			TNT1 A 0 A_GiveInventory("MagicCausedDeath", 1)
		Goto Death
		Death.BookOfTheDead:
			TNT1 A 0 A_GiveInventory("BookofDeadCausedDeath", 1)
		Goto Death
*/

// every 10 points contribute 0.01%
const float accuracy_factor = 0.00001;
// variable "score" is representing explosion radius
const float exprad_factor = 0.01;
const int DND_SHARED_ITEM_SCRIPT = 999;

enum {
	DND_SPECIAL_RESEARCH = 1,
	DND_SPECIAL_ORB = 2,
	DND_SPECIAL_TALENTCAPSULE = 4,
	DND_SPECIAL_ELIXIR = 8,
	DND_SPECIAL_CHARM = 16
};

actor DND_DroppedItem {
	+LOOKALLAROUND
	+NOTIMEFREEZE
	MONSTER
	-COUNTKILL
	-SOLID
	-SHOOTABLE
	-TELESTOMP
	+NOTELEPORT
	+DONTBLAST
	+SEEINVISIBLE
	Health 0
	Radius 1
	Height 1
}

Actor InventoryBase : DnD_DroppedItem {
	Radius 20
	Height 24
	States {
		SpawnInit:
			"####" "#" 0 ACS_NamedExecuteAlways("DnD Remove Check Special", 0, mass, DND_SPECIAL_CHARM)
			"####" "#" 1 Bright
			"####" "#" 24 Bright ACS_NamedExecuteAlways("DnD Item Linger Check")
		Goto SpawnLoop
		
		SpawnLoop:
		Idle:
			"####" "#" 1 Bright A_LookEx(LOF_NOSOUNDCHECK, 0, 28, 0, 360, "CheckPickup")
		Loop
		
		See:
		CheckPickup:
			"####" "#" 1 Bright A_JumpIfCloser(32, "Pickup")
		goto SpawnLoop
		
		Pickup:
			"####" "#" 1 Bright A_JumpIf(ACS_NamedExecuteWithResult("DnD Check Special Match", DND_SPECIAL_CHARM), "PickupCheck2")
		goto PickupFail

		PickupFail:
			"####" "#" 1 Bright
		goto SpawnLoop
		
		PickupCheck2:
			// Check if player has remaining inventory space
			"####" "#" 0 A_JumpIf(ACS_NamedExecuteWithResult("DnD Player Has Spot For Item", mass - 1), "PickupSuccess")
		Goto PickupShowItem
		
		PickupShowItem:
			"####" "#" 0 A_JumpIfInTargetInventory("DnD_PlayerViewsItem", 1, "PickupFail")
			"####" "#" 0 A_JumpIfInTargetInventory("ShowingMenu", 1, "PickupFail")
			"####" "#" 0 A_GiveToTarget("DnD_PlayerViewsItem", 1)
			"####" "#" 0 ACS_NamedExecuteAlways("DnD Preview Item", 0, mass - 1, ACS_NamedExecuteWithResult("DnD Get Target"))
		Goto PickupFail
		
		PickupSuccess:
			TNT1 A 8 ACS_NamedExecuteAlways("DnD Charm Pickup", 0, mass - 1)
		stop
	}
}


Actor DnD_SharedItem {
	Height 48
	Radius 20
	Translation Ice
	Renderstyle Translucent
	+USESPECIAL
	+DONTBLAST
	+DONTSPLASH
}

Actor DND_Activator : CustomInventory {
	inventory.maxamount 999
	+INVENTORY.ALWAYSPICKUP
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.IGNORESKILL
	+INVENTORY.UNDROPPABLE
}

Actor DnD_Info : Inventory {
	inventory.maxamount 0x7FFFFFFF
}

Actor DnD_Kills : Inventory {
	inventory.maxamount 0x7FFFFFFF
}

Actor DnD_ScrollState : Inventory {
	inventory.maxamount 1000
}

Actor DropItemCooldown : PowerDamage {
	powerup.duration -1
	damagefactor "normal", 1.0
}

Actor DnD_Boolean : Inventory {
	inventory.maxamount 1
}

Actor DnD_ErrorNumber : Inventory {
	inventory.maxamount 3
}

Actor Mo_Died : PowerDamage {
	damagefactor "normal", 1.0
	powerup.duration 9
}

Actor InfiniteProtectionBase : PowerProtection {
	damagefactor "normal", 1.0
	powerup.duration 0x7FFFFFFF
}

Actor DnD_FakeDamager {
	PROJECTILE
	+DONTBLAST
	+MTHRUSPECIES
	States {
		Spawn:
			TNT1 A 1
		Stop
		Death:
			TNT1 A 1
		Stop
	}
}

Actor BaseExplosionDamage // this is necessary, calling A_Explode in actor can cause unwanted effects.
{
	Speed 0
	Height 4
	Radius 4
	Damage (0)
	+MISSILE
	+DONTBLAST
	+NOBLOCKMAP
	+NOGRAVITY
	+THRUACTORS
	+DONTSPLASH
	-TELESTOMP
	States
	{
		Spawn:
			TNT1 A 0
			TNT1 A 1
		Stop
	}
}

Actor DnD_PrevHealth : Inventory {
	inventory.maxamount 8192
}

Actor FadeIntensity : Inventory {
	+INVENTORY.UNDROPPABLE
	Inventory.MaxAmount 100
}

Actor ReloadSignal : PowerDamage {
	damagefactor "normal", 1.0
	powerup.duration 4
}

Actor ForceWeaponRemove : DnD_Boolean { }

Actor NoRewardsGiven : DnD_Boolean { }
Actor StartOnly : DnD_Boolean { }

Actor P_Slot1Replaced : DnD_Boolean { }
Actor P_Slot2Replaced : DnD_Boolean { }
Actor P_Slot3Replaced : DnD_Boolean { }
Actor P_Slot3XReplaced : DnD_Boolean { }
Actor P_Slot4Replaced : DnD_Boolean { }
Actor P_Slot5Replaced : DnD_Boolean { }
Actor P_Slot6Replaced : DnD_Boolean { }
Actor P_Slot7Replaced : DnD_Boolean { }

Actor P_Slot1Luxury : DnD_Boolean { }
Actor P_Slot2Luxury : DnD_Boolean { }
Actor P_Slot3Luxury : DnD_Boolean { }
Actor P_Slot4Luxury : DnD_Boolean { }
Actor P_Slot5Luxury : DnD_Boolean { }
Actor P_Slot6Luxury : DnD_Boolean { }
Actor P_Slot7Luxury : DnD_Boolean { }
Actor P_Slot8Luxury : DnD_Boolean { }

Actor Reloading : DnD_Boolean { }

Actor P_PlasmaFire : DnD_Boolean { }
Actor P_GreenFire : DnD_Boolean { }
Actor P_PurpleFire : DnD_Boolean { }
Actor P_RedFire : DnD_Boolean { }
Actor P_GrayFire : DnD_Boolean { }

Actor P_Frozen : DnD_Boolean { }
Actor P_StepTaken : DnD_Boolean { }
Actor P_Invulnerable : DnD_Boolean { }
Actor TempWeaponReady : DnD_Boolean { }

Actor RoundsSurvived : Ammo
{
	inventory.amount 1
	inventory.maxamount 0xFFFFFF
	ammo.backpackamount 0
	ammo.backpackmaxamount 0
	+IGNORESKILL
}

Actor DnD_PTotalLevel : inventory {
	inventory.maxamount 6400
}

Actor P_Damage : Ammo {
	inventory.amount 1
	inventory.maxamount 0x7FFFFFFF
	ammo.backpackamount 0
	ammo.backpackmaxamount 0x7FFFFFFF
	+IGNORESKILL
}

Actor LevelToken : Inventory
{
	inventory.maxamount 1
}

Actor SetMyLives : Inventory
{
	inventory.maxamount 1
}

Actor NoDrop : Inventory
{
	inventory.maxamount 1
}

Actor ShockWaveCounter : Ammo
{
	inventory.amount 1
	inventory.maxamount 100
	ammo.backpackamount 0
	ammo.backpackmaxamount 100
	inventory.icon "STTPRCNT"
	+IGNORESKILL
}

Actor CurrentLives : Ammo
{
	inventory.amount 1
	inventory.maxamount 9
	ammo.backpackamount 0
	ammo.backpackmaxamount 0
	+IGNORESKILL
}

Actor TipBoxOpen : PowerDamage {
	powerup.duration -6
	damagefactor "normal", 1.0
}

Actor UseWeaponTips : Ammo {
  Inventory.MaxAmount 1
  +UNDROPPABLE
  Ammo.BackpackAmount 0
  Ammo.BackpackMaxAmount 1
}

Actor ParsingData : DnD_Boolean { }

Actor WeaponZoom : DnD_Boolean { }
Actor WeaponZoomCooldown : PowerDamage {
	damagefactor "normal", 1.0
	powerup.duration 15
}

Actor DnD_PressedUse : PowerDamage {
	damagefactor "normal", 1.0
	powerup.duration 5
}

Actor DnD_WaitNextItemPick : PowerDamage {
	damagefactor "normal", 1.0
	powerup.duration 15
}

Actor DnD_PlayerViewsItem : PowerDamage {
	damagefactor "normal", 1.0
	powerup.duration 9
}

Actor InTradeView : DnD_Boolean { }

Actor DnD_TradeAcceptWindow : DnD_Boolean { }

ACTOR ProjBullet : FastProjectile {
	Radius 1
	Height 1
	Damage (random(1, 3) * 5)
	DamageType "Bullet"
	Speed 128
	Scale 0.1
	RenderStyle Add
	Alpha 0.85
	PROJECTILE
	+FORCEXYBILLBOARD
	+BLOODSPLATTER
	States {
		Spawn:
			TNT1 A 0
			TNT1 A 0 A_ChangeVelocity(velx / 50.0, vely / 50.0, velz / 50.0, CVF_REPLACE)
			TNT1 A 1
			TNT1 A 0 A_ChangeVelocity(velx * 50.0, vely * 50.0, velz * 50.0, CVF_REPLACE)
			TRAC A -1 Bright
		Stop
		Death:
			TNT1 A 1 A_SpawnItem("NewBulletPuff")
		Stop
		XDeath:
			TNT1 A 1
		Stop
	}
}

Actor DnD_Intermission : DnD_Boolean { }

Actor DND_ACK : PowerDamage { 
	damagefactor "normal", 1.0
	powerup.duration 4
}

Actor DND_ACKLoop : DnD_Boolean { }

enum {
	DND_SELF = 0,
	DND_USETARGET = 1,
	DND_ISOCCULT = 2,
	DND_ISPISTOL = 4,
	DND_ISBOOMSTICK = 8,
	DND_ISSUPER = 16,
	DND_ISSPECIALAMMO = 32,
	DND_ISARTIFACT = 64,
	DND_USEMASTER = 128,
	DND_SETMASTER = 256, // this is a hack, only use when a monster directly deals damage owned by player, AND DIES AFTER DOING SO
	DND_USETRACER = 512,
	DND_ISRIPPER = 1024, // special scaling used for rippers
	DND_NECROBULK = 2048,
	DND_HASSTRSCALING = 4096, // also scales from str
	DND_ISSLOT1 = 8192,
	DND_ISSLOT2 = 16384,
	DND_ISSLOT3 = 32768,
	DND_ISSLOT4 = 65536,
	DND_ISSLOT5 = 131072,
	DND_ISSLOT6 = 262144,
	DND_ISSLOT7 = 524288,
	DND_ISSLOT8 = 1048576,
	DND_ISSLOT9 = 2097152,
	DND_ISSPELL = 4194304,
	DND_USETARGETSMASTER = 8388608,
	DND_FIREDAMAGE = 16777216,
	DND_ICEDAMAGE = 33554432,
	DND_POISONDAMAGE = 67108864,
	DND_LIGHTNINGDAMAGE = 134217728
};

enum {
	SHI_STIMPACK,
	SHI_MEDKIT,
	SHI_GREENARMOR,
	SHI_YELLOWARMOR,
	SHI_BLUEARMOR,
	SHI_REDARMOR,
	SHI_BACKPACK,
	SHI_SYNTHMETALARMOR
};

enum {
	BONUS_KILL,
	BONUS_ITEM,
	BONUS_SECRET,
	BONUS_BONUS
};

Actor DnD_KillBonusShower : DnD_Activator {
	States {
		Pickup:
			//TNT1 A 0 A_GiveInventory("DnD_ShowKillBonus", 1)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Bonus Message Show", 0, BONUS_KILL)
		Stop
	}
}

Actor DnD_ItemBonusShower : DnD_Activator {
	States {
		Pickup:
			//TNT1 A 0 A_GiveInventory("DnD_ShowItemBonus", 1)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Bonus Message Show", 0, BONUS_ITEM)
		Stop
	}
}

Actor DnD_SecretBonusShower : DnD_Activator {
	States {
		Pickup:
			//TNT1 A 0 A_GiveInventory("DnD_ShowSecretBonus", 1)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Bonus Message Show", 0, BONUS_SECRET)
		Stop
	}
}

Actor DnD_BonusBonusShower : DnD_Activator {
	States {
		Pickup:
			//TNT1 A 0 A_GiveInventory("DnD_ShowBonusBonus", 1)
			TNT1 A 0 ACS_NamedExecuteAlways("DnD Bonus Message Show", 0, BONUS_BONUS)
		Stop
	}
}

Actor DnD_ExpCredit_Timer : PowerDamage {
	damagefactor "normal", 1.0
	powerup.duration 55
}

Actor DnD_Exp_Counter : Inventory {
	inventory.maxamount 0x7FFFFFFF
}

Actor DnD_Credit_Counter : Inventory {
	inventory.maxamount 0x7FFFFFFF
}

Actor DnD_Hit_Cooldown : PowerProtection {
	damagefactor "normal", 1.0
	powerup.duration 9
}

Actor MarkAsReflected : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 A_SetDamageType("Reflection")
		Stop
	}
}

enum {
	DND_PELLETACTOR_HSSG
};

enum {
	DND_STACKEDITEM_ORB,
	DND_STACKEDITEM_CHESTKEY,
	DND_STACKEDITEM_ELIXIR,
	DND_STACKEDITEM_TOKEN
};

Actor IMGONE : PowerInvisibility {
	Powerup.Duration -60
	Powerup.Strength 80
	Powerup.Mode "Opaque"
}

Actor DontAttack : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 A_GiveInventory("IMGONE", 1)
		Stop
	}
}

Actor DontAttackRemove : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 A_TakeInventory("IMGONE", 1)
		Stop
	}
}