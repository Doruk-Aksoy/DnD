Actor DnD_BaseMonster {
	GibHealth -150
	+USEKILLSCRIPTS
	+FLOORCLIP
	+DONTBLAST
	+COUNTKILL
	+CANPUSHWALLS
	+CANUSEWALLS
	+ACTIVATEMCROSS
	+CANPASS
	-SHOOTABLE
	-SOLID
	
	// NoPain versions
	Painchance "Melee_NoPain", 0
	Painchance "Melee_Magic_NoPain", 0
	Painchance "Bullet_NoPain", 0
	Painchance "BulletMagicX_NoPain", 0
	Painchance "Energy_NoPain", 0
	Painchance "EnergyExp_NoPain", 0
	Painchance "Explosives_NoPain", 0
	Painchance "Magic_NoPain", 0
	Painchance "MagicFire_NoPain", 0
	Painchance "Explosives_Magic_NoPain", 0
	
	// elemental
	Painchance "Fire_NoPain", 0
	Painchance "P_Ice_NoPain", 0
	Painchance "Poison_NoPain", 0
	Painchance "Desolator_NoPain", 0
	Painchance "Emerald_NoPain", 0
	Painchance "Lightning_NoPain", 0
	
	Painchance "SoulType_NoPain", 0
	
	// Pain Forced versions
	Painchance "Melee_ForcePain", 256
	Painchance "Melee_Magic_ForcePain", 256
	Painchance "Bullet_ForcePain", 256
	Painchance "BulletMagicX_ForcePain", 256
	Painchance "Energy_ForcePain", 256
	Painchance "EnergyExp_ForcePain", 256
	Painchance "Explosives_ForcePain", 256
	Painchance "Magic_ForcePain", 256
	Painchance "MagicFire_ForcePain", 256
	Painchance "Explosives_Magic_ForcePain", 256
	
	// elemental
	Painchance "Fire_ForcePain", 256
	Painchance "P_Ice_ForcePain", 256
	Painchance "Poison_ForcePain", 256
	Painchance "Desolator_ForcePain", 256
	Painchance "Emerald_ForcePain", 256
	Painchance "Lightning_ForcePain", 256
	
	Painchance "SoulType_ForcePain", 256
	
	States {
		Spawn:
			// this tnt1 is needed, otherwise the game will complain it has no frames
			TNT1 A 0 NoDelay A_Jump(256, "SetInfo")
			"####" "#" 35
		Wait
		
		SpawnSetup:
			"####" "#" 0 ACS_NamedExecuteWithResult("DnD Monster Scale", args[0], args[1], args[2])
			"####" "#" 0 A_Jump(256, "Idle")
			"####" "#" 35
		Wait
		
		See:
			"####" "#" 0 A_Jump(256, "SeeState")
			"####" "#" 35
		Wait
		
		Pain:
			"####" "#" 0 A_Jump(256, "PainState")
			"####" "#" 35
		Wait
		
		Frozen:
			"####" "###" 4 A_SpawnItemEx("FreezeGlitter", frandom(-radius, radius) / 2, frandom(-radius, radius) / 2, frandom(10, height / 2))
			"####" "###" 0 A_SpawnItemEx("ColdSmoke", frandom(-radius, radius) / 2, frandom(-radius, radius) / 2, frandom(24, height + 16) / 2, frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.75, 0.75))
			"####" "#" 1 A_JumpIfInventory("DnD_FreezeTimer", 1, "Frozen")
		Goto See
		
		Overloaded:
			"####" "#" 0 A_CheckFlag("BOSS", "HalfOverload")
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
		HalfOverload:
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
			"####" "#" 0 A_ChangeVelocity(frandom(-1.25, 1.25), frandom(-1.25, 1.25), frandom(-0.5, 0.5), CVF_REPLACE)
			"####" "#" 5 A_Pain
		Goto See
	
		Death:
			"####" "#" 0 A_Jump(256, "DeathState")
			"####" "#" 35
		Wait
		XDeath:
		Death.Explosives:
		Death.ExplosivesFull:
			"####" "#" 0 A_Jump(256, "XDeathState")
			"####" "#" 35
		Wait
		
		/*
		Damage types from spells and stuff affecting monsters go here
		*/
		Death.Explosives_Magic:
		Death.Explosives_MagicFull:
			"####" "#" 0 A_GiveInventory("MagicCausedDeath", 1)
		Goto XDeath
		
		Death.Melee_Magic:
		Death.Melee_MagicFull:
		Death.Magic:
		Death.MagicFull:
		Death.MagicFire:
		Death.MagicFireFull:
		Death.SoulType:
		Death.SoulTypeFull:
			"####" "#" 0 A_GiveInventory("MagicCausedDeath", 1)
		Goto Death
		Death.BookOfTheDead:
			"####" "#" 0 A_GiveInventory("BookofDeadCausedDeath", 1)
		Goto Death
		
		Death.MagicSealing:
			"####" "#" 0 A_Stop
			"####" "#" 0 A_SpawnItemEx("DemonSealKanji", 0, 0, height / 3, 0, 0, 0, 0, SXF_NOCHECKPOSITION)
			"####" "#" 0 A_SpawnItemEx("DemonSealWhoosh2", 0,0,6, 0,0,0, 0, SXF_NOCHECKPOSITION)
			"####" "#" 0 A_SpawnItemEx("DemonSealWhoosh", 0,0,6, 0,0,0, 0, SXF_NOCHECKPOSITION)
			"####" "#" 0 A_SpawnItemEx("SealedDemonFX", 0, 0, 6, 0, 0, 2, 0, SXF_NOCHECKPOSITION)
			"####" "#" 0 A_PlaySound ("jpcpplasmarifle/seal", CHAN_AUTO, 1, 0, 0.8)
			"####" "#" 0 A_SetTranslucent (0.85, 0)
			"####" "#" 0 A_Fall
			"####" "#" 0 A_FadeTo (0, 0.1, 0)
			"####" "######" 1 Light("FDOfudaSealingGlow1") A_SetScale (scalex * 0.92, scaley * 0.97)
			"####" "#" 0 A_FadeTo (0, 0.1, 0)
			"####" "#####" 1 Light("FDOfudaSealingGlow2") A_SetScale (scalex * 0.80, scaley * 0.95)
			"####" "#" 0 A_FadeTo (0, 0.1, 0)
			"####" "######" 1 Light("FDOfudaSealingGlow3") A_SetScale (scalex * 0.88, scaley * 0.93)
			"####" "#" 0 A_FadeTo (0, 0.1, 0)
			"####" "#######" 1 Light("FDOfudaSealingGlow4") A_SetScale (scalex * 0.84, scaley * 0.85)
			"####" "#" 0 A_FadeTo (0, 0.1, 0)
			"####" "#####" 1 Light("FDOfudaSealingGlow5") A_SetScale (scalex * 0.80, scaley * 0.74)
			"####" "#" 0 A_FadeTo (0, 0.1, 0)
			"####" "#####" 1 Light("FDOfudaSealingGlow6") A_SetScale (scalex * 0.78, scaley * 0.62)
			"####" "#" 0 A_FadeTo (0, 0.1, 0)
			"####" "####" 1 Light("FDOfudaSealingGlow7") A_SetScale (scalex * 0.72, scaley * 0.55)
			"####" "#" 0 A_FadeTo (0, 0.1, 0)
			"####" "####" 1 Light("FDOfudaSealingGlow8") A_SetScale (scalex * 0.50, scaley * 0.50) // 42 tics
		Stop
		Death.Emerald:
		Death.EmeraldFull:
			"####" "#" 0 A_Stop
			"####" "#" 0 A_Scream
			"####" "#" 0 ACS_NamedExecuteAlways("DnD Emerald Death")
			"####" "######" 1  A_SetScale (scalex * 1.03, scaley * 0.97)
			"####" "#####" 1 A_SetScale (scalex * 1.03, scaley * 0.95)
			"####" "######" 1 A_SetScale (scalex * 1.03, scaley * 0.93)
			"####" "#######" 1 A_SetScale (scalex, scaley * 0.85)
			"####" "#####" 1 A_SetScale (scalex, scaley * 0.74)
			"####" "#####" 1 A_SetScale (scalex * 1.05, scaley * 0.62)
			"####" "####" 1 A_SetScale (scalex * 1.06, scaley * 0.55)
			"####" "####" 1 A_SetScale (scalex * 1.07, scaley * 0.54) // 42 tics
			TNT1 A 1 A_KillMaster
		Stop
		Death.Ice:
		Death.P_Ice:
		Death.P_IceFull:
			"----" "#" 1 A_KillMaster
			"----" "#" 1 A_IceGuyDie
		Wait
	}
}

// inherit melee if monster can ONLY do melee
Actor DnD_BaseMeleeMonster_NoRes : DnD_BaseMonster {
	States {
		Melee:
			"####" "#" 0 A_Jump(256, "MeleeState")
			"####" "#" 35
		Wait
	}
}

Actor DnD_BaseMeleeMonster : DnD_BaseMeleeMonster_NoRes {
	States {
		Raise:
			"####" "#" 0 ACS_NamedExecuteAlways("DnD On Revive", 0)
			"####" "#" 0 A_Jump(256, "RaiseState")
			"####" "#" 35
		Wait
	}
}

// inherit ranged if monster can ONLY do ranged
Actor DnD_BaseRangedMonster_NoRes : DnD_BaseMonster {
	States {
		Missile:
			"####" "#" 0 A_Jump(256, "MissileState")
			"####" "#" 35
		Wait
	}
}

Actor DnD_BaseRangedMonster : DnD_BaseRangedMonster_NoRes {
	States {
		Raise:
			"####" "#" 0 ACS_NamedExecuteAlways("DnD On Revive", 0)
			"####" "#" 0 A_Jump(256, "RaiseState")
			"####" "#" 35
		Wait
	}
}

// inherit this if the monster is supposed to have both attack types, melee and ranged!
Actor DnD_BaseHybridMonster_NoRes : DnD_BaseMonster {
	States {
		Melee:
			"####" "#" 0 A_Jump(256, "MeleeState")
			"####" "#" 35
		Wait
		Missile:
			"####" "#" 0 A_Jump(256, "MissileState")
			"####" "#" 35
		Wait
	}
}

Actor DnD_BaseHybridMonster : DnD_BaseHybridMonster_NoRes {
	States {
		Raise:
			"####" "#" 0 ACS_NamedExecuteAlways("DnD On Revive", 0)
			"####" "#" 0 A_Jump(256, "RaiseState")
			"####" "#" 35
		Wait
	}
}

Actor DnD_ArchVileBase : DnD_BaseRangedMonster_NoRes {
	States {
		Heal:
			"####" "#" 0 A_Jump(256, "HealState")
			"####" "#" 35
		Wait
	}
}

Actor DnD_ArchVilePassiveBase : DnD_BaseMonster {
	States {
		Heal:
			"####" "#" 0 A_Jump(256, "HealState")
			"####" "#" 35
		Wait
	}
}

Actor DnD_ArchVileHybridBase : DnD_BaseHybridMonster_NoRes {
	States {
		Heal:
			"####" "#" 0 A_Jump(256, "HealState")
			"####" "#" 35
		Wait
	}
}

// inherit melee if monster can ONLY do melee and is a boss creature -- SM or Cyber (not ressurectable)
Actor DnD_BaseMeleeBoss : DnD_BaseMeleeMonster_NoRes {
	GibHealth -500
}

// inherit ranged if monster can ONLY do ranged and is a boss
Actor DnD_BaseRangedBoss : DnD_BaseRangedMonster_NoRes {
	GibHealth -200
}

// inherit this if the monster is supposed to have both attack types, melee and ranged!
Actor DnD_BaseHybridBoss : DnD_BaseHybridMonster_NoRes {
	GibHealth -200
}

Actor DnD_MonsterSetupDone : DnD_Activator {
	States {
		Pickup:
			TNT1 A 0 A_ChangeFlag("SHOOTABLE", 1)
			TNT1 A 0 A_ChangeFlag("SOLID", 1)
		Stop
	}
}

enum {
	DND_MHR_PERIODIC,
	DND_MHR_DURATION
};