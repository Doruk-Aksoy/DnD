#ifndef DND_MONSTERDATA_IN
#define DND_MONSTERDATA_IN

#include "DnD_Common.h"
#include "DnD_EliteInfo.h"

#define DND_CUSTOMMONSTER_ID 65536
#define DND_MONSTERMASS_SCALE 20 // 20% per level

typedef struct {
	int basehp;
	int maxhp;
	int level;
	int id;
	int class;								// monster class
	bool isElite;
	bool hasTrait;							// used by clients mostly -- do we have traits
	bool trait_list[MAX_MONSTER_TRAITS]; 	// 1 if that trait is on, 0 if not
} mo_prop_T;

// allow a max of 8192 monsters' data to be held
global mo_prop_T 25: MonsterProperties[DND_MAX_MONSTERS];
global mo_prop_T 26: PetMonsterProperties[DND_MAX_PETS];

enum {
	MONSTERCLASS_ZOMBIEMAN,
	MONSTERCLASS_SHOTGUNGUY,
	MONSTERCLASS_CHAINGUNGUY,
	MONSTERCLASS_DEMON,
	MONSTERCLASS_SPECTRE,
	MONSTERCLASS_IMP,
	MONSTERCLASS_CACODEMON,
	MONSTERCLASS_PAINELEMENTAL,
	MONSTERCLASS_LOSTSOUL,
	MONSTERCLASS_REVENANT,
	MONSTERCLASS_HELLKNIGHT,
	MONSTERCLASS_BARON,
	MONSTERCLASS_FATSO,
	MONSTERCLASS_ARACHNOTRON,
	MONSTERCLASS_ARCHVILE,
	MONSTERCLASS_SPIDERMASTERMIND,
	MONSTERCLASS_CYBERDEMON
};

enum {
	// Classics
	MONSTER_ZOMBIEMAN,
	MONSTER_SHOTGUNNER,
	MONSTER_CHAINGUNNER,
	MONSTER_DEMON,
	MONSTER_SPECTRE,
	MONSTER_IMP,
	MONSTER_CACODEMON,
	MONSTER_PAINELEMENTAL,
	MONSTER_LOSTSOUL,
	MONSTER_REVENANT,
	MONSTER_HELLKNIGHT,
	MONSTER_BARON,
	MONSTER_FATSO,
	MONSTER_SPIDER,
	MONSTER_VILE,
	MONSTER_MASTERMIND,
	MONSTER_CYBERDEMON,
	MONSTER_NAZI,
	
	// DnD Exclusives
	
	// Zombieman
	MONSTER_ZOMBIEMANGRAY,
	MONSTER_ZOMBIERANGER,
	MONSTER_ZOMBIESMG,
	MONSTER_ZOMBIERAPID,
	MONSTER_ZOMBIEMARINE,
	MONSTER_ZOMBIELOS,
	MONSTER_ZOMBIEPISTOL,
	MONSTER_ZOMBIEQUAKE1,
	MONSTER_ZOMBIEHUNTER,
	MONSTER_ZOMBIEPROPHET,
	
	// Shotgunner
	MONSTER_SSGLOS,
	MONSTER_ZSPECSG,
	MONSTER_SGLOS,
	MONSTER_SAWEDOFF1,
	MONSTER_SAWEDOFF2,
	MONSTER_ROGUE,
	MONSTER_ZOMBIEQUAKE2,
	MONSTER_ZOMBIESSG,
	
	// Chaingunner
	MONSTER_ZOMBIEQUAKE3,
	MONSTER_ZOMBIEMG,
	MONSTER_INITIATE,
	MONSTER_DOUBLEGUNNER,
	MONSTER_CGMAJOR,
	MONSTER_MRROBOT,
	MONSTER_ZSEC,
	MONSTER_ZSPECMG,
	MONSTER_PLASMAZOMBIE,
	MONSTER_BERSERKERGUY,
	
	// Demon
	MONSTER_BLOODDEMON,
	MONSTER_BLOODFIEND,
	MONSTER_CYBERFIEND,
	MONSTER_FLAMEDEMON,
	MONSTER_STONEIMP,
	MONSTER_SCAVENGER,
	MONSTER_SOULEATER,
	MONSTER_NHUMCIGN,
	MONSTER_STONEDEMON,
	MONSTER_BRUTY,
	MONSTER_SATYR,
	MONSTER_EARTHGOLEM,
	MONSTER_RAVAGER,
	MONSTER_PUREBREDDEMON,
	
	// Spectre
	MONSTER_LURKER,
	MONSTER_GRAVEDIGGER,
	MONSTER_DEVOURER,
	MONSTER_NIGHTMAREDEMON,
	
	// Imp
	MONSTER_DARKIMP1,
	MONSTER_VOIDDARKIMP,
	MONSTER_NETHERDARKIMP,
	MONSTER_DARKIMP2,
	MONSTER_IMPABOM,
	MONSTER_STIMP,
	MONSTER_VOIDIMP,
	MONSTER_SOULHARVESTER,
	MONSTER_PYROIMP,
	MONSTER_DEVIL,
	MONSTER_DEVIL2,
	MONSTER_VULGAR,
	MONSTER_UNDEADMAGE,
	MONSTER_SHADOW,
	MONSTER_REAVER,
	MONSTER_ROACH,
	
	// Lost Soul
	MONSTER_BABYCACO,
	MONSTER_ETHEREALSOUL,
	MONSTER_FLESHSPAWN,
	MONSTER_GUARDIANCUBE,
	MONSTER_FORGOTTENONE,
	MONSTER_HADESSPHERE,
	MONSTER_WATCHER,
	MONSTER_DARKLICH_SPIRIT,
	
	// Cacodemon
	MONSTER_WEAKENER,
	MONSTER_SHADOWPRIEST,
	MONSTER_GRELL,
	MONSTER_DEATHWHISPERER,
	MONSTER_CACOLICH,
	MONSTER_INFERNO,
	MONSTER_GUARDIAN,
	MONSTER_ENHANCEDCACO,
	MONSTER_EARTHLICH,
	MONSTER_WICKED,
	
	// Pain Elemental
	MONSTER_BLOODLICH,
	MONSTER_HADESELEMENTAL,
	MONSTER_HELLARBITER,
	MONSTER_DEFILER,
	MONSTER_TORTUREDSOUL,
	MONSTER_SHADOWDISCIPLE,
	MONSTER_SENTINEL,
	MONSTER_PHANTASM,
	MONSTER_WRAITH, // add new ones above wraith
	
	// Revenant
	MONSTER_INCARNATE,
	MONSTER_BEAMREVENANT,
	MONSTER_AXEKNIGHT,
	MONSTER_WIDOWMAKER,
	MONSTER_YETI,
	MONSTER_SLUDGEGIANT,
	MONSTER_SLUDGEGIANT2,
	MONSTER_SLUDGEGIANT3,
	MONSTER_CADAVER,
	MONSTER_DARKSERVANT,
	MONSTER_CRAWLER,
	MONSTER_CYBORGSOLDIER,
	MONSTER_DRAUGR,

	// Hell Knight
	MONSTER_BLOODSATYR,
	MONSTER_HELLWARRIOR,
	MONSTER_HELLSFURY,
	MONSTER_BLACKKNIGHT,
	MONSTER_ARCHON,
	MONSTER_WARLORD,
	MONSTER_SKULLWIZARD,
	MONSTER_CYBORGWARRIOR,
	MONSTER_SHADOWBEAST,
	MONSTER_CHAOSSERPENT,
	MONSTER_MOONSATYR,
	MONSTER_ICEGOLEM,
	MONSTER_PUTREFIER,
	MONSTER_GLADIATOR,

	// Baron
	MONSTER_LAVADEMON,
	MONSTER_LORDOFHERESY,
	MONSTER_BORMERETH,
	MONSTER_BARBATOS,
	MONSTER_BLOODSEEKER,
	MONSTER_SHADOWWIZARD,
	MONSTER_KJAROCH,
	MONSTER_CYBRUISER,
	MONSTER_BRUISERDEMON,
	MONSTER_MAGMASERPENT,
	MONSTER_DREADKNIGHT,
	MONSTER_MAGMAGOLEM,
	MONSTER_JUDICATOR,
	MONSTER_WARMASTER,
	
	// Fatso
	MONSTER_CORPULENT,
	MONSTER_DAEDABUS,
	MONSTER_PALADIN,
	MONSTER_GAMON,
	MONSTER_MEPHISTO,
	MONSTER_MAFIBUS,
	MONSTER_ICEFATSO,
	MONSTER_ABOMINATION,
	MONSTER_REDEEMER,
	MONSTER_GOLDGOLEM,
	
	// Arachnotron
	MONSTER_FUSIONSPIDER,
	MONSTER_RAILARACHNOTRON,
	MONSTER_HELLFORGESPIDER,
	MONSTER_VORE,
	MONSTER_BABYDEMOLISHER,
	MONSTER_CHAINGUNGENERAL,
	MONSTER_CHAINGUNCOMMANDO,
	MONSTER_LEGIONNAIRE,
	MONSTER_MANTICORE,
	
	// ArchVile
	MONSTER_DIABLOIST,
	MONSTER_UNDEADPRIEST,
	MONSTER_UNDEADPRIESTGHOST,
	MONSTER_DEATHVILE,
	MONSTER_HIEROPHANT,
	MONSTER_GURU,
	MONSTER_DEATHKNIGHT,
	MONSTER_HORSHACKER,
	MONSTER_DARKZEALOT,
	MONSTER_FLESHWIZARD,
	
	// Spider Mastermind
	MONSTER_DEMOLISHER,
	MONSTER_ARACHNOPHYTE,
	MONSTER_PSIONICQUEEN,
	MONSTER_ANGELOFDEATH,
	MONSTER_GOLDLICH,
	MONSTER_GOLDLICHFAKE,
	MONSTER_IRONLICH,
	MONSTER_SPIDEROVERLORD,
	MONSTER_DARKLICH,
	
	// Cyberdemon
	MONSTER_CARDINAL,
	MONSTER_TERMINATOR,
	MONSTER_THAMUZ,
	MONSTER_AZAZEL,
	MONSTER_HELLSMITH,
	MONSTER_THANATOS,
	MONSTER_AVATAR,
	MONSTER_CERBERUS,
	
	MONSTER_DREAMINGGOD,
	MONSTER_TORRASQUE,
	MONSTER_MORDECQAI,
	MONSTER_GODSLAYER,
	MONSTER_GOLGOTH,
	
	// zombieman uniques
	MONSTER_TERON,
	// shotgunner uniques
	MONSTER_GANT,
	// chaingunnner uniques
	MONSTER_BRONN,
	// imp uniques
	MONSTER_VAAJ,
	// demon uniques
	MONSTER_REMUS,
	// spectre uniques
	MONSTER_SSRATH,
	// lost soul uniques
	MONSTER_HOLLOWSHELL,
	// cacodemon uniques
	MONSTER_OMNISIGHT,
	// pain e. uniques
	MONSTER_CHEGOVAX,
	// rev uniques
	MONSTER_ONIMUZ,
	// hk uniques
	MONSTER_HARKIMONDE,
	// baron uniques
	MONSTER_LESHRAC,
	MONSTER_LESHRACPOD,
	// manc uniques
	MONSTER_KRULL,
	// arachno uniques
	MONSTER_THORAX,
	// vile uniques
	MONSTER_ZRAVOG,
	// sm uniques
	MONSTER_ERYXIA,
	// cyber uniques
	MONSTER_ABAXOTH,
};

#define DND_CUSTOM_ZOMBIEMAN_BEGIN MONSTER_ZOMBIEMANGRAY
#define DND_CUSTOM_ZOMBIEMAN_END MONSTER_ZOMBIEPROPHET

#define DND_CUSTOM_SHOTGUNGUY_BEGIN MONSTER_SSGLOS
#define DND_CUSTOM_SHOTGUNGUY_END MONSTER_ZOMBIESSG

#define DND_CUSTOM_CHAINGUNGUY_BEGIN MONSTER_ZOMBIEQUAKE3
#define DND_CUSTOM_CHAINGUNGUY_END MONSTER_BERSERKERGUY

#define DND_CUSTOM_IMP_BEGIN MONSTER_DARKIMP1
#define DND_CUSTOM_IMP_END MONSTER_ROACH

#define DND_CUSTOM_DEMON_BEGIN MONSTER_BLOODDEMON
#define DND_CUSTOM_DEMON_END MONSTER_PUREBREDDEMON

#define DND_CUSTOM_SPECTRE_BEGIN MONSTER_LURKER
#define DND_CUSTOM_SPECTRE_END MONSTER_NIGHTMAREDEMON

#define DND_CUSTOM_LOSTSOUL_BEGIN MONSTER_BABYCACO
#define DND_CUSTOM_LOSTSOUL_END MONSTER_DARKLICH_SPIRIT

#define DND_CUSTOM_CACODEMON_BEGIN MONSTER_WEAKENER
#define DND_CUSTOM_CACODEMON_END MONSTER_WICKED

#define DND_CUSTOM_PAINE_BEGIN MONSTER_BLOODLICH
#define DND_CUSTOM_PAINE_END MONSTER_WRAITH

#define DND_CUSTOM_REVENANT_BEGIN MONSTER_INCARNATE
#define DND_CUSTOM_REVENANT_END MONSTER_DRAUGR

#define DND_CUSTOM_HK_BEGIN MONSTER_BLOODSATYR
#define DND_CUSTOM_HK_END MONSTER_GLADIATOR

#define DND_CUSTOM_BARON_BEGIN MONSTER_LAVADEMON
#define DND_CUSTOM_BARON_END MONSTER_WARMASTER

#define DND_CUSTOM_FATSO_BEGIN MONSTER_CORPULENT
#define DND_CUSTOM_FATSO_END MONSTER_GOLDGOLEM

#define DND_CUSTOM_ARACHNO_BEGIN MONSTER_FUSIONSPIDER
#define DND_CUSTOM_ARACHNO_END MONSTER_MANTICORE

#define DND_CUSTOM_VILE_BEGIN MONSTER_DIABLOIST
#define DND_CUSTOM_VILE_END MONSTER_FLESHWIZARD

#define DND_CUSTOM_SM_BEGIN MONSTER_DEMOLISHER
#define DND_CUSTOM_SM_END MONSTER_DARKLICH

#define DND_CUSTOM_CYBER_BEGIN MONSTER_CARDINAL
#define DND_CUSTOM_CYBER_END MONSTER_CERBERUS

#define DND_UNIQUE_ZOMBIEMAN_BEGIN MONSTER_TERON
#define DND_UNIQUE_ZOMBIEMAN_END MONSTER_TERON

#define DND_UNIQUE_SHOTGUNGUY_BEGIN MONSTER_GANT
#define DND_UNIQUE_SHOTGUNGUY_END MONSTER_GANT

#define DND_UNIQUE_CHAINGUNGUY_BEGIN MONSTER_BRONN
#define DND_UNIQUE_CHAINGUNGUY_END MONSTER_BRONN

#define DND_UNIQUE_IMP_BEGIN MONSTER_VAAJ
#define DND_UNIQUE_IMP_END MONSTER_VAAJ

#define DND_UNIQUE_DEMON_BEGIN MONSTER_REMUS
#define DND_UNIQUE_DEMON_END MONSTER_REMUS

#define DND_UNIQUE_SPECTRE_BEGIN MONSTER_SSRATH
#define DND_UNIQUE_SPECTRE_END MONSTER_SSRATH

#define DND_UNIQUE_LOSTSOUL_BEGIN MONSTER_HOLLOWSHELL
#define DND_UNIQUE_LOSTSOUL_END MONSTER_HOLLOWSHELL

#define DND_UNIQUE_CACODEMON_BEGIN MONSTER_OMNISIGHT
#define DND_UNIQUE_CACODEMON_END MONSTER_OMNISIGHT

#define DND_UNIQUE_PAINE_BEGIN MONSTER_CHEGOVAX
#define DND_UNIQUE_PAINE_END MONSTER_CHEGOVAX

#define DND_UNIQUE_REVENANT_BEGIN MONSTER_ONIMUZ
#define DND_UNIQUE_REVENANT_END MONSTER_ONIMUZ

#define DND_UNIQUE_HK_BEGIN MONSTER_HARKIMONDE
#define DND_UNIQUE_HK_END MONSTER_HARKIMONDE

#define DND_UNIQUE_BARON_BEGIN MONSTER_LESHRAC
#define DND_UNIQUE_BARON_END MONSTER_LESHRAC

#define DND_UNIQUE_FATSO_BEGIN MONSTER_KRULL
#define DND_UNIQUE_FATSO_END MONSTER_KRULL

#define DND_UNIQUE_ARACHNO_BEGIN MONSTER_THORAX
#define DND_UNIQUE_ARACHNO_END MONSTER_THORAX

#define DND_UNIQUE_VILE_BEGIN MONSTER_ZRAVOG
#define DND_UNIQUE_VILE_END MONSTER_ZRAVOG

#define DND_UNIQUE_SM_BEGIN MONSTER_ERYXIA
#define DND_UNIQUE_SM_END MONSTER_ERYXIA

#define DND_UNIQUE_CYBER_BEGIN MONSTER_ABAXOTH
#define DND_UNIQUE_CYBER_END MONSTER_ABAXOTH

#define DND_UNIQUEMONSTER_BEGIN MONSTER_TERON
#define DND_UNIQUEBOSS_BEGIN MONSTER_ERYXIA

#define DND_BOSS_BEGIN MONSTER_DEMOLISHER
#define LEGENDARY_START MONSTER_DREAMINGGOD
#define LEGENDARY_END MONSTER_GOLGOTH
#define DND_LASTMONSTER_INDEX MONSTER_ABAXOTH
#define DND_MAX_LEGENDARY (LEGENDARY_END - LEGENDARY_START + 1)
#define MONSTER_COUNT (DND_LASTMONSTER_INDEX + 50) // possible compatibility for other wads' monsters

void ScaleMonsterMass(int level) {
	int m = GetActorProperty(0, APROP_MASS);
	int new_m = m * (100 + level * DND_MONSTERMASS_SCALE) / 100;
	
	// overflow check
	if(m < new_m)
		SetActorProperty(0, APROP_MASS, new_m);
	else if(m > new_m)
		SetActorProperty(0, APROP_MASS, INT_MAX);
}

enum {
	DND_MONSTERSIZE_SMALL,
	DND_MONSTERSIZE_MEDIUM,
	DND_MONSTERSIZE_BIG
};

int GetMonsterSizeType(int id) {
	switch(id) {
		case MONSTER_ZOMBIEMAN:
		case MONSTER_SHOTGUNNER:
		case MONSTER_CHAINGUNNER:
		case MONSTER_DEMON:
		case MONSTER_SPECTRE:
		case MONSTER_IMP:
		case MONSTER_NAZI:
		case MONSTER_LOSTSOUL:
		return DND_MONSTERSIZE_SMALL;
		
		case MONSTER_CACODEMON:
		case MONSTER_PAINELEMENTAL:
		case MONSTER_REVENANT:
		case MONSTER_HELLKNIGHT:
		case MONSTER_VILE:
		return DND_MONSTERSIZE_MEDIUM;
		
		case MONSTER_BARON:
		case MONSTER_FATSO:
		case MONSTER_SPIDER:
		case MONSTER_MASTERMIND:
		case MONSTER_CYBERDEMON:
		return DND_MONSTERSIZE_BIG;
		
		default:
		if(id <= DND_CUSTOM_LOSTSOUL_END)
			return DND_MONSTERSIZE_SMALL;
		if(id < DND_CUSTOM_BARON_BEGIN || (id >= DND_CUSTOM_VILE_BEGIN && id <= DND_CUSTOM_VILE_END))
			return DND_MONSTERSIZE_MEDIUM;
		return DND_MONSTERSIZE_BIG;
	}
}

// this is the single source that gives the monsters their proper class protections
// or their weaknesses
void HandleMonsterClassInnates(int mid, int id) {
	if
	(
		id == MONSTER_ZOMBIEMAN || 
		(id >= DND_CUSTOM_ZOMBIEMAN_BEGIN && id <= DND_CUSTOM_ZOMBIEMAN_END) ||
		(id >= DND_UNIQUE_ZOMBIEMAN_BEGIN && id <= DND_UNIQUE_ZOMBIEMAN_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_ZOMBIEMAN;
	}
	else if
	(
		id == MONSTER_SHOTGUNNER || 
		(id >= DND_CUSTOM_SHOTGUNGUY_BEGIN & id <= DND_CUSTOM_SHOTGUNGUY_END) ||
		(id >= DND_UNIQUE_SHOTGUNGUY_BEGIN & id <= DND_UNIQUE_SHOTGUNGUY_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_SHOTGUNGUY;
	}
	else if
	(
		id == MONSTER_CHAINGUNNER || 
		(id >= DND_CUSTOM_CHAINGUNGUY_BEGIN && id <= DND_CUSTOM_CHAINGUNGUY_END) ||
		(id >= DND_UNIQUE_CHAINGUNGUY_BEGIN && id <= DND_UNIQUE_CHAINGUNGUY_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_CHAINGUNGUY;
	}
	else if
	(
		id == MONSTER_IMP || 
		(id >= DND_CUSTOM_IMP_BEGIN && id <= DND_CUSTOM_IMP_END) ||
		(id >= DND_UNIQUE_IMP_BEGIN && id <= DND_UNIQUE_IMP_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_IMP;
	}
	else if
	(
		id == MONSTER_DEMON || 
		(id >= DND_CUSTOM_DEMON_BEGIN && id <= DND_CUSTOM_DEMON_END) ||
		(id >= DND_UNIQUE_DEMON_BEGIN && id <= DND_UNIQUE_DEMON_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_DEMON;
	}
	else if
	(
		id == MONSTER_SPECTRE || 
		(id >= DND_CUSTOM_SPECTRE_BEGIN && id <= DND_CUSTOM_SPECTRE_END) ||
		(id >= DND_UNIQUE_SPECTRE_BEGIN && id <= DND_UNIQUE_SPECTRE_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_SPECTRE;
	}
	else if
	(
		id == MONSTER_LOSTSOUL || 
		(id >= DND_CUSTOM_LOSTSOUL_BEGIN && id <= DND_CUSTOM_LOSTSOUL_END) ||
		(id >= DND_UNIQUE_LOSTSOUL_BEGIN && id <= DND_UNIQUE_LOSTSOUL_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_LOSTSOUL;
	}
	else if
	(
		id == MONSTER_CACODEMON || 
		(id >= DND_CUSTOM_CACODEMON_BEGIN && id <= DND_CUSTOM_CACODEMON_END) ||
		(id >= DND_UNIQUE_CACODEMON_BEGIN && id <= DND_UNIQUE_CACODEMON_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_CACODEMON;
	}
	else if
	(
		id == MONSTER_PAINELEMENTAL ||
		(id >= DND_CUSTOM_PAINE_BEGIN && id <= DND_CUSTOM_PAINE_END) ||
		(id >= DND_UNIQUE_PAINE_BEGIN && id <= DND_UNIQUE_PAINE_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_PAINELEMENTAL;
	}
	else if
	(
		id == MONSTER_REVENANT ||
		(id >= DND_CUSTOM_REVENANT_BEGIN && id <= DND_CUSTOM_REVENANT_END) ||
		(id >= DND_UNIQUE_REVENANT_BEGIN && id <= DND_UNIQUE_REVENANT_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_REVENANT;
	}
	else if
	(
		id == MONSTER_HELLKNIGHT ||
		(id >= DND_CUSTOM_HK_BEGIN && id <= DND_CUSTOM_HK_END) ||
		(id >= DND_UNIQUE_HK_BEGIN && id <= DND_UNIQUE_HK_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_HELLKNIGHT;
	}
	else if
	(
		id == MONSTER_BARON ||
		(id >= DND_CUSTOM_BARON_BEGIN && id <= DND_CUSTOM_BARON_END) ||
		(id >= DND_UNIQUE_BARON_BEGIN && id <= DND_UNIQUE_BARON_END)
	) 
	{
		MonsterProperties[mid].class = MONSTERCLASS_BARON;
	}
	else if
	(
		id == MONSTER_FATSO || 
		(id >= DND_CUSTOM_FATSO_BEGIN && id <= DND_CUSTOM_FATSO_END) ||
		(id >= DND_UNIQUE_FATSO_BEGIN && id <= DND_UNIQUE_FATSO_END)
	) 
	{
		MonsterProperties[mid].class = MONSTERCLASS_FATSO;
	}
	else if
	(
		id == MONSTER_SPIDER ||
		(id >= DND_CUSTOM_ARACHNO_BEGIN && id <= DND_CUSTOM_ARACHNO_END) ||
		(id >= DND_UNIQUE_ARACHNO_BEGIN && id <= DND_UNIQUE_ARACHNO_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_ARACHNOTRON;
	}
	else if
	(
		id == MONSTER_VILE || 
		(id >= DND_CUSTOM_VILE_BEGIN && id <= DND_CUSTOM_VILE_END) ||
		(id >= DND_UNIQUE_VILE_BEGIN && id <= DND_UNIQUE_VILE_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_ARCHVILE;
	}
	else if
	(
		id == MONSTER_MASTERMIND ||
		(id >= DND_CUSTOM_SM_BEGIN && id <= DND_CUSTOM_SM_END) ||
		(id >= DND_UNIQUE_SM_BEGIN && id <= DND_UNIQUE_SM_END)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_SPIDERMASTERMIND;
	}
	else if
	(
		id == MONSTER_CYBERDEMON ||
		(id >= DND_CUSTOM_CYBER_BEGIN && id <= LEGENDARY_END) ||
		(id >= DND_UNIQUE_CYBER_BEGIN)
	)
	{
		MonsterProperties[mid].class = MONSTERCLASS_CYBERDEMON;
	}
}

void HandleSpecialTraits(int mid, int id) {
	if(MonsterProperties[mid].trait_list[DND_REJUVENATING])
		GiveInventory("Rejuvenate_Script_Run", 1);
	if(MonsterProperties[mid].trait_list[DND_FORTIFIED]) {
		// full fortify exceptions
		if(id != MONSTER_TERON && id != MONSTER_CHEGOVAX)
			SetInventory("MonsterFortifyCount", MonsterProperties[mid].maxhp * DND_FORTIFY_AMOUNT / 10);
		else
			SetInventory("MonsterFortifyCount", MonsterProperties[mid].maxhp);
	}
	if(MonsterProperties[mid].trait_list[DND_REPEL])
		GiveInventory("Repel_Script_Run", 1);
	if(MonsterProperties[mid].trait_list[DND_CRIPPLE])
		GiveInventory("Cripple_Script_Run", 1);
}

void LoadMonsterTraits(int m_id) {
	int i = ActivatorTID() - DND_MONSTERTID_BEGIN;
	
	// copy preset data to here now
	for(int j = 0; j < MAX_MONSTER_TRAITS; ++j)
		MonsterProperties[i].trait_list[j] = MonsterData[m_id].trait_list[j];
		
	// some of the flags are inherent in actor info, so do make use of that
	MonsterProperties[i].trait_list[DND_GHOST] 					|= CheckFlag(0, "GHOST");
	MonsterProperties[i].trait_list[DND_EXPLOSIVE_IMMUNE] 		|= CheckFlag(0, "NORADIUSDMG");
	MonsterProperties[i].trait_list[DND_ARMORPEN] 				|= CheckFlag(0, "PIERCEARMOR");
	MonsterProperties[i].trait_list[DND_HARDENED_SKIN] 			|= CheckFlag(0, "DONTRIP");
	MonsterProperties[i].trait_list[DND_NOPAIN] 				|= CheckFlag(0, "NOPAIN");
	MonsterProperties[i].trait_list[DND_REFLECTIVE] 			|= CheckFlag(0, "REFLECTIVE");
		
	if(MonsterProperties[i].id >= LEGENDARY_START)
		MonsterProperties[i].trait_list[DND_LEGENDARY] |= true;
	
	// check for weaknesses and monster not having any kind of resist to this type
	// if magical or undead, give it silver weakness (this is common no exceptions)
	if(MonsterData[m_id].flags & (DND_MTYPE_UNDEAD_POW | DND_MTYPE_MAGICAL_POW))
		MonsterProperties[i].trait_list[DND_SILVER_WEAKNESS] = true;
		
	// if robotic, give energy weakness
	if((MonsterData[m_id].flags & DND_MTYPE_ROBOTIC_POW) && !MonsterProperties[i].trait_list[DND_ENERGY_RESIST] && !MonsterProperties[i].trait_list[DND_ENERGY_IMMUNE])
		MonsterProperties[i].trait_list[DND_ENERGY_WEAKNESS] = true;
	// if magical, give magic weakness
	if((MonsterData[m_id].flags & DND_MTYPE_MAGICAL_POW) && !MonsterProperties[i].trait_list[DND_MAGIC_RESIST] && !MonsterProperties[i].trait_list[DND_MAGIC_IMMUNE])
		MonsterProperties[i].trait_list[DND_MAGIC_WEAKNESS] = true;
}

enum {
	MONSTER_PET_ZOMBIE
};
#define MAX_PET_TYPES MONSTER_PET_ZOMBIE + 1

enum {
	DND_ZOMBIEMANID,
	DND_SHOTGUNNERID,
	DND_CHAINGUNGUYID,
	DND_DEMONID,
	DND_SPECTREID,
	DND_IMPID,
	DND_CACODEMONID,
	DND_PAINELEMENTALID,
	DND_LOSTSOULID,
	DND_REVENANTID,
	DND_HELLKNIGHTID,
	DND_BARONID,
	DND_FATSOID,
	DND_ARACHNOTRONID,
	DND_ARCHVILEID,
	DND_SPIDERMASTERMINDID,
	DND_CYBERDEMONID,
	DND_NAZIID
};

enum {
	DND_MTYPE_DEMON_POW 				= 			0b1,
	DND_MTYPE_UNDEAD_POW 				= 			0b10,
	DND_MTYPE_MAGICAL_POW 				= 			0b100,
	DND_MTYPE_ROBOTIC_POW 				= 			0b1000,
	DND_MTYPE_ZOMBIE_POW 				= 			0b10000
};

enum {
	DND_MTYPE_DEMON,
	DND_MTYPE_UNDEAD,
	DND_MTYPE_MAGICAL,
	DND_MTYPE_ROBOTIC
};

// first 4 above dictate the basic monster types
#define MONSTER_TYPE_INFO_TAG 0
#define MONSTER_TYPE_INFO_ICON 1
#define MAX_MONSTER_TYPES 4
str MonsterTypeInfo[MAX_MONSTER_TYPES][2] = {
	{ "MType_Demon", "DNDEDEM" },
	{ "MType_Undead", "DNDEUND" },
	{ "MType_Magical", "DNDEMAG" },
	{ "MType_Robotic", "DNDEROB" }
};

int InferMonsterPower(int mid) {
	if(mid & DND_MTYPE_ROBOTIC_POW) {
		// give priority to demon on half demon half robots
		if(mid & DND_MTYPE_DEMON_POW)
			return DND_MTYPE_DEMON;
		return DND_MTYPE_ROBOTIC;
	}
	if(mid & DND_MTYPE_MAGICAL_POW)
		return DND_MTYPE_MAGICAL;
	if(mid & DND_MTYPE_UNDEAD_POW)
		return DND_MTYPE_UNDEAD;
	return DND_MTYPE_DEMON;
}

int GetMonsterType(int monsterID) {
	int mid = MonsterData[monsterID].flags;
	return InferMonsterPower(mid);
}

int GetCustomMonsterType(int properties) {
	// get the first 5 bits only
	return InferMonsterPower(properties & 0x1F);
}

typedef struct {
	int health;
	int flags;
	bool trait_list[MAX_MONSTER_TRAITS];
} monster_data_T;

monster_data_T MonsterData[DND_LASTMONSTER_INDEX + 1] = {
	{ 20, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEMANID,
	{ 30, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_SHOTGUNNERID,
	{ 70, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_CHAINGUNGUYID,
	{ 150, 			DND_MTYPE_DEMON_POW 									},//DND_DEMONID,
	{ 150, 			DND_MTYPE_DEMON_POW 									},//DND_SPECTREID,
	{ 60, 			DND_MTYPE_DEMON_POW 									},//DND_IMPID,
	{ 400, 			DND_MTYPE_DEMON_POW 									},//DND_CACODEMONID,
	{ 400, 			DND_MTYPE_DEMON_POW 									},//DND_PAINELEMENTALID,
	{ 50, 			DND_MTYPE_UNDEAD_POW 									},//DND_LOSTSOULID,
	{ 300, 			DND_MTYPE_UNDEAD_POW 									},//DND_REVENANTID,
	{ 500, 			DND_MTYPE_DEMON_POW 									},//DND_HELLKNIGHTID,
	{ 1000, 		DND_MTYPE_DEMON_POW 									},//DND_BARONID,
	{ 600, 			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_FATSOID,
	{ 500, 			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_ARACHNOTRONID,
	{ 700, 			DND_MTYPE_DEMON_POW 									},//DND_ARCHVILEID,
	{ 3000, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_SPIDERMASTERMINDID,
	{ 4000, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_CYBERDEMONID,
	{ 50, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_NAZIID,	
	
	/// Zombieman
	{ 40, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEGRAY,
	{ 45, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIERANGER,
	{ 35, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIESMG,
	{ 30, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIERAPID,
	{ 45, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEMARINE,
    { 45, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIELOS,
    { 25, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEPISTOL,
    { 55, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEQUAKE1,
    { 65, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEHUNTER,
    { 50, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_PROPHET,

	// Shotgunner
    { 50, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_SSGLOS,
    { 50, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZSPECSG,
    { 50, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_SGLOS,
    { 50, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_SAWEDOFF1,
    { 50, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_SAWEDOFF2,
    { 65, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ROGUE,
    { 70, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEQUAKE2,
    { 75, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIESSG,

	// Chaingunner
    { 85, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEQUAKE3,
    { 85, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZOMBIEMG,
    { 65, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_INITIATE,
    { 100, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_DOUBLEGUNNER,
    { 110, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_CGMAJOR,
    { 100, 			DND_MTYPE_ROBOTIC_POW									},//DND_MRROBOT,
    { 70, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZSEC,
    { 60,			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_ZSPECMG,
	{ 85, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_PLASMAZOMBIE,
	{ 150, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_BERSERKERGUY,

	// Demon
    { 250, 			DND_MTYPE_DEMON_POW										},//DND_BLOODDEMON,
    { 160, 			DND_MTYPE_DEMON_POW										},//DND_BLOODFIEND,
    { 300, 			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW				},//DND_CYBERFIEND,
    { 200, 			DND_MTYPE_DEMON_POW										},//DND_FLAMEDEMON,
    { 180, 			DND_MTYPE_ROBOTIC_POW									},//DND_STONEIMP,
    { 195, 			DND_MTYPE_DEMON_POW										},//DND_SCAVENGER,
    { 200, 			DND_MTYPE_DEMON_POW										},//DND_SOULEATER,
    { 275, 			DND_MTYPE_DEMON_POW										},//DND_NHUMCIGN,
    { 250, 			DND_MTYPE_ROBOTIC_POW									},//DND_STONEDEMON,
    { 240, 			DND_MTYPE_DEMON_POW										},//DND_BRUTY,
	{ 150, 			DND_MTYPE_DEMON_POW										},//DND_SATYR,
	{ 325, 			DND_MTYPE_MAGICAL_POW									},//DND_EARTHGOLEM,
	{ 250, 			DND_MTYPE_DEMON_POW										},//DND_RAVAGER,
	{ 275, 			DND_MTYPE_DEMON_POW										},//DND_PUREBREDDEMON,

	// Spectre
    { 160, 			DND_MTYPE_DEMON_POW										},//DND_LURKER,
    { 160, 			DND_MTYPE_DEMON_POW										},//DND_GRAVEDIGGER,
    { 175, 			DND_MTYPE_DEMON_POW										},//DND_DEVOURER,
    { 150, 			DND_MTYPE_DEMON_POW										},//DND_NIGHTMAREDEMON,
	
	// Imp
    { 80, 			DND_MTYPE_DEMON_POW										},//DND_DARKIMP1,
    { 100, 			DND_MTYPE_DEMON_POW										},//DND_VOIDDARKIMP,
    { 100, 			DND_MTYPE_DEMON_POW										},//DND_NETHERDARKIMP,
    { 90, 			DND_MTYPE_DEMON_POW										},//DND_DARKIMP2,
    { 80, 			DND_MTYPE_DEMON_POW										},//DND_IMPABOM,
    { 55, 			DND_MTYPE_DEMON_POW										},//DND_STIMP,
    { 65, 			DND_MTYPE_DEMON_POW										},//DND_VOIDIMP,
    { 100, 			DND_MTYPE_DEMON_POW										},//DND_SOULHARVESTER,
    { 60, 			DND_MTYPE_DEMON_POW										},//DND_PYROIMP,
    { 85, 			DND_MTYPE_DEMON_POW										},//DND_DEVIL,
	{ 125, 			DND_MTYPE_DEMON_POW										},//DND_DEVIL2,
    { 70, 			DND_MTYPE_DEMON_POW										},//DND_VULGAR,
    { 80, 			DND_MTYPE_UNDEAD_POW									},//DND_UNDEADMAGE,
	{ 85, 			DND_MTYPE_DEMON_POW										},//DND_SHADOW,
	{ 90,			DND_MTYPE_ROBOTIC_POW									},//DND_REAVER
	{ 80, 			DND_MTYPE_DEMON_POW										},//DND_ROACH,

	// Lost Soul
    { 60, 			DND_MTYPE_DEMON_POW										},//DND_BABYCACO,
    { 60, 			DND_MTYPE_UNDEAD_POW									},//DND_ETHEREALSOUL,
    { 50, 			DND_MTYPE_DEMON_POW										},//DND_FLESHSPAWN,
    { 75, 			DND_MTYPE_MAGICAL_POW									},//DND_GUARDIANCUBE,
    { 40, 			DND_MTYPE_UNDEAD_POW									},//DND_FORGOTTENONE,
	{ 35, 			DND_MTYPE_MAGICAL_POW									},//DND_HADESSPHERE,
	{ 100, 			DND_MTYPE_DEMON_POW										},//DND_WATCHER,
	{ 75, 			DND_MTYPE_UNDEAD_POW									},//DND_DARKLICH_SPIRIT,

	// Cacodemon
    { 300, 			DND_MTYPE_DEMON_POW										},//DND_WEAKENER,
    { 250, 			DND_MTYPE_MAGICAL_POW									},//DND_SHADOWPRIEST,
    { 325, 			DND_MTYPE_DEMON_POW										},//DND_GRELL,
    { 500, 			DND_MTYPE_UNDEAD_POW									},//DND_DEATHWHISPERER,
    { 500, 			DND_MTYPE_UNDEAD_POW									},//DND_CACOLICH,
    { 400, 			DND_MTYPE_DEMON_POW										},//DND_INFERNO,
    { 275, 			DND_MTYPE_MAGICAL_POW									},//DND_GUARDIAN,
    { 300, 			DND_MTYPE_DEMON_POW										},//DND_ENHANCEDCACO,
    { 425, 			DND_MTYPE_MAGICAL_POW									},//DND_EARTHLICH,
	{ 300, 			DND_MTYPE_DEMON_POW										},//DND_WICKED,

	// Pain E.
	{ 675, 			DND_MTYPE_MAGICAL_POW									},//DND_BLOODLICH,
	{ 800, 			DND_MTYPE_DEMON_POW										},//DND_HADESELEMENTAL,
	{ 700, 			DND_MTYPE_DEMON_POW										},//DND_HELLARBITER,
	{ 500, 			DND_MTYPE_DEMON_POW										},//DND_DEFILER,
	{ 550, 			DND_MTYPE_DEMON_POW										},//DND_TORTUREDSOUL,
	{ 500, 			DND_MTYPE_MAGICAL_POW									},//DND_SHADOWDISCIPLE,
	{ 750, 			DND_MTYPE_MAGICAL_POW									},//DND_SENTINEL,
	{ 300,			DND_MTYPE_MAGICAL_POW									},//DND_PHANTASM
	{ 75, 			DND_MTYPE_UNDEAD_POW									},//DND_WRAITH,

	// Revenant
	{ 250, 			DND_MTYPE_UNDEAD_POW									},//DND_INCARNATE,
	{ 250, 			DND_MTYPE_UNDEAD_POW									},//DND_BEAMREVENANT,
	{ 250, 			DND_MTYPE_UNDEAD_POW									},//DND_AXEKNIGHT,
	{ 300, 			DND_MTYPE_UNDEAD_POW									},//DND_WIDOWMAKER,
	{ 350, 			DND_MTYPE_MAGICAL_POW									},//DND_YETI,
	{ 280, 			DND_MTYPE_MAGICAL_POW									},//DND_SLUDGEGIANT,
	{ 140, 			DND_MTYPE_MAGICAL_POW									},//DND_SLUDGEGIANT2,
	{ 70, 			DND_MTYPE_MAGICAL_POW									},//DND_SLUDGEGIANT3,
	{ 350, 			DND_MTYPE_UNDEAD_POW									},//DND_CADAVER,
	{ 275, 			DND_MTYPE_MAGICAL_POW									},//DND_DARKSERVANT,
	{ 325, 			DND_MTYPE_DEMON_POW										},//DND_CRAWLER,
	{ 200, 			DND_MTYPE_ROBOTIC_POW									},//DND_CYBORGSOLDIER,
	{ 350, 			DND_MTYPE_UNDEAD_POW									},//DND_DRAUGR,

	// Hell Knight
	{ 550, 			DND_MTYPE_DEMON_POW 									},//DND_BLOODSATYR,
	{ 400, 			DND_MTYPE_DEMON_POW 									},//DND_HELLWARRIOR,
	{ 600, 			DND_MTYPE_DEMON_POW 									},//DND_HELLSFURY,
	{ 550, 			DND_MTYPE_UNDEAD_POW 									},//DND_BLACKKNIGHT,
	{ 700, 			DND_MTYPE_DEMON_POW 									},//DND_ARCHON,
	{ 650, 			DND_MTYPE_DEMON_POW 									},//DND_WARLORD,
	{ 500, 			DND_MTYPE_MAGICAL_POW 									},//DND_SKULLWIZARD,
	{ 650, 			DND_MTYPE_ROBOTIC_POW 									},//DND_CYBORGWARRIOR,
	{ 400, 			DND_MTYPE_DEMON_POW 									},//DND_SHADOWBEAST,
	{ 450, 			DND_MTYPE_DEMON_POW 									},//DND_CHAOSSERPENT,
	{ 750, 			DND_MTYPE_DEMON_POW 									},//DND_MOONSATYR,
	{ 400, 			DND_MTYPE_MAGICAL_POW 									},//DND_ICEGOLEM,
	{ 500,			DND_MTYPE_ROBOTIC_POW									},//DND_PUTREFIER,
	{ 450, 			DND_MTYPE_DEMON_POW 									},//DND_GLADIATOR,

	// Baron
	{ 1000, 		DND_MTYPE_DEMON_POW 									},//DND_LAVADEMON,
	{ 1100, 		DND_MTYPE_DEMON_POW 									},//DND_LORDOFHERESY,
	{ 1200, 		DND_MTYPE_DEMON_POW 									},//DND_BORMERETH,
	{ 1100, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_BARBATOS,
	{ 1000, 		DND_MTYPE_DEMON_POW 									},//DND_BLOODSEEKER,
	{ 900, 			DND_MTYPE_MAGICAL_POW 									},//DND_SHADOWWIZARD,
	{ 1650, 		DND_MTYPE_DEMON_POW 									},//DND_KJAROCH,
	{ 1500, 		DND_MTYPE_ROBOTIC_POW 									},//DND_CYBRUISER,
	{ 1500, 		DND_MTYPE_DEMON_POW 									},//DND_BRUISERDEMON,
	{ 900, 			DND_MTYPE_DEMON_POW 									},//DND_MAGMASERPENT,
	{ 900, 			DND_MTYPE_UNDEAD_POW 									},//DND_DREADKNIGHT,
	{ 900, 			DND_MTYPE_MAGICAL_POW 									},//DND_MAGMAGOLEM,
	{ 800,			DND_MTYPE_ROBOTIC_POW									},//DND_JUDICATOR,
	{ 1250, 		DND_MTYPE_DEMON_POW 									},//DND_WARMASTER,
	
	// Fatso
	{ 850, 			DND_MTYPE_DEMON_POW 									},//DND_CORPULENT,
	{ 850, 			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_DAEDABUS,
	{ 775, 			DND_MTYPE_ROBOTIC_POW 									},//DND_PALADIN,
	{ 875, 			DND_MTYPE_MAGICAL_POW 									},//DND_GAMON,
	{ 900, 			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_MEPHISTO,
	{ 1100, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_MAFIBUS,
	{ 650, 			DND_MTYPE_DEMON_POW 									},//DND_ICEFATSO,
	{ 775, 			DND_MTYPE_DEMON_POW 									},//DND_ABOMINATION,
	{ 800,			DND_MTYPE_ROBOTIC_POW									},//DND_REDEEMER
	{ 1000, 		DND_MTYPE_MAGICAL_POW 									},//DND_GOLDGOLEM,
	
	// Arachnotron
	{ 500, 			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_FUSIONSPIDER,
	{ 450, 			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_RAILARACHNOTRON,
	{ 700, 			DND_MTYPE_DEMON_POW 									},//DND_HELLFORGESPIDER,
	{ 700, 			DND_MTYPE_DEMON_POW 									},//DND_VORE,
	{ 700, 			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_BABYDEMOLISHER,
	{ 550, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_CHAINGUNGENERAL,
	{ 550, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_CHAINGUNCOMMANDO,
	{ 600, 			DND_MTYPE_UNDEAD_POW | DND_MTYPE_ZOMBIE_POW 			},//DND_LEGIONNAIRE,
	{ 650, 			DND_MTYPE_DEMON_POW 									},//DND_MANTICORE,
	
	// ArchVile
	{ 850, 			DND_MTYPE_DEMON_POW 									},//DND_DIABLOIST,
	{ 800, 			DND_MTYPE_UNDEAD_POW 									},//DND_UNDEADPRIEST,
	{ 100, 			DND_MTYPE_UNDEAD_POW 									},//DND_UNDEADPRIESTGHOST,
	{ 800, 			DND_MTYPE_DEMON_POW 									},//DND_DEATHVILE,
	{ 1250, 		DND_MTYPE_DEMON_POW 									},//DND_HIEROPHANT,
	{ 800, 			DND_MTYPE_MAGICAL_POW 									},//DND_GURU,
	{ 900, 			DND_MTYPE_UNDEAD_POW 									},//DND_DEATHKNIGHT,
	{ 900, 			DND_MTYPE_UNDEAD_POW 									},//DND_HORSHACKER,
	{ 750, 			DND_MTYPE_MAGICAL_POW 									},//DND_DARKZEALOT,
	{ 625, 			DND_MTYPE_DEMON_POW 									},//DND_FLESHWIZARD,
	
	// Spider Mastermind
	{ 4000, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_DEMOLISHER,
	{ 3500, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_ARACHNOPHYTE,
	{ 4000, 		DND_MTYPE_DEMON_POW 									},//DND_PSIONICQUEEN,
	{ 4000, 		DND_MTYPE_DEMON_POW 									},//DND_ANGELOFDEATH,
	{ 4750, 		DND_MTYPE_MAGICAL_POW 									},//DND_GOLDLICH,
	{ 300, 			DND_MTYPE_MAGICAL_POW 									},//DND_GOLDLICHFAKE,
	{ 4000, 		DND_MTYPE_MAGICAL_POW 									},//DND_IRONLICH,
	{ 4000, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_SPIDEROVERLORD,
	{ 4000, 		DND_MTYPE_MAGICAL_POW 									},//DND_DARKLICH,
	
	// Cyberdemon
	{ 4500, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			}, //DND_CARDINAL,
	{ 5750, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_TERMINATOR,
	{ 4750, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_THAMUZ,
	{ 5250, 		DND_MTYPE_DEMON_POW 									},//DND_AZAZEL,
	{ 6000, 		DND_MTYPE_DEMON_POW 									},//DND_HELLSMITH,
	{ 6500, 		DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW 			},//DND_THANATOS,
	{ 5500, 		DND_MTYPE_MAGICAL_POW 									},//DND_AVATAR,
	{ 6000, 		DND_MTYPE_DEMON_POW 									},//DND_CERBERUS,
	
	// Legendaries
	{ 20000, 		DND_MTYPE_DEMON_POW 									},//DND_DREAMER,
	{ 16500, 		DND_MTYPE_DEMON_POW 									},//DND_TORRASQUE,
	{ 18500, 		DND_MTYPE_DEMON_POW 									},//DND_MORDECQAI,
	{ 13500, 		DND_MTYPE_ROBOTIC_POW 									},//DND_GODSLAYER,
	{ 17500, 		DND_MTYPE_DEMON_POW 									},//DND_GOLGOTH,
	
	// uniques
	{ 500,			DND_MTYPE_ZOMBIE_POW | DND_MTYPE_UNDEAD_POW				},//DND_TERON
	{ 800,			DND_MTYPE_ZOMBIE_POW | DND_MTYPE_UNDEAD_POW				},//DND_GANT
	{ 1200,			DND_MTYPE_ZOMBIE_POW | DND_MTYPE_UNDEAD_POW				},//DND_BRONN
	{ 900,			DND_MTYPE_DEMON_POW										},//DND_VAAJ
	{ 1500,			DND_MTYPE_ZOMBIE_POW | DND_MTYPE_UNDEAD_POW				},//DND_REMUS
	{ 1250,			DND_MTYPE_DEMON_POW										},//DND_SSRATH
	{ 600,			DND_MTYPE_UNDEAD_POW									},//DND_HOLLOWSHELL
	{ 1500,			DND_MTYPE_DEMON_POW										},//DND_OMNISIGHT
	{ 1000,			DND_MTYPE_MAGICAL_POW									},//DND_CHEGOVAX
	{ 900,			DND_MTYPE_UNDEAD_POW									},//DND_ONIMUZ
	{ 1750,			DND_MTYPE_DEMON_POW										},//DND_HARKIMONDE
	{ 2250,			DND_MTYPE_DEMON_POW										},//DND_LESHRAC
	{ 200,			DND_MTYPE_MAGICAL_POW									},//DND_LESHRACPOD
	{ 2000,			DND_MTYPE_DEMON_POW										},//DND_KRULL manc
	{ 1750,			DND_MTYPE_DEMON_POW | DND_MTYPE_ROBOTIC_POW				},//DND_THORAX arach
	{ 1800,			DND_MTYPE_MAGICAL_POW									},//DND_ZRAVOG vile
	{ 7500,			DND_MTYPE_DEMON_POW										},//DND_ERYXIA
	{ 8500,			DND_MTYPE_DEMON_POW										} //DND_ABAXOTH
};

int MonsterPetTypeList[MAX_PET_TYPES] = {
	DND_MTYPE_UNDEAD_POW
};

bool IsMonster(int tid) {
	return tid >= DND_MONSTERTID_BEGIN && tid < DnD_TID_List[DND_TID_MONSTER];
}

bool IsBoss() {
	int id = MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id;
	return IsMonsterIdBoss(id);
}

bool IsMonsterIdBoss(int id) {
	return id == MONSTER_MASTERMIND || id == MONSTER_CYBERDEMON || (id >= DND_BOSS_BEGIN && id < DND_UNIQUEMONSTER_BEGIN) || id >= DND_UNIQUEBOSS_BEGIN;
}

bool IsUniqueMonster(int id) {
	return id >= DND_UNIQUEMONSTER_BEGIN;
}

bool IsDemon() {
	return MonsterData[MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id].flags & DND_MTYPE_DEMON_POW;
}

bool IsMonsterIdDemon(int m_id) {
	return MonsterData[MonsterProperties[m_id].id].flags & DND_MTYPE_DEMON_POW;
}

bool IsZombie() {
	return MonsterData[MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id].flags & DND_MTYPE_ZOMBIE_POW;
}

bool IsUndead() {
	return MonsterData[MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id].flags & DND_MTYPE_UNDEAD_POW;
}

bool IsMagic() {
	return MonsterData[MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id].flags & DND_MTYPE_MAGICAL_POW;
}

bool IsMagicOrUndead() {
	return MonsterData[MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id].flags & (DND_MTYPE_MAGICAL_POW | DND_MTYPE_UNDEAD_POW);
}

bool IsActorMagicOrUndead(int i) {
	return MonsterData[MonsterProperties[i - DND_MONSTERTID_BEGIN].id].flags & (DND_MTYPE_MAGICAL_POW | DND_MTYPE_UNDEAD_POW);
}

bool IsRobotic() {
	return MonsterData[MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id].flags & DND_MTYPE_ROBOTIC_POW;
}

bool IsActorFullRobotic(int tid) {
	return MonsterData[MonsterProperties[tid - DND_MONSTERTID_BEGIN].id].flags == DND_MTYPE_ROBOTIC_POW;
}

bool IsLostSoul() {
	int id = MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id;
	return (id >= MONSTER_BABYCACO && id <= MONSTER_DARKLICH_SPIRIT) || id == MONSTER_LOSTSOUL;
}

bool isPet(int tid) {
	return tid >= DND_PETTID_BEGIN && tid < DND_PETTID_END;
}

// all demon barons, fatsos or arachnos or bosses that are demons can drop a soul ammo
bool CanDropSoulAmmo() {
	int mid = MonsterProperties[ActivatorTID() - DND_MONSTERTID_BEGIN].id;
	return (mid == MONSTER_BARON || (mid >= DND_CUSTOM_BARON_BEGIN && mid <= DND_CUSTOM_BARON_END) || 
			mid == MONSTER_FATSO || (mid >= DND_CUSTOM_FATSO_BEGIN && mid <= DND_CUSTOM_FATSO_END) ||
			mid == MONSTER_SPIDER || (mid >= DND_CUSTOM_ARACHNO_BEGIN && mid <= DND_CUSTOM_ARACHNO_END) ||
			isBoss()) && (MonsterData[mid].flags & DND_MTYPE_DEMON_POW);
}

// First element on each list is the "Vanilla" monster, rest follow from their variations with Var1 to VarX
/*
	Monster rarities formulated:
		- Common: These are vanilla tier monsters. Either vanilla monsters, or monsters with similar behavior reside here.
		- Uncommon: These are a monsters that are just a tad bit stronger than vanilla.
		- Rare - 1: These guys are strong. You don't want to encounter them early on.
		- Rare - 2: A variant of rare, a little more rare.
		- Very Rare: These guys... You'd really not want to be against these but they are still better than seeing a Legendary monster.
		- Epic: Truly dangerous. High threat monsters.
*/

enum {
	DND_MWEIGHT_COMMON = 1000,
	DND_MWEIGHT_UNCOMMON = 750,
	DND_MWEIGHT_RARE1 = 600,
	DND_MWEIGHT_RARE2 = 500,
	DND_MWEIGHT_VERYRARE = 325,
	DND_MWEIGHT_EPIC = 275,
	DND_MWEIGHT_ENDMARKER = -1
};

#define MAX_MONSTER_CATEGORIES (MONSTERCLASS_CYBERDEMON + 1)
#define MAX_MONSTER_VARIATIONS 17 // this includes vanilla

int Monster_Weights[MAX_MONSTER_CATEGORIES][MAX_MONSTER_VARIATIONS] = {
    // Zombieman
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_ENDMARKER
	},
    // Shotgunguy
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_ENDMARKER 
	},
    // Chaingunguy
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_EPIC, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_ENDMARKER
	},
    // Demon
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_EPIC, 
		DND_MWEIGHT_ENDMARKER
	},
    // Spectre
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_ENDMARKER
	},
    // Imp
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_RARE1 
	},
    // Caco
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_ENDMARKER
	},
    // Pain Elemental
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_ENDMARKER 
	},
    // Lost Soul
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_ENDMARKER 
	},
    // Revenant
    { 
		DND_MWEIGHT_COMMON,
		DND_MWEIGHT_COMMON,
		DND_MWEIGHT_UNCOMMON,
		DND_MWEIGHT_UNCOMMON,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_ENDMARKER
	},
    // HellKnight
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_UNCOMMON,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_ENDMARKER
	},
    // Baron
    { 
		DND_MWEIGHT_COMMON,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_UNCOMMON,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_UNCOMMON,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_EPIC,
		DND_MWEIGHT_ENDMARKER 
	},
    // Fatso
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE1, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_COMMON,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_ENDMARKER
	},
    // Arachno
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_COMMON,
		DND_MWEIGHT_COMMON,
		DND_MWEIGHT_UNCOMMON,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_ENDMARKER
	},
    // ArchVile
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_EPIC,
		DND_MWEIGHT_UNCOMMON,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_EPIC,
		DND_MWEIGHT_EPIC,
		DND_MWEIGHT_ENDMARKER
	},
    // Spider Mastermind
    { 
		DND_MWEIGHT_COMMON,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_UNCOMMON,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_RARE1,
		DND_MWEIGHT_EPIC,
		DND_MWEIGHT_RARE2,
		DND_MWEIGHT_VERYRARE,
		DND_MWEIGHT_ENDMARKER 
	},
    // Cyberdemon
    { 
		DND_MWEIGHT_COMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_UNCOMMON, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_VERYRARE, 
		DND_MWEIGHT_EPIC, 
		DND_MWEIGHT_RARE2, 
		DND_MWEIGHT_EPIC,
		DND_MWEIGHT_ENDMARKER 
	},
};

// these are filled by hand, finding the rarest monster of each class is needlessly complicated (find top classes, equal ones must be considered as sharing top spot etc.)
// this requires frequent updates the more monsters are added, but is super fast
void HandleSubordinateSpawn(int tid, int mid) {
	int class = MonsterProperties[mid].class;
	int rng;
	str toSpawn = "";
	switch(class) {
		case MONSTERCLASS_ZOMBIEMAN:
			rng = random(0, 3);
			switch(rng) {
				case 0:
					toSpawn = "FormerRanger";
				break;
				case 1:
					toSpawn = "RapidFireTrooper";
				break;
				case 2:
					toSpawn = "ZombieMarine";
				break;
				case 3:
					toSpawn = "LOSZombieMan";
				break;
			}
		break;
		case MONSTERCLASS_SHOTGUNGUY:
			toSpawn = "SSGZombie";
		break;
		case MONSTERCLASS_CHAINGUNGUY:
			toSpawn = "DoubleChaingunner";
		break;
		case MONSTERCLASS_DEMON:
			toSpawn = "PurebredDemon";
		break;
		case MONSTERCLASS_SPECTRE:
			toSpawn = "RavagerGhost";
		break;
		case MONSTERCLASS_IMP:
			toSpawn = "ReaverRobot";
		break;
		case MONSTERCLASS_CACODEMON:
			rng = random(0, 1);
			switch(rng) {
				case 0:
					toSpawn = "CacoLich";
				break;
				case 1:
					toSpawn = "EarthLich";
				break;
			}
		break;
		case MONSTERCLASS_PAINELEMENTAL:
			rng = random(0, 1);
			switch(rng) {
				case 0:
					toSpawn = "BloodLich";
				break;
				case 1:
					toSpawn = "DESentinel";
				break;
			}
		break;
		case MONSTERCLASS_LOSTSOUL:
			rng = random(0, 1);
			switch(rng) {
				case 0:
					toSpawn = "ESoul";
				break;
				case 1:
					toSpawn = "Watcher";
				break;
			}
		break;
		case MONSTERCLASS_REVENANT:
			rng = random(0, 2);
			switch(rng) {
				case 0:
					toSpawn = "WidowMaker";
				break;
				case 1:
					toSpawn = "Cadaver";
				break;
				case 2:
					toSpawn = "CyborgSoldier";
				break;
			}
		break;
		case MONSTERCLASS_HELLKNIGHT:
			rng = random(0, 2);
			switch(rng) {
				case 0:
					toSpawn = "IceGolem";
				break;
				case 1:
					toSpawn = "Putrefier";
				break;
				case 2:
					toSpawn = "Gladiator";
				break;
			}
		break;
		case MONSTERCLASS_BARON:
			toSpawn = "Warmaster";
		break;
		case MONSTERCLASS_FATSO:
			rng = random(0, 2);
			switch(rng) {
				case 0:
					toSpawn = "Gamon";
				break;
				case 1:
					toSpawn = "Mephisto";
				break;
				case 2:
					toSpawn = "GoldGolem";
				break;
			}
		break;
		case MONSTERCLASS_ARACHNOTRON:
			toSpawn = "Manticore";
		break;
		case MONSTERCLASS_ARCHVILE:
			rng = random(0, 2);
			switch(rng) {
				case 0:
					toSpawn = "UndeadPriest";
				break;
				case 1:
					toSpawn = "Horshacker";
				break;
				case 2:
					toSpawn = "FleshWizard";
				break;
			}
		break;
		case MONSTERCLASS_SPIDERMASTERMIND:
			toSpawn = "GoldLich";
		break;
		case MONSTERCLASS_CYBERDEMON:
			rng = random(0, 1);
			switch(rng) {
				case 0:
					toSpawn = "Cerberus";
				break;
				case 1:
					toSpawn = "Thanatos";
				break;
			}
		break;
	}
	
	// create some special fx
	if(Spawn(toSpawn, GetActorX(tid), GetActorY(tid), GetActorZ(tid), DND_SUBORDINATE_TEMPTID, GetActorAngle(tid))) {
		rng = GetActorProperty(tid, APROP_TARGETTID);
		SetActorProperty(DND_SUBORDINATE_TEMPTID, APROP_TARGETTID, rng);
		Thing_Hate(DND_SUBORDINATE_TEMPTID, rng, 4);
		SetActorAngle(DND_SUBORDINATE_TEMPTID, AngleToFace(DND_SUBORDINATE_TEMPTID, rng));
		GiveActorInventory(DND_SUBORDINATE_TEMPTID, "DnD_EliteException", 1);
		Thing_ChangeTID(DND_SUBORDINATE_TEMPTID, 0);
		ACS_NamedExecuteAlways("DnD Subordinate Spawn FX", 0, tid);
	}
}

Script "DnD Subordinate Spawn FX" (int tid) CLIENTSIDE {
	GiveActorInventory(tid, "SubordinateFXSpawner", 1);
}

str LegendaryMonsters[DND_MAX_LEGENDARY] = {
	"DreamingGod",
	"Torrasque",
	"Mordecqai",
	"GodSlayer",
	"Golgoth"
};

void SetupMonsterData() {
	// classics
	MonsterData[MONSTER_LOSTSOUL].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_PAINELEMENTAL].trait_list[DND_MINIONS] = true;
	MonsterData[MONSTER_PAINELEMENTAL].trait_list[DND_SPLIT] = true;
	MonsterData[MONSTER_VILE].trait_list[DND_RESURRECT] = true;
	
	// zombieman
	MonsterData[MONSTER_ZOMBIEHUNTER].trait_list[DND_MOBILITY] = true;
	
	// shotgunner
	MonsterData[MONSTER_SGLOS].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_SSGLOS].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_ROGUE].trait_list[DND_MOBILITY] = true;
	
	// chaingunner
	MonsterData[MONSTER_INITIATE].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_MRROBOT].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_MRROBOT].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_BERSERKERGUY].trait_list[DND_RAGE] = true;
	
	// demon
	MonsterData[MONSTER_STONEIMP].trait_list[DND_STONECREATURE] = true;
	MonsterData[MONSTER_STONEDEMON].trait_list[DND_STONECREATURE] = true;
	MonsterData[MONSTER_STONEDEMON].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_BRUTY].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_SCAVENGER].trait_list[DND_RESURRECT] = true;
	MonsterData[MONSTER_NHUMCIGN].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_NHUMCIGN].trait_list[DND_RAGE] = true;
	MonsterData[MONSTER_EARTHGOLEM].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_EARTHGOLEM].trait_list[DND_EARTHCREATURE] = true;
	MonsterData[MONSTER_PUREBREDDEMON].trait_list[DND_MOBILITY] = true;
	
	// spectre
	MonsterData[MONSTER_NIGHTMAREDEMON].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_GRAVEDIGGER].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_DEVOURER].trait_list[DND_MOBILITY] = true;
	
	// imp
	MonsterData[MONSTER_DARKIMP2].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_SOULHARVESTER].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_PYROIMP].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_VULGAR].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_UNDEADMAGE].trait_list[DND_RESURRECT] = true;
	MonsterData[MONSTER_REAVER].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_REAVER].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_ROACH].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_ROACH].trait_list[DND_HEAL] = true;
	
	// lost soul
	MonsterData[MONSTER_FLESHSPAWN].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_ETHEREALSOUL].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_ETHEREALSOUL].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_GUARDIANCUBE].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_FORGOTTENONE].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_FORGOTTENONE].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_WATCHER].trait_list[DND_PIERCE] = true;
	
	// caco
	MonsterData[MONSTER_CACOLICH].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_DEATHWHISPERER].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_DEATHWHISPERER].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_EARTHLICH].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_EARTHLICH].trait_list[DND_EARTHCREATURE] = true;
	MonsterData[MONSTER_INFERNO].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_INFERNO].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_GRELL].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_SHADOWPRIEST].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_SHADOWPRIEST].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_GUARDIAN].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_WICKED].trait_list[DND_MAGIC_RESIST] = true;
	MonsterData[MONSTER_WICKED].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_WICKED].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_WICKED].trait_list[DND_HOMING] = true;
	
	// pain
	MonsterData[MONSTER_TORTUREDSOUL].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_TORTUREDSOUL].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_DEFILER].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_DEFILER].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_HADESELEMENTAL].trait_list[DND_MINIONS] = true;
	MonsterData[MONSTER_HADESELEMENTAL].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_HADESELEMENTAL].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_HADESSPHERE].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_SENTINEL].trait_list[DND_MINIONS] = true;
	MonsterData[MONSTER_SENTINEL].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_BLOODLICH].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_BLOODLICH].trait_list[DND_CURSE] = true;
	MonsterData[MONSTER_BLOODLICH].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_WRAITH].trait_list[DND_RESURRECT] = true;
	MonsterData[MONSTER_SHADOWDISCIPLE].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_SHADOWDISCIPLE].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_SHADOWDISCIPLE].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_HELLARBITER].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_HELLARBITER].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_HELLARBITER].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_PHANTASM].trait_list[DND_SUMMONED] = true;
	MonsterData[MONSTER_PHANTASM].trait_list[DND_ETHEREAL] = true;
	
	// rev
	MonsterData[MONSTER_INCARNATE].trait_list[DND_RAISE] = true;
	MonsterData[MONSTER_CADAVER].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_CADAVER].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_WIDOWMAKER].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_WIDOWMAKER].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_AXEKNIGHT].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_YETI].trait_list[DND_ICECREATURE] = true;
	MonsterData[MONSTER_YETI].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_SLUDGEGIANT].trait_list[DND_SPLIT] = true;
	MonsterData[MONSTER_SLUDGEGIANT].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_SLUDGEGIANT2].trait_list[DND_SPLIT] = true;
	MonsterData[MONSTER_SLUDGEGIANT2].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_SLUDGEGIANT2].trait_list[DND_SUMMONED] = true;
	MonsterData[MONSTER_SLUDGEGIANT3].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_SLUDGEGIANT3].trait_list[DND_SUMMONED] = true;
	MonsterData[MONSTER_DARKSERVANT].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_DARKSERVANT].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_DARKSERVANT].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_CRAWLER].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_CRAWLER].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_CYBORGSOLDIER].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_CYBORGSOLDIER].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_DRAUGR].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_DRAUGR].trait_list[DND_MOBILITY] = true;
	
	// hk
	MonsterData[MONSTER_BLOODSATYR].trait_list[DND_VAMPIRISM] = true;
	MonsterData[MONSTER_HELLWARRIOR].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_HELLSFURY].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_WARLORD].trait_list[DND_RAGE] = true;
	MonsterData[MONSTER_SHADOWBEAST].trait_list[DND_RAGE] = true;
	MonsterData[MONSTER_BLACKKNIGHT].trait_list[DND_ICE_WEAKNESS] = true;
	MonsterData[MONSTER_BLACKKNIGHT].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_BLACKKNIGHT].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_BLACKKNIGHT].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_SKULLWIZARD].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_SKULLWIZARD].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_CYBORGWARRIOR].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_CYBORGWARRIOR].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_CYBORGWARRIOR].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_MOONSATYR].trait_list[DND_ELEMENTAL_RESIST] = true;
	MonsterData[MONSTER_MOONSATYR].trait_list[DND_ENERGY_RESIST] = true;
	MonsterData[MONSTER_ICEGOLEM].trait_list[DND_HEAL] = true;
	MonsterData[MONSTER_ICEGOLEM].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_ICEGOLEM].trait_list[DND_ELEMENTAL_IMMUNE] = true;
	MonsterData[MONSTER_PUTREFIER].trait_list[DND_ELEMENTAL_IMMUNE] = true;
	MonsterData[MONSTER_PUTREFIER].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_PUTREFIER].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_PUTREFIER].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_GLADIATOR].trait_list[DND_RAGE] = true;
	MonsterData[MONSTER_GLADIATOR].trait_list[DND_ICE_WEAKNESS] = true;
	
	// baron
	MonsterData[MONSTER_LAVADEMON].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_LAVADEMON].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_CYBRUISER].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_BRUISERDEMON].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_BORMERETH].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_BORMERETH].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_BORMERETH].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_BLOODSEEKER].trait_list[DND_RAGE] = true;
	MonsterData[MONSTER_BARBATOS].trait_list[DND_ELEMENTAL_WEAKNESS] = true;
	MonsterData[MONSTER_BARBATOS].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_SHADOWWIZARD].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_SHADOWWIZARD].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_KJAROCH].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_KJAROCH].trait_list[DND_EARTHCREATURE] = true;
	MonsterData[MONSTER_MAGMASERPENT].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_DREADKNIGHT].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_DREADKNIGHT].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_DREADKNIGHT].trait_list[DND_ELEMENTAL_RESIST] = true;
	MonsterData[MONSTER_DREADKNIGHT].trait_list[DND_MAGIC_RESIST] = true;
	MonsterData[MONSTER_MAGMAGOLEM].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_MAGMAGOLEM].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_MAGMAGOLEM].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_JUDICATOR].trait_list[DND_BULLET_IMMUNE] = true;
	MonsterData[MONSTER_WARMASTER].trait_list[DND_HEAL] = true;
	MonsterData[MONSTER_WARMASTER].trait_list[DND_RAGE] = true;
	MonsterData[MONSTER_WARMASTER].trait_list[DND_REFLECTIVE] = true;
	
	// fatty
	MonsterData[MONSTER_CORPULENT].trait_list[DND_ELEMENTAL_WEAKNESS] = true;
	MonsterData[MONSTER_DAEDABUS].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_ICEFATSO].trait_list[DND_ICECREATURE] = true;
	MonsterData[MONSTER_MAFIBUS].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_PALADIN].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_PALADIN].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_PALADIN].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_PALADIN].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_GAMON].trait_list[DND_ENERGY_RESIST] = true;
	MonsterData[MONSTER_GAMON].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_GAMON].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_MEPHISTO].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_ABOMINATION].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_REDEEMER].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_REDEEMER].trait_list[DND_DEATH] = true;
	MonsterData[MONSTER_GOLDGOLEM].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_GOLDGOLEM].trait_list[DND_ELEMENTAL_IMMUNE] = true;
	MonsterData[MONSTER_GOLDGOLEM].trait_list[DND_MAGIC_RESIST] = true;
	
	// arachno
	MonsterData[MONSTER_BABYDEMOLISHER].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_VORE].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_VORE].trait_list[DND_ELEMENTAL_RESIST] = true;
	MonsterData[MONSTER_CHAINGUNCOMMANDO].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_LEGIONNAIRE].trait_list[DND_MOBILITY] = true;
	
	// vile
	MonsterData[MONSTER_DIABLOIST].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_DEATHVILE].trait_list[DND_RESURRECT] = true;
	MonsterData[MONSTER_DEATHVILE].trait_list[DND_ELEMENTAL_RESIST] = true;
	MonsterData[MONSTER_HIEROPHANT].trait_list[DND_CURSE] = true;
	MonsterData[MONSTER_HIEROPHANT].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_HIEROPHANT].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_HIEROPHANT].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_DEATHKNIGHT].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_DEATHKNIGHT].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_HORSHACKER].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_HORSHACKER].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_UNDEADPRIEST].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_UNDEADPRIEST].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_UNDEADPRIEST].trait_list[DND_RESURRECT] = true;
	MonsterData[MONSTER_GURU].trait_list[DND_CURSE] = true;
	MonsterData[MONSTER_GURU].trait_list[DND_ELEMENTAL_RESIST] = true;
	MonsterData[MONSTER_DARKZEALOT].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_DARKZEALOT].trait_list[DND_HEAL] = true;
	MonsterData[MONSTER_DARKZEALOT].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_FLESHWIZARD].trait_list[DND_MAGIC_IMMUNE] = true;
	MonsterData[MONSTER_FLESHWIZARD].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_FLESHWIZARD].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_FLESHWIZARD].trait_list[DND_DEATH] = true;
	
	// sm
	MonsterData[MONSTER_ARACHNOPHYTE].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_PSIONICQUEEN].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_PSIONICQUEEN].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_PSIONICQUEEN].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_PSIONICQUEEN].trait_list[DND_ENERGY_IMMUNE] = true;
	MonsterData[MONSTER_ANGELOFDEATH].trait_list[DND_EXPLOSIVE_NONE] = true;
	MonsterData[MONSTER_ANGELOFDEATH].trait_list[DND_ELEMENTAL_IMMUNE] = true;
	MonsterData[MONSTER_ANGELOFDEATH].trait_list[DND_MAGIC_RESIST] = true;
	MonsterData[MONSTER_GOLDLICH].trait_list[DND_MINIONS] = true;
	MonsterData[MONSTER_GOLDLICH].trait_list[DND_EXPLOSIVE_NONE] = true;
	MonsterData[MONSTER_GOLDLICH].trait_list[DND_SPLIT] = true;
	MonsterData[MONSTER_GOLDLICH].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_IRONLICH].trait_list[DND_ELEMENTAL_RESIST] = true;
	MonsterData[MONSTER_IRONLICH].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_IRONLICH].trait_list[DND_CURSE] = true;
	MonsterData[MONSTER_IRONLICH].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_IRONLICH].trait_list[DND_EXPLOSIVE_NONE] = true;
	MonsterData[MONSTER_IRONLICH].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_SPIDEROVERLORD].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_SPIDEROVERLORD].trait_list[DND_ENERGY_IMMUNE] = true;
	MonsterData[MONSTER_SPIDEROVERLORD].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_SPIDEROVERLORD].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_DARKLICH].trait_list[DND_MAGIC_IMMUNE] = true;
	MonsterData[MONSTER_DARKLICH].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_DARKLICH].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_DARKLICH].trait_list[DND_EXPLOSIVE_NONE] = true;
	
	// cyber
	MonsterData[MONSTER_CARDINAL].trait_list[DND_RAGE] = true;
	MonsterData[MONSTER_TERMINATOR].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_TERMINATOR].trait_list[DND_ENERGY_RESIST] = true;
	MonsterData[MONSTER_THAMUZ].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_THAMUZ].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_THAMUZ].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_AZAZEL].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_AZAZEL].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_AZAZEL].trait_list[DND_ELEMENTAL_RESIST] = true;
	MonsterData[MONSTER_AZAZEL].trait_list[DND_MAGIC_IMMUNE] = true;
	MonsterData[MONSTER_HELLSMITH].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_HELLSMITH].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_AVATAR].trait_list[DND_ELEMENTAL_IMMUNE] = true;
	MonsterData[MONSTER_AVATAR].trait_list[DND_MAGIC_RESIST] = true;
	MonsterData[MONSTER_AVATAR].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_AVATAR].trait_list[DND_MINIONS] = true;
	MonsterData[MONSTER_THANATOS].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_THANATOS].trait_list[DND_EXPLOSIVE_NONE] = true;
	MonsterData[MONSTER_CERBERUS].trait_list[DND_MAGIC_IMMUNE] = true;
	MonsterData[MONSTER_CERBERUS].trait_list[DND_RAGE] = true;
	
	// legendary monsters
	MonsterData[MONSTER_DREAMINGGOD].trait_list[DND_MAGIC_IMMUNE] = true;
	MonsterData[MONSTER_DREAMINGGOD].trait_list[DND_ELEMENTAL_IMMUNE] = true;
	MonsterData[MONSTER_DREAMINGGOD].trait_list[DND_LEGENDARY] = true;
	
	MonsterData[MONSTER_TORRASQUE].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_TORRASQUE].trait_list[DND_EXPLOSIVE_RESIST] = true;
	MonsterData[MONSTER_TORRASQUE].trait_list[DND_ENERGY_RESIST] = true;
	MonsterData[MONSTER_TORRASQUE].trait_list[DND_LEGENDARY] = true;
	
	MonsterData[MONSTER_MORDECQAI].trait_list[DND_EXPLOSIVE_NONE] = true;
	MonsterData[MONSTER_MORDECQAI].trait_list[DND_FIRECREATURE] = true;
	MonsterData[MONSTER_MORDECQAI].trait_list[DND_LEGENDARY] = true;
	
	MonsterData[MONSTER_GODSLAYER].trait_list[DND_BULLET_IMMUNE] = true;
	MonsterData[MONSTER_GODSLAYER].trait_list[DND_ENERGY_RESIST] = true;
	MonsterData[MONSTER_GODSLAYER].trait_list[DND_LEGENDARY] = true;
	
	MonsterData[MONSTER_GOLGOTH].trait_list[DND_EXPLOSIVE_NONE] = true;
	MonsterData[MONSTER_GOLGOTH].trait_list[DND_MAGIC_RESIST] = true;
	MonsterData[MONSTER_GOLGOTH].trait_list[DND_LEGENDARY] = true;
	
	// unique monsters
	MonsterData[MONSTER_TERON].trait_list[DND_FORTIFIED] = true;
	
	MonsterData[MONSTER_GANT].trait_list[DND_FORTIFIED] = true;
	
	MonsterData[MONSTER_BRONN].trait_list[DND_FORTIFIED] = true;
	
	MonsterData[MONSTER_VAAJ].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_VAAJ].trait_list[DND_ARMORPEN] = true;
	
	MonsterData[MONSTER_REMUS].trait_list[DND_TELEPORT] = true;
	
	MonsterData[MONSTER_SSRATH].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_SSRATH].trait_list[DND_CURSE] = true;
	
	MonsterData[MONSTER_OMNISIGHT].trait_list[DND_TELEPORT] = true;
	MonsterData[MONSTER_OMNISIGHT].trait_list[DND_MINIONS] = true;
	
	MonsterData[MONSTER_CHEGOVAX].trait_list[DND_FORTIFIED] = true;
	MonsterData[MONSTER_CHEGOVAX].trait_list[DND_MINIONS] = true;
	MonsterData[MONSTER_CHEGOVAX].trait_list[DND_BULLET_IMMUNE] = true;
	
	MonsterData[MONSTER_ONIMUZ].trait_list[DND_BULLET_RESIST] = true;
	MonsterData[MONSTER_ONIMUZ].trait_list[DND_HOMING] = true;
	
	MonsterData[MONSTER_HARKIMONDE].trait_list[DND_BLOCK] = true;
	MonsterData[MONSTER_HARKIMONDE].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_HARKIMONDE].trait_list[DND_HOMING] = true;
	
	MonsterData[MONSTER_LESHRAC].trait_list[DND_POISON] = true;
	MonsterData[MONSTER_LESHRAC].trait_list[DND_MINIONS] = true;
	
	MonsterData[MONSTER_KRULL].trait_list[DND_FORTIFIED] = true;
	MonsterData[MONSTER_KRULL].trait_list[DND_EXPLOSIVE_RESIST] = true;
	
	MonsterData[MONSTER_THORAX].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_THORAX].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_THORAX].trait_list[DND_EXPLOSIVE_RESIST] = true;
	
	MonsterData[MONSTER_ZRAVOG].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_ZRAVOG].trait_list[DND_CURSE] = true;
	MonsterData[MONSTER_ZRAVOG].trait_list[DND_MAGIC_IMMUNE] = true;
	
	MonsterData[MONSTER_ERYXIA].trait_list[DND_CURSE] = true;
	MonsterData[MONSTER_ERYXIA].trait_list[DND_FORTIFIED] = true;
	MonsterData[MONSTER_ERYXIA].trait_list[DND_ELEMENTAL_IMMUNE] = true;
	
	MonsterData[MONSTER_ABAXOTH].trait_list[DND_HOMING] = true;
	MonsterData[MONSTER_ABAXOTH].trait_list[DND_FORTIFIED] = true;
	MonsterData[MONSTER_ABAXOTH].trait_list[DND_PIERCE] = true;
	MonsterData[MONSTER_ABAXOTH].trait_list[DND_MOBILITY] = true;
	MonsterData[MONSTER_ABAXOTH].trait_list[DND_AGGRESSIVE] = true;
}

Script "DnD Setup Monster Data" OPEN {
	SetupMonsterData();
}

#endif
