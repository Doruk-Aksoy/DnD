#library "DND_SHRD"
#include "zcommon.h"

#include "DnD_Shared.h"

enum { //Shortened version of enum found at DnD_Stat.h
	DND_ARMOR_BONUS,
	DND_ARMOR_GREEN,
	DND_ARMOR_YELLOW,
	DND_ARMOR_BLUE,
	DND_ARMOR_RED
};

Script DND_SHARED_ITEM_SCRIPT (int tid) {
	int type = GetActorProperty(tid, APROP_MASS);
	int pnum = PlayerNumber();
	bool pickedup = false;
	
	// temporarily disable this so others can be attempted
	// put here so it's done ASAP
	ACS_NamedExecuteAlways("DnD Disable Pickup", 0, tid);
	
	if(!Shared_Item_pickup_state[tid - SHARED_ITEM_TID_BEGIN][pnum]) {
		switch(type) {
			case SHI_REDARMOR:
				if(ACS_NamedExecuteWithResult("DND Armor Pickup Check", 300, DND_ARMOR_RED)) {
					ACS_NamedExecuteWithResult("DND Armor Give", DND_ARMOR_RED, 300);
					GiveInventory("RedArmorMsg", 1);
					pickedup = true;
				}
				break;
			case SHI_BLUEARMOR:
				if(ACS_NamedExecuteWithResult("DND Armor Pickup Check", 200, DND_ARMOR_BLUE)) {
					ACS_NamedExecuteWithResult("DND Armor Give", DND_ARMOR_BLUE, 200);
					GiveInventory("BlueArmorMsg", 1);
					pickedup = true;
				}
				break;
			case SHI_YELLOWARMOR:
				if(ACS_NamedExecuteWithResult("DND Armor Pickup Check", 150, DND_ARMOR_YELLOW)) {
					ACS_NamedExecuteWithResult("DND Armor Give", DND_ARMOR_YELLOW, 150);
					GiveInventory("YellowArmorMsg", 1);
					pickedup = true;
				}
				break;
			case SHI_GREENARMOR:
				if(ACS_NamedExecuteWithResult("DND Armor Pickup Check", 100, DND_ARMOR_GREEN)) {
					ACS_NamedExecuteWithResult("DND Armor Give", DND_ARMOR_GREEN, 100);
					GiveInventory("GreenArmorMsg", 1);
					pickedup = true;
				}
				break;
			case SHI_BACKPACK:
				GiveInventory("NewBackpack", 1);
				GiveInventory("BackpackPickMSG", 1);
				pickedup = true;
				break;
			case SHI_STIMPACK:
				//printBold(s:"before stimpack", d:closest);
				if(!CheckInventory("TaltosUp") && ACS_NamedExecuteWithResult("DnD Can Pick Health Item", 0)) {
					//printBold(s:"after stimpack", d:closest);
					ACS_NamedExecuteWithResult("DnD Health Pickup", 10);
					GiveInventory("StimpackMsg", 1);
					pickedup = true;
				}
				break;
			case SHI_MEDKIT:
				if(!CheckInventory("TaltosUp") && ACS_NamedExecuteWithResult("DnD Can Pick Health Item", 0)) {
					ACS_NamedExecuteWithResult("DnD Health Pickup", 25);
					GiveInventory("MedikitMsg", 1);
					pickedup = true;
				}
				break;
		}
		if(pickedup) {
			Shared_Item_pickup_state[tid - SHARED_ITEM_TID_BEGIN][pnum] = 1;
			ACS_NamedExecuteAlways("DnD Shared Item Queue", 0, tid);
		}
	}
}

Script "DND Shared Item Init" (int type) {
	if(GameType() != GAME_SINGLE_PLAYER) {
		// If it goes over limits, just ignore its existance.
		if (shared_item_counter < SHARED_ITEM_TYPE_TIDS_MAX) {
			Thing_ChangeTID(0, SHARED_ITEM_TID_BEGIN + shared_item_counter++);
			SetActorProperty(0, APROP_MASS, type);
		}
	}
	else {
		Spawn(SP_SharedItems[type], GetActorX(0), GetActorY(0), GetActorZ(0), 0);
		Thing_Remove(0);
	}
}

Script "DnD Shared Item Toggle" ENTER CLIENTSIDE {
	while(1) {
		if(PlayerNumber() == ConsolePlayerNumber()) {
			for(int i = 0; i < shared_item_queue_count; ++i) {
				SetActorProperty(shared_item_clientside_queue[i], APROP_ALPHA, 0.25);
				SetActorState(shared_item_clientside_queue[i], "IdlePicked", 0);
			}
			shared_item_queue_count = 0;
		}
		Delay(5);
	}
}

Script "DnD Shared Item Queue" (int tid) CLIENTSIDE {
	if(PlayerNumber() == ConsolePlayerNumber())
		shared_item_clientside_queue[shared_item_queue_count++] = tid;
}

Script "DND Limited Respawn Item Init" (void) {
	if(!GetCVar("dnd_enable_limiteditems") || GameType() == GAME_SINGLE_PLAYER)
		Terminate;
	if(!ActivatorTID()) {
		Thing_ChangeTID(0, LIMITED_RESPAWN_TID_BEGIN + limitedrespawn_item_counter);
		LimitedItem_Respawns[limitedrespawn_item_counter++] = GetCVar("dnd_limitedrespawn_amount");
	}
	else {
		if(!LimitedItem_Respawns[ActivatorTID() - LIMITED_RESPAWN_TID_BEGIN])
			Thing_Remove(ActivatorTID());
		else
			LimitedItem_Respawns[ActivatorTID() - LIMITED_RESPAWN_TID_BEGIN]--;
	}
}