#library "DND"
#include "zcommon.h"

#include "DnD_Intercept.h"
#include "DnD_Monsters.h"
#include "DnD_Poison.h"

// Monster stuff

// Monster Healer
Script 958 (int amount) {
	int hp = GetActorProperty(0, APROP_HEALTH);
	amount = Clamp_Between(amount, 0, CheckInventory("MonsterMaxHealth") - hp);
	SetActorProperty(0, APROP_HEALTH, hp + amount);
}

Script 959 (int type) CLIENTSIDE {
	if(!type) {
		int count = 0, tid = ActivatorTID();
		int newtid = tid + ZEALOT_SHIELD_TIDADD;
		Spawn("ZealotShield", GetActorX(tid), GetActorY(tid), GetActorZ(tid) + 32.0, newtid);
		while (count < ZEALOT_SHIELD_TIME) {
			SetActorPosition(newtid, GetActorX(tid), GetActorY(tid), GetActorZ(tid) + 32.0, 0);
			Delay(1);
			++count;
		}
		SetActorState(newtid, "Death");
	}
	else if(type == 1)
		GiveInventory("ArbiterFade", 1);
	else if(type == 2) {
		TakeInventory("ArbiterFade", 1);
		GiveInventory("ArbiterDead", 1);
	}
	else if(type == 3)
		TakeInventory("ArbiterFade", 1);
	else if(type == 4)
		TakeInventory("ArbiterFade", 1);
	else if(type == 5) {
		SetActivatorToTarget(0);
		SetResultValue(CheckInventory("ArbiterFade"));
	}
	else if(type == 6) {
		SetActivatorToTarget(0);
		SetResultValue(CheckInventory("ArbiterDead"));
	}
}

Script 960 (int type) {
	if(!type) {
		int count = 0;
		while(count < ZEALOT_SHIELD_TIME) {
			Delay(1);
			++count;
		}
		GiveInventory("ZealotUnsetReflection", 1);
	}
}

Script 961 (int type, int amt, int item) {
	if(!type) {
		SetActivator(0, AAPTR_TARGET);
		int targtid = ActivatorTID();
		SetActivator(0);
		SetResultValue(GetActorProperty(targtid, APROP_HEALTH) <= 50 + CheckInventory("MaxHealthBonusCounter") / 2 && CheckSight(targtid, 0, CSF_NOBLOCKALL));
	}
	else if(type == 1) {
		while(!CheckInventory("GamonShift") && isAlive())
			Delay(5);
		SetActorProperty(0, APROP_ALPHA, 0.5);
		ActivatorSound("Veste/Cast", 127.0);
		SpawnForced("SalvationEffectSpawner", GetActorX(0), GetActorY(0), GetActorZ(0));
	}
	else if(type == 2)
		SetActorProperty(0, APROP_ALPHA, 0.5);
	else if(type == 3)
		SetActorProperty(0, APROP_ALPHA, 1.0);
	else if(type == 4) {
		str itemname;
		switch(item) {
			case 0:
				itemname = "MonsterTraits";
			break;
			default:
				itemname = "";
			break;
		}
		SetInventory(itemname, amt);
	}
	else if(type == 5) {
		SetResultValue(GetActorProperty(0, APROP_HEALTH) < CheckInventory("MonsterMaxHealth") >> 1);
	}
	else if(type == 6) {
		// don't judge me, this shit just doesn't work in decorate of zan 3.0...
		Spawn("DarkHealEffectSpawner", GetActorX(0), GetActorY(0), GetActorZ(0));
	}
	else if(type == 7) {
		amt = CheckInventory("MonsterMaxHealth");
		if(!amt)
			amt = GetActorProperty(0, APROP_SpawnHealth);;
		SetResultValue(amt);
	}
}

Script "DND Special Player Hurt" (int type, int percent) {
	int vit, thisactor, hp;
	if(!type) {
		vit = CheckInventory("PSTAT_Vitality");
		thisactor = ActivatorTID();
		SetActivator(0, AAPTR_TARGET);
		Thing_Damage2(thisactor, vit / 4, "VileGhostDrain");
		vit = Clamp_Between(vit / 4, 1, vit);
		hp = Clamp_Between(GetActorProperty(0, APROP_HEALTH) + vit, 1, CheckInventory("MonsterMaxHealth"));
		SetActorProperty(0, APROP_HEALTH, hp);
		Spawn("RegenEffectSpawner", GetActorX(0), GetActorY(0), GetActorZ(0), 0);
	}
	else if(type == 1) {
		if(CheckInventory("DarkLichGhostDamageCooldown"))
			Terminate;
		GiveInventory("DarkLichGhostDamageCooldown", 1);
		vit = GetActorProperty(0, APROP_HEALTH) / 10;
		thisactor = ActivatorTID();
		SetActivator(0, AAPTR_TARGET);
		Thing_Damage2(thisactor, vit, "BigSpiderVoid");
	}
	else if(type == 2) {
		thisactor = ActivatorTID();
		vit = GetActorProperty(0, APROP_HEALTH);
		vit *= percent;
		vit /= 100;
		SetActivator(0, AAPTR_TARGET);
		Thing_Damage2(thisactor, vit / 2, "Magical");
	}
}

Script 965 (void) {
	int montid = ActivatorTID();
	int monang = GetActorAngle(0);
	SetActivatorToTarget(montid);
	int targtid = ActivatorTID();
	SetActivator(montid);
	
	int x = (GetActorX(montid) - GetActorX(targtid)) >> 16;
	int y = (GetActorY(montid) - GetActorY(targtid)) >> 16;
	int distance = sqrt((x*x) + (y*y));
	
	ThrustThingZ(montid, (distance >> 6) + 24, 0, 1);
	Delay(3);
	ThrustThing(monang >> 8, (distance >> 5) + 15, 1, montid);
}

Script 966 () {
	int t = 0;
	while(t < WAIT_MAX) {
		if(GetActorZ(0) - GetActorFloorZ(0) < 4.0) {
			GiveInventory("Landed", 1);
			break;
		}
		GiveInventory("DemonFlightDamager", 1);
		Delay(3);
		GiveInventory("DemonFlightDamager", 1);
		Delay(2);
		++t;
	}
	TakeInventory("DemonGoJump", 1);
	if(t == WAIT_MAX - 1) { // waited full duration, high chance it was stuck, get it unstuck
		ThrustThing((GetActorAngle(0) >> 8), 24, 0, 0);
		Delay(4);
		ThrustThing((GetActorAngle(0) >> 8) + 64, 24, 0, 0);
		Delay(4);
		ThrustThing((GetActorAngle(0) >> 8) + 128, 24, 0, 0);
		Delay(4);
		ThrustThing((GetActorAngle(0) >> 8) + 192, 24, 0, 0);
	}
}

Script 967 (int togive) CLIENTSIDE {
	if(!togive)
		GiveInventory("AvatarAttack", 1);
	else if(togive == 1)
		GiveInventory("AvatarOnAttack", 1);
	else if(togive == 2) {
		TakeInventory("AvatarAttack", 1);
		TakeInventory("AvatarOnAttack", 1);
	}
	else {
		TakeInventory("AvatarAttack", 1);
		TakeInventory("AvatarOnAttack", 1);
		GiveInventory("AvatarDead", 1);
	}
}

Script 968 (void) CLIENTSIDE {
    if(CheckInventory("AvatarBallSet"))
        Terminate;
    
    int x, y, z, newtid;
	int tid = 0;
    
    do {
        tid = ActivatorTID();
        Delay(1);
    } while(!tid);
    if(CheckInventory("AvatarBallSet"))
        Terminate;
    GiveInventory("AvatarBallSet", 1);
    
    x = GetActorX(0);
    y = GetActorY(0);
    z = GetActorZ(0) + 16.0;
    
    
	tid = ActivatorTID();
	newtid = AVATAR_CUBE_TID + (tid % 2000) * 3;
    while(!SpawnForced("SorcBall1New", x, y, z, newtid));
	while(!SpawnForced("SorcBall2New", x, y, z, newtid + 1));
	while(!SpawnForced("SorcBall3New", x, y, z, newtid + 2));
	SetActorProperty(newtid, APROP_HEALTH, tid);
	SetActorProperty(newtid + 1, APROP_HEALTH, tid);
	SetActorProperty(newtid + 2, APROP_HEALTH, tid);
}

Script 969 (void) CLIENTSIDE {
	int tid = GetActorProperty(0, APROP_HEALTH);
	int res = 1 + CheckActorInventory(tid, "AvatarAttack") - 2 * CheckActorInventory(tid, "AvatarOnAttack");
	if(CheckActorInventory(tid, "AvatarDead"))
		res = -2;
	SetResultValue(res);
}

Script 971 (int speed) {
	speed = Clamp_Between(speed, 1, 48);
	int velx = FixedMul(cos(GetActorAngle(0)), speed << 16);
	int vely = FixedMul(sin(GetActorAngle(0)), speed << 16);
	SetActorVelocity(0, velx, vely, 0, 0, 0);
}

Script 972 (int type) { // script for Lich Slow
	int i;
	if(!type) {
		for(i = 0; i < 5; i++) {
			SlowPlayer(0.22 * i, 0, 0);
			Delay(20);
		}
		RestoreRPGStat(RES_PLAYERSPEED);
	}
	else if(type == 1) {
		int temp = CheckInventory("ForcedMonsterLevel");
		SetInventory("ForcedMonsterLevel", 0);
		for(i = 0; !CheckInventory("CurseImmunity") && i < 5; i++) {
			Thing_Damage(0, 4 + 4 * ACS_ExecuteWithResult(994, 7, temp), MOD_POISON);
			Delay(17);
		}
	}
	else if(type == 2) {
		AmbientSound("Lich/VisionDim", 127);
		for(i = 0; i < MAXPLAYERS; i++) {
			if(GetActorProperty(P_TIDSTART + i, APROP_HEALTH) > 0)
				GiveActorInventory(P_TIDSTART + i, "LichVisionDim", 1);
		}
	}
}

Script "DND Poison Damage Register" (int damage, int duration) {
	int this = PlayerNumber();
	int target = GetActorProperty(0, APROP_TARGETTID);
	RegisterPoisonDamage(this, damage, duration, target);
}

Script "DND Poison Damage Checker" ENTER {
	int tic = 0, pnum = PlayerNumber();
	while(!CheckInventory("Ability_AntiPoison")) {
		if(isAlive()) {
			// check each poison element
			for(int i = 0; i < MAX_POISON_DAMAGES; ++i) {
				// setup the start time
				if(player_poison_damages[pnum].poison_list[i].duration) {
					if(!player_poison_damages[pnum].poison_list[i].stime)
						player_poison_damages[pnum].poison_list[i].stime = tic;
					
					// if tics is stime, do damage and drop duration
					if(tic == player_poison_damages[pnum].poison_list[i].stime) {
						DealPoisonDamage(player_poison_damages[pnum].poison_list[i].owner, player_poison_damages[pnum].poison_list[i].dmg);
						--player_poison_damages[pnum].poison_list[i].duration;
					}
				}
				
				// if duration is 0, remove (set start time to 0) -- duration = 0 means it's marked as removed
				// do this only if there actually are poison effects
				if(!player_poison_damages[pnum].poison_list[i].duration && player_poison_damages[pnum].poison_list[i].state) {
					player_poison_damages[pnum].poison_list[i].stime = 0;
					player_poison_damages[pnum].poison_list[i].state = 0;
					--player_poison_damages[pnum].cursize;
				}
			}
		}
		else {
			ClearPoisonDamages();
			break;
		}
		
		tic = (tic + 1) % TICRATE;
		Delay(1);
	}
}

Script 973 (int mode) { // Avatar tid / targeter
	if (mode == 1) {
		int owner = ActivatorTID(), curdist;
		int missiletid = ActivatorTID() + AVATAR_SOUL_TID;
		
		SetActivator(owner, AAPTR_TARGET);
		int target = ActivatorTID();
		SetActivator(owner);
		
		for(int i = 0; i < AVATAR_SOUL_COUNT; i++) {
			// choose closest target
			curdist = INT_MAX;
			for(int j = 0; j < MAXPLAYERS; j++) {
				int dist = fdistance(owner, P_TIDSTART + j);
				if(GetActorProperty(P_TIDSTART + j, APROP_HEALTH) > 0 && dist < curdist) {
					target = P_TIDSTART + j;
					curdist = dist;
				}
			}
			
			SetActorPosition(owner, GetActorX(owner), GetActorY(owner), GetActorZ(owner) + 56.0, 0);
			SpawnProjectile(owner, "HolyMissile2", GetActorAngle(owner), 128, 0, 0, missiletid + i);
			SetActorPosition(owner, GetActorX(owner), GetActorY(owner), GetActorZ(owner) - 56.0, 0);
			SetActorPosition(missiletid + i, GetActorX(missiletid + i), GetActorY(missiletid + i), GetActorZ(missiletid + i) + 54.0, 0);
			SetActivator(missiletid + i);
			SetPointer(AAPTR_TARGET, owner);
			SetPointer(AAPTR_TRACER, target);
			int dx = GetActorX(target) - GetActorX(missiletid + i);
			int dy = GetActorY(target) - GetActorY(missiletid + i);
			SetActorAngle(missiletid + i, VectorAngle(dx, dy));
			SetActivator(owner);
			Delay(12);
		}
	}
	else {
		if(GetActorProperty(0, APROP_HEALTH) < CheckInventory("MonsterMaxHealth") / 3)
			GiveInventory("AcolyteSummoner", 1);
	}
}

Script "DND Dark Lich Warp Shake" (void) {
	if(!CheckInventory("DarkLichWarpDamageCooldown")) {
		GiveInventory("DarkLichWarpDamageCooldown", 1);
		int randVal = Clamp_Between(random(0, 0x7FFFFFFF) & 255, 0, DARKLICH_WARP_RANDMAX);
		int velx = GetActorVelX(0) + (random(0, 255) << 10);
		int vely = GetActorVelY(0) + (random(0, 255) << 10);
		int velz = Clamp_Between(GetActorVelZ(0) + (randVal << 11), 0, DARKLICH_WARP_VELZMAX);
		SetActorAngle(0, GetActorAngle(0) + (random(-48, 48) << 16) / 360);
		SetActorVelocity(0, velx, vely, velz, 0, 0);
	}
}

Script "DND Flesh Wizard Leash Trail" (int density, int target) CLIENTSIDE {
	int oX = GetActorX(0);
	int oY = GetActorY(0);
	int oZ = GetActorZ(0) + 64.0;

    int grX; int grY;  int grZ;
    int vX;  int vY;   int vZ;
    int nX;  int nY;   int nZ;
    int bX;  int bY;   int bZ;
    int magnitude;
    int pointCount;
    int pointOffset;
	
    grX = GetActorX(target);
    grY = GetActorY(target);
    grZ = GetActorZ(target) + 32.0;
	
    vX   = grX - oX;
	vY   = grY - oY;
	vZ   = grZ - oZ;
	
    magnitude = magnitudeThree(vX >> 16, vY >> 16, vZ >> 16);
    pointCount  = magnitude / density;
    pointOffset = magnitude - (pointCount * density);

    if (magnitude != 0) {
        nX = vX / magnitude; nY = vY / magnitude; nZ = vZ / magnitude;

        int i; int j;
        for (i = 1; i < pointCount; i++) {
            j = (i * density) + pointOffset;
            bX = (nX * j) + oX;
            bY = (nY * j) + oY;
            bZ = (nZ * j) + oZ;

            Spawn("FleshWizardLeashFX", bX, bY, bZ);
        }
    }
}

Script "DND Flesh Wizard Torment" (int force) {
	int source = ActivatorTID();
	SetActivatorToTarget(0);
	int target = ActivatorTID();
	SetActivator(source);
	
	if(!target)
		Terminate;
	
	int timecounter = 0;
	int bonus = GetEliteBonusDamage();
	
	while(GetActorProperty(0, APROP_HEALTH) > 0 && !CheckInventory("StopLeash")) {
		int oX = GetActorX(source);
		int oY = GetActorY(source);
		int oZ = GetActorZ(source);
		int dist = fdistance(source, target);
		// Check for damage candidates every X seconds
		if(!timecounter) {
			for(int i = 0; i < MAXPLAYERS; ++i) {
				int curtarget = i + P_TIDSTART;
				if(target == curtarget || GetActorProperty(curtarget, APROP_HEALTH) > 0 && abs(fdistance(source, curtarget) - dist) <= FLESHWIZARD_TETHERRANGE_RADIUS) {
					int tX = GetActorX(curtarget);
					int tY = GetActorY(curtarget);
					int tZ = GetActorZ(curtarget);
					
					int xdiff = oX - tX;
					int ydiff = oY - tY;
					
					int velz = (oZ - tZ) >> 16;
					velz /= 100; // player mass
					ThrustThing(VectorAngle(xdiff, ydiff) >> 8, force, 1, curtarget);
					ThrustThingZ(curtarget, velz * force, velz > 0, 0);
					
					int damage = FLESHWIZARD_PERCENT * GetHealthMaxActor(curtarget) / 100;
					damage = FixedMul(damage << 16, 1.0 + bonus);
					damage >>= 16;
					Thing_Damage2(curtarget, damage, "VileLeash");
					Spawn("FleshWizardDebuffFX", tX, tY, tZ + 32.0);
					GiveActorInventory(curtarget, "FleshWizardDamageSoundPlayer", 1);
					ACS_NamedExecuteAlways("DND Flesh Wizard Leash Trail", 0, 16, curtarget);
				}
			}
			ActivatorSound("FleshWizard/SnareLoop", 127);
		}
		timecounter = ++timecounter % FLESHWIZARD_DAMAGE_PERIOD;
		Delay(1);
		if(GetActorProperty(target, APROP_HEALTH) <= 0 || dist >= FLESHWIZARD_TETHERRANGE_MAX)
			GiveActorInventory(source, "StopLeash", 1);

	}
}

Script "DND Blood Satyr FX" (void) CLIENTSIDE {
	SetActivatorToTarget(0);
	SpawnForced("DarkHealEffectSpawner", GetActorX(0), GetActorY(0), GetActorZ(0), 0); 
}

Script "DND Dreamer Burn" (int dmg) {
	while(GetActorProperty(0, APROP_HEALTH) > 0) {
		for(int i = 0; i < MAXPLAYERS; ++i) {
			int tid = i + P_TIDSTART;
			if(CheckActorInventory(tid, "DreamerBurnCount")) {
				Thing_Damage2(tid, dmg, "LegendaryFire");
				GiveActorInventory(tid, "DreamerBurnFXStarter", 1);
				TakeActorInventory(tid, "DreamerBurnCount", 1);
			}
		}
		Delay(17);
	}
}

Script "DND Dreamer Burn FX" (int time) CLIENTSIDE {
	for(int i = 0; i < time && CheckInventory("DreamerBurnCount"); ++i) {
		Spawn("DreamerBurnFireSpawner", GetActorX(0), GetActorY(0), GetActorZ(0), 0);
		Delay(1);
	}
}

Script "DND Torrasque Pull" (int force) {
	// target is player
	int targtid = GetActorProperty(0, APROP_TRACERTID);
	int curtid = GetActorProperty(0, APROP_TARGETTID);
	
	int xdiff = GetActorX(curtid) - GetActorX(targtid);
	int ydiff = GetActorY(curtid) - GetActorY(targtid);
	int velx = xdiff >> 16;
	int vely = ydiff >> 16;
	int velz = (GetActorZ(curtid) - GetActorZ(targtid)) >> 16;
	int mass = GetActorProperty(targtid, APROP_MASS);
	int speed = sqrt(velx * velx + vely * vely) / mass;
	velz /= mass;
	ThrustThing(VectorAngle(xdiff, ydiff) >> 8, speed * force, 1, targtid);
	ThrustThingZ(targtid, velz * force, 0, 0);
}

// Should I fly?
Script "DnD Decide Flight" (void) {
	int res = 0;
	int targtid = GetActorProperty(0, APROP_TARGETTID);
	int dist = AproxDistance(GetActorX(targtid) - GetActorX(0), GetActorY(targtid) - GetActorY(0));
	if(
		!CheckInventory("GSFlightCooldown")													&&
		GetActorZ(0) + 164.0 < GetActorCeilingZ(0)											&&
		(	
			(abs((GetActorZ(0) - GetActorZ(targtid))) > 40.0 || dist > 768.0) 					||
			(
				random(0, 3) 												&& 
				(dist > 320.0 && CheckSight(0, targtid, CSF_NOBLOCKALL)) 	||
				(!CheckSight(0, targtid, CSF_NOBLOCKALL))
			)
		)
	  )
		res = 1;
	SetResultValue(res);
}

// Inquisitor Jump end case Handler
Script "DnD Decide Land" (int type, int speed) {
	int targtid = GetActorProperty(0, APROP_TARGETTID);
	int dist = AproxDistance(GetActorX(targtid) - GetActorX(0), GetActorY(targtid) - GetActorY(0)) >> 1;
	int curz = GetActorZ(0);
	if(!type) {
		if(dist < 1.0) 
			dist = 1.0;
		curz = FixedDiv(GetActorZ(targtid) - GetActorZ(0), (dist / speed) * 2);
		// do blockage checks
		SetInventory("GSDist", 0);
		TakeInventory("InquisitorLand", 1);
		SetInventory("InquisitorCounter", 45);
		if(!DoCollisionCheck(0, 72.0, 72.0, 0.0))
			TryChangeDirection();
		SetXYSpeed(speed);
		SetActorVelocity(0, 0, 0, curz, 1, 0);
	}
	else if(type == 1) {
		if	(
				!CheckInventory("InquisitorCounter")														|| 
				/*!GetActorVelX(0)																			|| 
				!GetActorVelY(0)																			||*/
				!GetActorVelZ(0)																			||
				(GetActorZ(targtid) - GetActorFloorZ(0) < 16.0 && CheckSight(0, targtid, CSF_NOBLOCKALL))	||
				//(curz - GetActorFloorZ(0)) < 32.0															||
				(dist < 184.0 && (curz - GetActorZ(targtid) > 24.0))
			)
		{
			AddXYSpeed(2);
			SetInventory("InquisitorCounter", 0);
			GiveInventory("InquisitorLand", 1);
		}
		else {
			GiveInventory("InquisitorSoundPlayer", 1);
			TakeInventory("InquisitorCounter", 1);
			if(!GetActorVelX(0) || !GetActorVelY(0)) {
				curz = FixedDiv(GetActorZ(targtid) - GetActorZ(0), (dist / speed) * 2);
				TryChangeDirection();
				SetXYSpeed(speed);
				SetActorVelocity(0, GetActorVelX(0), GetActorVelY(0), curz, 0, 0);
			}
		}
	}
}

Script "DnD GodSlayer Land" (void) {
	if(!CheckInventory("GSLandToken")) {
		GiveInventory("GSLandToken", 1);
		while(GetActorZ(0) - GetActorFloorZ(0) > 6.0)
			Delay(8);
		ActivatorSound("GodSlayer/Land", 127);
		GiveInventory("GodSlayerLandStomper", 1);
		TakeInventory("GSLandToken", 1);
	}
}

Script "DND Monster Shoot" (int id, int missile_id, int speed) {
	int ang = 0, target = 0, arc = 0;
	switch(id) {
		case MONSTER_TORRASQUE:
			str missile = "TorrasqueMace";
			if(missile_id)
				missile = "TorrasqueGrabber";
			if(missile_id == 2)
				ang = -0.0275;
			else if(missile_id == 3)
				ang = 0.0275;
			ProjInt_Brute((speed + random(0, 8)) << 16, 0, 24.0, 0.0, 48.0, missile, 0, 0, 0, ang, 1, 0);
		break;
		case MONSTER_GODSLAYER:
			target = GetActorProperty(0, APROP_TARGETTID);
			ang = AproxDistance(GetActorX(target) - GetActorX(0), GetActorY(target) - GetActorY(0)) >> 4;
			speed <<= 16;
			speed += ang;
			if(speed > 48.0)
				speed = 48.0;
			arc = FixedDiv((GetActorZ(target) - GetActorZ(0)), ang << 3);
			SetActorPosition(0, GetActorX(0), GetActorY(0), GetActorZ(0) + 16.0, 0); // this is to avoid actor misfiring in water
			ang = ProjInt_Brute(speed, 0, 0.0, 0.0, 116.0, "InquisitorShot2", -28.0, 0.0, -5.0 - arc / 2, 0, 1, 0);
			ProjInt_Brute(speed, 0, 0.0, 0.0, 116.0, "InquisitorShot2", 28.0, 0.0, -5.0 - arc / 2, 0, 0, ang);
			SetActorPosition(0, GetActorX(0), GetActorY(0), GetActorZ(0) - 16.0, 0);
		break;
	}
}

Script "DnD Translucency Weave" (void) CLIENTSIDE {
	int base = GetActorProperty(0, APROP_ALPHA), t = 0, tmp = 0;
	while(IsAlive()) {
		tmp = abs(sin(t * 0.055));
		SetActorProperty(0, APROP_ALPHA, base + FixedMul((1.0 - base), tmp));
		t = (t + 1) % 18;
		Delay(3 + ((16 * tmp) >> 16));
	}
}