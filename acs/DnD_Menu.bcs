#library "DND_MENU"
#include "zcommon.h"

#nocompact

#include "DnD_MenuFuncs.h"

/*
- Main idea here is simple. There are two main scripts: One draws the menu CLIENTSIDE, the other receives button info and stuff from client and vital info from server.
- There are A TON of helper functions to formulate things. Getters are all over the place.
- Everything in the shop has an ID associated with it.
- Everything is flexible and can be customized very easily (!!!). The essential code for input listeners etc are provided, and can be changed at will depending on the menu pages to achieve
different behavior.

============= ADDING NEW WEAPONS TO SHOP =============

1) Add it to DnD_Weapons.h
2) Add constant to DnD_MenuConstants.h, modify begin/last macros if position of them has changed
3) Add price, shop menu labels, shop menu helper text, research requirements (if any) and WeaponDrawInfo to DnD_MenuTables.h
4) Add weapon tip to DnD.h
5) Increment box count of whichever slot page it belongs to in DnD_MenuFuncs => LoadPane function
6) Done!
*/

// Shows the menu
Script 900 (void) NET {
	int pnum = PlayerNumber();
	if(StatListOpened[pnum]) {
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		TakeInventory("P_Frozen", 1);
		StatListOpened[pnum] = 0;
		SetInventory("ShowingMenu", 0);
		SetInventory("MenuOption", 5);
		SetInventory("DnD_PlayerItemIndex", 0);
		SetInventory("DnD_PlayerPrevItemIndex", 0);
		SetInventory("DnD_PopupId", 0);
		SetInventory("DnD_SelectedCharmBox", 0);
		SetInventory("DnD_SelectedInventoryBox", 0);
		SetInventory("DnD_Crafting_MaterialPage", 0);
		SetInventory("DnD_Crafting_ItemPage", 0);
		SetInventory("DnD_Trade_Confirmed", 0);
		SetInventory("DnD_TradeSpaceFit", 0);
		TakeInventory("DnD_InventoryView", 1);
		TakeInventory("DnD_StashView", 1);
		TakeInventory("InTradeView", 1);
		TakeInventory("DnD_ShowPopup", 1);
		TakeInventory("DnD_ShowSellPopup", 1);
		TakeInventory("DnD_SellConfirm", 1);
		ClearPlayerInput(pnum, true);
		DecideAccessories();
		//SetInventory("MenuPosY", 5);
		LocalAmbientSound("RPG/MenuClose", 127);
		ACS_NamedExecuteAlways("DND Menu Cleanup", 0);
		
		int tradee = GetTradee();
		// cancel out of a trade if there is one
		if(tradee != -1) {
			CancelTradeRoutine(tradee);
		}
	}
	else {
		// a little extra check for singleplayer case
		if((GameType() == GAME_SINGLE_PLAYER || (!PlayerIsSpectator(pnum) && (GetGameModeState() == GAMESTATE_INPROGRESS) && (!CheckInventory("CanLoad")))) && !CheckInventory("ParsingData")) {
			if(GameType() != GAME_SINGLE_PLAYER && CheckInventory("DnD_SyncMe")) {
				TakeInventory("DnD_SyncMe", 1);
				ACS_NamedExecuteAlways("Force Sync Player Global Data", 0);
			}
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			GiveInventory("P_Frozen", 1);
			StatListOpened[pnum] = 1;
			SetInventory("MenuOption", MENU_MAIN);
			SetInventory("ShowingMenu", 1);
			SetInventory("Mouse_X", HUDMAX_XF / 2);
			SetInventory("Mouse_Y", HUDMAX_YF / 2);
			TakeInventory("ShowingPrompt", 1);
			LocalAmbientSound("RPG/MenuOpen", 127);
			ClearPlayerInput(pnum, true);
			DeleteTextRange(RPGMENUCURSORID, RPGMENUINVENTORYID);
			FlushStack(pnum);
			
			ACS_NamedExecuteAlways("DND Menu Draw", 0);
			ACS_NamedExecuteAlways("DND Menu Icon Spawner", 0);
		}
		else {
			SetHudSize(800, 600, 1);
			HudMessage(s: "You have to be in the game to use the menu"; HUDMSG_FADEINOUT, MENUUSEID, CR_GOLD, 400.4, 2.1, 4.0, 1.0, 1.0);
		}
	}
}

Script "DnD Menu Reset on Enter" ENTER {
	ResetShopStock(PlayerNumber());
	ACS_NamedExecuteAlways("DnD Menu Reset on Enter CS", 0);
}

// So database can run this
Script "DnD Menu Reset Forced" (void) {
	ResetShopStock(PlayerNumber());
	ACS_NamedExecuteAlways("DnD Menu Reset on Enter CS", 0);
}

Script "DnD Menu Reset on Enter CS" (void) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;
	// this is needed to sync them between the client & server
	ResetShopStock(PlayerNumber());
}

Script "DnD Sync Shop Stock" (int pnum, int itemid, int val) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;
	ShopStockRemaining[pnum][itemid] = val;
}

Script "DND On Disconnect Menu Cleanup" (int pnum) DISCONNECT CLIENTSIDE {
	ACS_NamedExecuteAlways("DND Menu Cleanup", 0);
}

Script "DND Menu Icon Spawner" (void) CLIENTSIDE {
	// dont draw it for the player who is on the menu
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;
		
	int tid = DND_MENUFLOATYICON_TID + PlayerNumber();
	SpawnForced("DnD_MenuPlayerIcon", GetActorX(0), GetActorY(0), GetActorZ(0) + 64.0, tid);
	while(CheckInventory("ShowingMenu")) {
		SetActorPosition(tid, GetActorX(0), GetActorY(0), GetActorZ(0) + 64.0, 0);
		Delay(const:1);
	}
	Thing_Remove(tid);
}

Script "DND Menu Draw" (void) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;
	
	bool sendBox = false;
	int animcounter = 0, framecounter = 0, pnum = PlayerNumber(), temp;
	int popupid, i = 0, j = 0, k = 0, mousex, mousey;
	str toshow;
	int curopt, curopt_prev = MENU_NULL;
	int tics = 0;
	int boxid = MAINBOX_NONE + 1, boxid_prev = MAINBOX_NONE, mainboxid = MAINBOX_NONE + 1, mainboxid_prev = MAINBOX_NONE;
	auto CurrentPane = GetPane();
	ResetPane(CurrentPane);
	auto InventoryPane = GetInventoryPane();
	auto TradePane = GetTradePane();

	while(CheckInventory("ShowingMenu")) {
		// Load cursor stuff
		mousex = GetCursorPos(GetPlayerInput(ConsolePlayerNumber(), INPUT_YAW), MOUSE_INPUT_X);
		mousey = GetCursorPos(GetPlayerInput(ConsolePlayerNumber(), INPUT_PITCH), MOUSE_INPUT_Y);
		SetInventory("Mouse_X", mousex);
		SetInventory("Mouse_Y", mousey);
		curopt = CheckInventory("MenuOption");
		popupid = CheckInventory("DnD_PopupId");
		
		// page changed
		if(curopt != curopt_prev) {
			ResetPane(CurrentPane);
			LoadPane(CurrentPane, curopt);
			ScrollPos = 0;
			k = 0;
			SetInventory("MenuPosX", 0);
			SetInventory("DnD_PlayerItemIndex", 0);
			SetInventory("DnD_PlayerPrevItemIndex", 0);
		}
		
		// cleanup
		if(curopt_prev <= MENU_LOAD_CRAFTING_LAST && curopt_prev >= MENU_LOAD_CRAFTING)
			DeleteTextRange(RPGMENUID - MATERIALBOX_OFFSET - 3 * MAX_CRAFTING_MATERIALBOXES, RPGMENUID - 2);
		else if(curopt_prev >= MENU_LOAD_INVENTORY && curopt_prev <= MENU_LOAD_CRAFTING_INVENTORY)
			CleanInventoryInfo();
		
		curopt_prev = curopt;
		
		// boxes won't be updated until you finish your sell
		if(CheckInventory("DnD_SellConfirm")) {
			if(CheckInventory("ActivePopupBox"))
				boxid = CheckInventory("ActivePopupBox");
			mainboxid = MAINBOX_NONE;
		}
		else {
			if(curopt < MENU_LOAD_CRAFTING || curopt > MENU_LOAD_CRAFTING_LAST) {
				if(!CheckInventory("DnD_InventoryView") && !CheckInventory("InTradeView") && !CheckInventory("DnD_StashView")) {
					boxid = GetTriggeredBoxOnPane(CurrentPane, mousex, mousey, curopt);
					mainboxid = GetTriggeredBoxOnMainPane(mousex, mousey);
				}
				else if(CheckInventory("DnD_InventoryView"))
					boxid = GetTriggeredBoxOnInventoryPane(InventoryPane, mousex, mousey);
				else if(CheckInventory("InTradeView"))
					boxid = GetTriggeredBoxOnTradePane(TradePane, mousex, mousey);
				else if(CheckInventory("DnD_StashView")) // I used the trade pane variable to hold the stash content
					boxid = GetTriggeredBoxOnStashPane(TradePane, mousex, mousey);
			}
			else {
				boxid = GetTriggeredBoxOnCraftingPane(InventoryPane, mousex, mousey);
				if(CheckInventory("DnD_InventoryView") || CheckInventory("InTradeView") || CheckInventory("DnD_StashView"))
					mainboxid = MAINBOX_NONE;
			}
		}
		// play sound if box changed
		// ifs are seperate because scroll pos should only change if current in-pane box is changed
		if(boxid != boxid_prev && boxid != MAINBOX_NONE) {
			ScrollPos = 0;
			if(!CheckInventory("DnD_InventoryView") && !CheckInventory("InTradeView") && !CheckInventory("DnD_StashView"))
				LocalAmbientSound("RPG/MenuMove", 127);
		}
		
		if(mainboxid != mainboxid_prev && mainboxid != MAINBOX_NONE)
			LocalAmbientSound("RPG/MenuMove", 127);
		
		// clean input buffer
		SetInventory("MenuInput", 0);
		// receives MenuInput
		GetInputOnMenuPage(curopt);
		sendBox = CheckInventory("MenuInput") != 0;
		
		if(sendBox) {
			// server gets a few extra info in boxid
			if(!MenuInputData[pnum][DND_MENUINPUT_PAYLOAD])
				MenuInputData[pnum][DND_MENUINPUT_PAYLOAD] = (boxid | MenuInputData[pnum][DND_MENUINPUT_PLAYERCRAFTCLICK]);
			i = PlayerNumber() | (CheckInventory("MenuInput") << 16);
			// guarantee nonzero input
			if(i) {
				//Log(s:"trying to send prev item ", d:MenuInputData[pnum][DND_MENUINPUT_PAYLOAD] >> 16, s: " vs ", d:MenuInputData[pnum][DND_MENUINPUT_PLAYERCRAFTCLICK] >> 16);
				NamedRequestScriptPuke("DND Server Box Receive", i, MenuInputData[pnum][DND_MENUINPUT_PAYLOAD], mainboxid | (CheckInventory("MenuPosX") << 16));
			}
		}
		
		boxid_prev = boxid;
		mainboxid_prev = mainboxid;

		// draw background images
		SetHudSize(384, 200, 1);
		SetFont("DND_STAT");
		HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUID, -1, 192.0, 100.0, 0.0, 0.0);
		SetFont("DND_STAB");
		HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUBACKGROUNDID, -1, 192.0, 100.0, 0.0, 0.0);
		// the 3 buttons at bottom
		DrawClickableButton("LARR", mainboxid, MAINBOX_LARR, RPGMENULARRID, 218.0, 184.0, "LARRO", "LARR_P");
		DrawClickableButton("RETARR", mainboxid, MAINBOX_RET, RPGMENURETARRID, 251.0, 184.0, "RETARRO", "RETARR_P");
		DrawClickableButton("RARR", mainboxid, MAINBOX_RARR, RPGMENURARRID, 284.0, 184.0, "RARRO", "RARR_P");
		
		// main drawing of texts, labels, icons etc.
		SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
		DrawCursor();
		
		SetFont("SMALLFONT");
		DeleteTextRange(RPGMENUITEMIDEND, RPGMENUITEMID);
		DeleteTextRange(RPGMENUPAGEID - 1, RPGMENUPAGEID);
		DeleteText(RPGMENUCURSORID + 1);
		
		if(CheckInventory("DnD_InventoryView")) {
			LoadInventoryView(InventoryPane);
			HandleInventoryView(boxid);
			j = 1;
		}
		else if(CheckInventory("DnD_StashView")) {
			LoadStashView(TradePane);
			HandleStashView(boxid);
			j = 1;
		}
		else if(CheckInventory("InTradeView")) {
			LoadTradeView(TradePane);
			j = 1;
		}
		else if(j) {
			DeleteTextRange(RPGMENUPOPUPID + 1, RPGMENUINVENTORYID);
			j = 0;
		}
		
		if(curopt == MENU_STAT1) {
			HudMessage(s:"--- Player Stats ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			SetHudClipRect(192, 56, 256, 144, 256, 1);
			HudMessage(s:"\c[Y5]Level: \c-", d:CheckInventory("Level"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 192.1, 64.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Experience: \c-", d:CheckInventory("Exp"), s:" / ", d:LevelCurve[CheckInventory("Level") - 1]; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 80.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, 96.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Attribute Points: \c-", d:CheckInventory("AttributePoint"); HUDMSG_PLAIN, RPGMENUITEMID - 10, CR_WHITE, 192.1, 112.0, 0.0, 0.0);
			SetHudClipRect(0, 0, 0, 0, 0);
			
			DrawToggledLabel("STR", -1, boxid, MBOX_1, RPGMENUITEMID - 3, "\c[Y5]", "\c[B1]", 192.1, 128.0);
			DrawToggledLabel("DEX", -1, boxid, MBOX_2, RPGMENUITEMID - 4, "\c[Y5]", "\c[B1]", 192.1, 144.0);
			DrawToggledLabel("BUL", -1, boxid, MBOX_3, RPGMENUITEMID - 5, "\c[Y5]", "\c[B1]", 192.1, 160.0);
			DrawToggledLabel("CHR", -1, boxid, MBOX_4, RPGMENUITEMID - 6, "\c[Y5]", "\c[B1]", 192.1, 176.0);
			DrawToggledLabel("VIT", -1, boxid, MBOX_5, RPGMENUITEMID - 7, "\c[Y5]", "\c[B1]", 192.1, 192.0);
			DrawToggledLabel("INT", -1, boxid, MBOX_6, RPGMENUITEMID - 8, "\c[Y5]", "\c[B1]", 192.1, 208.0);
			// draw values seperately so they align
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Strength"); HUDMSG_PLAIN, RPGMENUITEMID - 11, CR_WHITE, 256.1, 128.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Dexterity"); HUDMSG_PLAIN, RPGMENUITEMID - 12, CR_WHITE, 256.1, 144.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Bulkiness"); HUDMSG_PLAIN, RPGMENUITEMID - 13, CR_WHITE, 256.1, 160.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Charisma"); HUDMSG_PLAIN, RPGMENUITEMID - 14, CR_WHITE, 256.1, 176.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Vitality"); HUDMSG_PLAIN, RPGMENUITEMID - 15, CR_WHITE, 256.1, 192.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Intellect"); HUDMSG_PLAIN, RPGMENUITEMID - 16, CR_WHITE, 256.1, 208.0, 0.0);
			// draw bonus stat acquired
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_STR"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 17, CR_WHITE, 320.1, 128.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_DEX"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 18, CR_WHITE, 320.1, 144.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_BUL"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 19, CR_WHITE, 320.1, 160.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_CHR"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 20, CR_WHITE, 320.1, 176.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_VIT"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 21, CR_WHITE, 320.1, 192.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_INT"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 22, CR_WHITE, 320.1, 208.0, 0.0);
			
			
			SetHudClipRect(184, 208, 256, 64, 256, 1);
			if(boxid != MAINBOX_NONE)
				HudMessage(s:"\cd*\c- ", l:GetAttributeText(boxid - 1); HUDMSG_PLAIN, RPGMENUITEMID - 40, CR_WHITE, 184.1, 216.1, 0.0, 0.0);
			SetHudClipRect(0, 0, 0, 0, 0);
			
			HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_STAT2) {
			// put before hud clip rect in the future, wasn't showing before!
			HudMessage(s:"--- Current Gains ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			DrawPlayerStats(pnum);
			
			HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_STAT3) {
			ListenScroll(-128, 0);
		
			toshow = "";
			j = 0;
			HudMessage(s:"--- Quest Bonuses ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			for(i = 0; i < MAX_QUESTS; ++i) {
				if(IsQuestComplete(0, i)) {
					toshow = StrParam(s:toshow, s:"\cf*\c- ", s:Quest_Description[i][QUEST_REW], s:"\n\n");
					++j;
				}
			}
			SetHudClipRect(192, 56, 256, 448, 256); // 48 because 64 is begin, text one line len is 16, 48 is max allowed lines, 16 x 3.
			HudMessage(s:toshow; HUDMSG_PLAIN, RPGMENUITEMID - 8, CR_WHITE, 192.1, 64.1 + 2.0 * ScrollPos, 0.0, 0.0);
			SetHudClipRect(0, 0, 0, 0, 0);
		
			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_PERK) {
			HudMessage(s:"--- Player Perks ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			
			HudMessage(s:"\c[Y5]Perks Available: \c-", d:CheckInventory("PerkPoint"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 312.0, 64.0, 0.0, 0.0);
			
			for(i = 0; i < DND_PERKS; ++i)
				DrawToggledLabel(StatData[DND_PERK_BEGIN + i][STAT_LABEL], CheckInventory(StatData[DND_PERK_BEGIN + i][STAT_NAME]), boxid, MBOX_1 + i, RPGMENUITEMID - 1 - i, "\c[Y5]", "\c[B1]", 184.1, 80.0 + i * 16.0);
			DrawCornerText(MENU_PERK, boxid);
		}
		else if(curopt == MENU_LOAD) {
			HudMessage(s:"--- Loadout Selection ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			DrawBoxText("DND_MENU_ITEMS", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_INVENTORY", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_STASH", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_CHARMS", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_CRAFTING", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 5, 192.1, 160.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_ACCESSORIES", DND_LANGUAGE_LOOKUP, boxid, MBOX_6, RPGMENUITEMID - 6, 192.1, 176.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_TRADING", DND_LANGUAGE_LOOKUP, boxid, MBOX_7, RPGMENUITEMID - 7, 192.1, 192.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_LOAD1) {
			HudMessage(s:"--- Items Acquired ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			j = 0;
			for(i = SHOP_FIRSTARTI_INDEX; i <= SHOP_LASTDRAWNARTI_INDEX; ++i) {
				if(CheckInventory(ShopItemNames[i][SHOPNAME_ITEM])) {
					HudMessage(s:"\c[Y5]", s:ShopItemNames[i][SHOPNAME_TAG], s:": \cj", d:CheckInventory(ShopItemNames[i][SHOPNAME_ITEM]); HUDMSG_PLAIN, RPGMENUITEMID - 1 - i + SHOP_FIRSTARTI_INDEX, CR_WHITE, 184.1, 64.0 + j, 0.0, 0.0);
					j += 16.0;
				}
			}
		}
		else if(curopt == MENU_LOAD_INVENTORY) {
			HudMessage(s:"--- Inventory ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_LOAD_STASH) {
			HudMessage(s:"--- Stash ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_LOAD_CHARM) {
			HudMessage(s:"--- Charms Equipped ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			if(boxid == MAINBOX_NONE || (boxid == MBOX_8 && !CheckInventory("DnD_InventoryView")))
				CleanInventoryInfo();
			
			DrawCharmBox(DND_CHARM_SMALL, boxid, MBOX_1, 192.1, 216.0);
			DrawCharmBox(DND_CHARM_SMALL, boxid, MBOX_2, 256.1, 216.0);
			DrawCharmBox(DND_CHARM_SMALL, boxid, MBOX_3, 320.1, 216.0);
			DrawCharmBox(DND_CHARM_SMALL, boxid, MBOX_4, 384.1, 216.0);
			
			DrawCharmBox(DND_CHARM_MEDIUM, boxid, MBOX_5, 224.1, 152.0);
			DrawCharmBox(DND_CHARM_MEDIUM, boxid, MBOX_6, 352.1, 152.0);
			
			DrawCharmBox(DND_CHARM_LARGE, boxid, MBOX_7, 288.1, 96.0);
			
			DrawBoxText("DND_MENU_VIEWINV", DND_LANGUAGE_LOOKUP, boxid, MBOX_8, RPGMENUITEMID, 316.4, 248.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_LOAD_CRAFTING || curopt == MENU_LOAD_CRAFTING_INVENTORY || curopt == MENU_LOAD_CRAFTING_WEAPON) {
			if(!k)
				DeleteTextRange(RPGMENUID - MATERIALBOX_OFFSET - 3 * MAX_CRAFTING_MATERIALBOXES, RPGMENUID - 1);
			SetHudSize(384, 200, 1);
			SetFont("CRFTVW");
			HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUID, CR_CYAN, 164.0, 100.0, 0.0, 0.0);
			SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
			SetFont("SMALLFONT");
			HandleCraftingView(InventoryPane, boxid, curopt, k);
			k = 1;
		}
		else if(curopt >= MENU_FIRST_TRADE && curopt <= MENU_LAST_TRADE) {
			HudMessage(s:"--- Arrange a Trade ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			if(CheckInventory("InTradeView") && IsTrading(pnum))
				HandleInventoryViewTrade(boxid);
			else {
				if(!k)
					ResetPane(CurrentPane);
				
				j = 0;
				i = 0;
				// how many we have to skip
				temp = MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE);
				for(; i < MAXPLAYERS && j < MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1); ++i) {
					if(PlayerInGame(i) && i != pnum) {
						if(j >= temp) {
							// n:0 prints the current player regardless, must use i + 1
							if(IsTradingWith(pnum, i))
								toshow = StrParam(s:"\cd- \c-", n:i + 1, s: "\cv V");
							else if(IsTrading(i))
								toshow = StrParam(s:"\cd- \c-", n:i + 1, s: "\c[D4] X");
							else
								toshow = StrParam(s:"\cd- \c-", n:i + 1);
							
							if(TradeMuteStatus(pnum, i))
								toshow = StrParam(s:toshow, s:" \cg M");
							if(TradeMuteStatus(i, pnum))
								toshow = StrParam(s:toshow, s:" \cm M");
							// add this as a clickable box
							if(!k) // don't keep adding boxes
								AddBoxToPane_Points(CurrentPane, 277.0, 260.0 - 16.0 * (j - temp), 180.0, 252.0 - 16.0 * (j - temp));
							if(boxid == MBOX_1 + j - temp)
								HudMessage(s:"\c[B1] <=="; HUDMSG_PLAIN, RPGMENUITEMID - 2 * (j - temp) - 1, CR_CYAN, 420.0, 66.0 + 16.0 * (j - temp), 0.0, 0.0); 
							DrawBoxText(toshow, DND_NOLOOKUP, boxid, MBOX_1 + (j - temp), RPGMENUITEMID - 2 * (j - temp), 192.1, 64.0 + 16.0 * (j - temp), "\c[B1]", "\c[Y5]");
						}
						++j;
					}
				}
				
				k = 1;
			}
			
			if(curopt != MENU_LAST_TRADE && PlayerCount() > MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1))
				HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUITEMID - 32, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
			if(curopt != MENU_FIRST_TRADE)
				HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUITEMID - 33, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt >= MENU_FIRST_ACCESSORY_PAGE && curopt <= MENU_LAST_ACCESSORY_PAGE) {
			// if RES_ACCESSORY is not made, don't let player do anything here
			if(CheckResearchStatus(RES_ACCESSORY) != RES_DONE)
				HudMessage(s:"--- N / A ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			else {
				HudMessage(s:"--- Current Accessories #", d:curopt - MENU_FIRST_ACCESSORY_PAGE + 1, s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
				// init limits
				i = ACCESSORY_PER_PAGE * (curopt - MENU_FIRST_ACCESSORY_PAGE);
				k = Min(i + ACCESSORY_PER_PAGE, MAX_ACCESSORY);
				for(j = i; j < k; ++j)
					DrawAccessory(j, boxid, curopt, CurrentPane);
			}
			
			if(curopt != MENU_LAST_ACCESSORY_PAGE)
				HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
			if(curopt != MENU_FIRST_ACCESSORY_PAGE)
				HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP) {
			HudMessage(s:"--- DnD Shop ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			DrawBoxText("DND_MENU_WEAPONS", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_AMMO", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_ABILITIES", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_ARTIFACTS", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_ARMORS", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 5, 192.1, 160.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_ACCOUNT", DND_LANGUAGE_LOOKUP, boxid, MBOX_6, RPGMENUITEMID - 6, 192.1, 176.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_SHOP_WEAPON) {
			HudMessage(s:"--- WEAPONS ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = 0; i < 8; ++i) {
				if(boxid == MBOX_1 + i)
					HudMessage(s:"\c[B1]Slot ", d:i + 1, s:"\c- <--"; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 96.0 + 16.0 * i, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]Slot ", d:i + 1; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 96.0 + 16.0 * i, 0.0, 0.0);
			}

			HudMessage(s:"\c[Y5]LEGEND\n* \c[J7][\c[S7]R\c[J7]] - Replaces slot weapon.\n* \c[J7][\c[E3]L\c[J7]] - Luxury weapon.\n\c[J7]        Can carry at most 1."; HUDMSG_PLAIN, RPGMENUITEMID - 17, CR_WHITE, 192.1, 240.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP_WEAPON1)
			HandleWeaponPageDraw(curopt, 0, 1, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON2)
			HandleWeaponPageDraw(curopt, 0, 2, boxid, -16);
		else if(curopt == MENU_SHOP_WEAPON3_1)
			HandleWeaponPageDraw(curopt, 1, 3, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON3_2)
			HandleWeaponPageDraw(curopt, -2, 3, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON4_1)
			HandleWeaponPageDraw(curopt, 1, 4, boxid, -24);
		else if(curopt == MENU_SHOP_WEAPON4_2)
			HandleWeaponPageDraw(curopt, -2, 4, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON5_1)
			HandleWeaponPageDraw(curopt, 1, 5, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON5_2)
			HandleWeaponPageDraw(curopt, -2, 5, boxid, -24);
		else if(curopt == MENU_SHOP_WEAPON6_1)
			HandleWeaponPageDraw(curopt, 1, 6, boxid, -40);
		else if(curopt == MENU_SHOP_WEAPON6_2)
			HandleWeaponPageDraw(curopt, -2, 6, boxid, -16);
		else if(curopt == MENU_SHOP_WEAPON7)
			HandleWeaponPageDraw(curopt, 0, 7, boxid, -16);
		else if(curopt == MENU_SHOP_WEAPON8)
			HandleWeaponPageDraw(curopt, 0, 8, boxid, 0);
		else if(curopt == MENU_SHOP_AMMOSELECT) {
			HudMessage(s:"--- AMMUNITIONS ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = 0; i < MAX_SLOTS - 1; ++i)
				DrawBoxText(StrParam(l:"DND_MENU_AMMOCATEGORY", s:" - ", d: i + 1), DND_NOLOOKUP, boxid, MBOX_1 + i, RPGMENUITEMID - i - 1, 192.1, 96.0 + 16.0 * i, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_SPECIALAMMO", DND_LANGUAGE_LOOKUP, boxid, MBOX_1 + i, RPGMENUITEMID - i - 1, 192.1, 96.0 + 16.0 * i, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_SHOP_AMMO_1)
			HandleAmmoPageDraw(boxid, DND_AMMOSLOT_CLIP, 1, AMMOSLOT_CLIP_BEGIN, AMMOSLOT_CLIP_END, false);
		else if(curopt == MENU_SHOP_AMMO_1_2)
			HandleAmmoPageDraw(boxid, DND_AMMOSLOT_CLIP, -1, AMMOSLOT_CLIP2_BEGIN, AMMOSLOT_CLIP2_END, false);
		else if(curopt == MENU_SHOP_AMMO_2)
			HandleAmmoPageDraw(boxid, DND_AMMOSLOT_SHELL, 1, AMMOSLOT_SHELL_BEGIN, AMMOSLOT_SHELL_END, false);
		else if(curopt == MENU_SHOP_AMMO_2_2)
			HandleAmmoPageDraw(boxid, DND_AMMOSLOT_SHELL, -1, AMMOSLOT_SHELL2_BEGIN, AMMOSLOT_SHELL2_END, false);
		else if(curopt == MENU_SHOP_AMMO_3)
			HandleAmmoPageDraw(boxid, DND_AMMOSLOT_ROCKET, 0, AMMOSLOT_ROCKET_BEGIN, AMMOSLOT_ROCKET_END, false);
		else if(curopt == MENU_SHOP_AMMO_4)
			HandleAmmoPageDraw(boxid, DND_AMMOSLOT_CELL, 0, AMMOSLOT_CELL_BEGIN, AMMOSLOT_CELL_END, false);
		else if(curopt == MENU_SHOP_AMMO_SPECIAL1)
			HandleAmmoPageDraw(boxid, -1, 0, -1, -1, true);
		else if(curopt == MENU_SHOP_ABILITY_1) {
			HudMessage(s:"--- ABILITIES (1) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = SHOP_ABILITY1_BEGIN; i <= SHOP_ABILITY1_END; ++i)
				DrawToggledImage(i, boxid, i - SHOP_ABILITY1_BEGIN, AbilityDrawInfo[i - SHOP_ABILITY1_BEGIN].flags, CR_WHITE, CR_GREEN, ShopItemNames[i][SHOPNAME_CONDITION], 1, CR_RED);
		
			HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP_ABILITY_2) {
			HudMessage(s:"--- ABILITIES (2) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = SHOP_ABILITY2_BEGIN; i <= SHOP_LASTABILITY_INDEX; ++i)
				DrawToggledImage(i, boxid, i - SHOP_ABILITY2_BEGIN, AbilityDrawInfo[i - SHOP_ABILITY1_BEGIN].flags, CR_WHITE, CR_GREEN, ShopItemNames[i][SHOPNAME_CONDITION], 1, CR_RED);
		
			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP_ARTIFACT) {
			HudMessage(s:"--- ARTIFACTS ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = 0; i < MAXARTIFACTS; ++i)
				DrawToggledImage(SHOP_FIRSTARTI_INDEX + i, boxid, i, ArtifactDrawInfo[i].flags, CR_WHITE, CR_GREEN, ArtifactInfo[i][ARTI_NAME], ShopInfo[SHOP_FIRSTARTI_INDEX + i][SHOPINFO_MAX], CR_RED);
		}
		else if(curopt == MENU_SHOP_ARMOR1) {
			HudMessage(s:"--- ARMORS (1) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i  = 0; i < PAGE1_ARMOR_COUNT; ++i)
				DrawToggledImage(SHOP_ARMOR_GREEN + i, boxid, i, ArmorDrawInfo[i].flags, CR_WHITE, CR_GREEN, "Armor", ArmorBaseAmounts[i + 1], CR_RED);
		
			HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
		
			temp = GetArmorFillPrice();
			if(temp > 0) {
				if(CheckInventory("Credit") >= temp)
					HudMessage(s:"\c[Y5]Fill Price: \cj$", d:temp; HUDMSG_PLAIN, RPGMENUITEMID - 44, CR_CYAN, 192.1, 216.1, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]Fill Price: \c[Q2]$", d:temp; HUDMSG_PLAIN, RPGMENUITEMID - 44, CR_CYAN, 192.1, 216.1, 0.0, 0.0);
			}
		}
		else if(curopt == MENU_SHOP_ARMOR2) {
			HudMessage(s:"--- ARMORS (2) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i  = 0; i < PAGE2_ARMOR_COUNT; ++i)
				DrawToggledImage(SHOP_FIRSTARMOR2_INDEX + i, boxid, i, ArmorDrawInfo[PAGE1_ARMOR_COUNT + i].flags, CR_WHITE, CR_GREEN, "Armor", ArmorBaseAmounts[i + PAGE1_ARMOR_COUNT + 1], CR_RED);

			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		
			temp = GetArmorFillPrice();
			if(temp > 0) {
				if(CheckInventory("Credit") >= temp)
					HudMessage(s:"\c[Y5]Fill Price: \cj$", d:temp; HUDMSG_PLAIN, RPGMENUITEMID - 44, CR_CYAN, 192.1, 216.1, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]Fill Price: \c[Q2]$", d:temp; HUDMSG_PLAIN, RPGMENUITEMID - 44, CR_CYAN, 192.1, 216.1, 0.0, 0.0);
			}
		}
		else if(curopt == MENU_SHOP_ACCOUNT) {
			HudMessage(s:"--- ACCOUNT ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i  = 0; i < MAXACCOUNTITEMS; ++i)
				DrawToggledImage(SHOP_ACCOUNT_BEGIN + i, boxid, i, OBJ_RESEARCH | OBJ_HASCHOICE | OBJ_ACCOUNT, CR_WHITE, CR_GREEN, ShopItemNames[SHOP_ACCOUNT_BEGIN + i][SHOPNAME_ITEM], ShopInfo[SHOP_ACCOUNT_BEGIN + i][SHOPINFO_MAX], CR_RED);
		}
		else if(curopt == MENU_RESEARCH) {
			HudMessage(s:"--- RESEARCH MENU ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			DrawBoxText("DND_RESMENU_BODY", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_RESMENU_AMMO", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_RESMENU_GUNS", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_RESMENU_UTILITY", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_RESEARCH_GUNS) {
			HudMessage(s:"--- ", l:"DND_MENU_HEAD_RESGUNS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			DrawBoxText("DND_RESMENU_SUBSLOT", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_RESMENU_SUBLUX", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			
			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt >= SHOP_RESPAGE_BEGIN && curopt <= SHOP_RESPAGE_END)
			HandleResearchPageDraw(curopt - SHOP_RESPAGE_BEGIN, boxid);
		else if(curopt == MENU_ABILITY) {
			HudMessage(s:"--- Abilities Learned ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			for(i = 0; i < MAXABILITIES; ++i) {
				toshow = "\c[G8]N/A";
				if(CheckInventory(ShopItemNames[SHOP_ABILITY1_BEGIN + i][SHOPNAME_ITEM]))
					toshow = "\cdLearned\c-";
				HudMessage(s:"\c[Y5]", s:ShopItemNames[SHOP_ABILITY1_BEGIN + i][SHOPNAME_TAG], s:": \c-", s:toshow; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 192.1, 80.0 + 16.0 * i, 0.0, 0.0);
			}
				
			if(boxid == MBOX_1) {
				if(!CheckInventory("DashDisabled"))
					HudMessage(s:"\c[B1]Dash: ", s:"\cdEnabled"; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[B1]Dash: ", s:"\cgDisabled"; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
			}
			else {
				if(!CheckInventory("DashDisabled"))
					HudMessage(s:"\c[Y5]Dash: ", s:"\cdEnabled"; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]Dash: ", s:"\cgDisabled"; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
			}
		}
		else if(curopt == MENU_MAIN) {
			ListenScroll(-32, 0);
			
			HudMessage(s:"--- ", l:"DND_MENU_WELCOME", s:"! ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			ShowBobby();
			SetHudClipRect(192, 152, 256, 192, 256, 1);
			HudMessage(s:"\cv*\c- ", l:"DND_MENU_BOBBY1", s:"\n\n\cv*\c- ", l:"DND_MENU_BOBBY2", s:"\n\n\cv*\c- ", l:"DND_MENU_BOBBY3"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 152.1 + 4.0 * ScrollPos, 0.0, 0.0);
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP) {
			HudMessage(s:"--- ", l:"DND_MENU_HEAD_HELP", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			
			DrawBoxText("DND_MENU_HELPTEXT1", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_HELPTEXT2", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 1, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_HELPTEXT3", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 2, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_HELPTEXT4", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 3, 192.1, 144.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_HELPTEXT5", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 4, 192.1, 160.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_HELPTEXT6", DND_LANGUAGE_LOOKUP, boxid, MBOX_6, RPGMENUITEMID - 5, 192.1, 176.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_HELPTEXT7", DND_LANGUAGE_LOOKUP, boxid, MBOX_7, RPGMENUITEMID - 6, 192.1, 192.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_HELPTEXT8", DND_LANGUAGE_LOOKUP, boxid, MBOX_8, RPGMENUITEMID - 7, 192.1, 208.0, "\c[B1]", "\c[Y5]");
			
			HudMessage(s:"\c[Y5]", l:"DND_MENU_AVGMONLEVEL", s:": \cj", d:CheckInventory("DnD_PTotalLevel") / PlayerCount(); HUDMSG_PLAIN, RPGMENUITEMID - 8, CR_WHITE, 192.1, 228.0, 0.0, 0.0);
			str mapinfo = "DND_MENU_DISABLED";
			if(CheckInventory("ShowMapInfo"))
				mapinfo = "DND_MENU_ENABLED";
			DrawBoxText(StrParam(l:"DND_MENU_MAPINFO", l:mapinfo), DND_NOLOOKUP, boxid, MBOX_9, RPGMENUITEMID - 9, 192.1, 244.0, "\c[B1]", "\c[Y5]");
			if(CheckInventory("SetMapInfo")) {
				SetCVar("dnd_showmapinfo", !GetCVar("dnd_showmapinfo"));
				SetInventory("ShowMapInfo", !CheckInventory("ShowMapInfo"));
			}
		}
		else if(curopt == MENU_HELP_CHARACTER) {
			ListenScroll(-96, 0);
			HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT1", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			SetHudClipRect(192, 64, 256, 192, 256, 1);
			
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT1"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT2"; HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, 136.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT3"; HUDMSG_PLAIN, RPGMENUITEMID - 3, CR_WHITE, 192.1, 208.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT4"; HUDMSG_PLAIN, RPGMENUITEMID - 4, CR_WHITE, 192.1, 280.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT5"; HUDMSG_PLAIN, RPGMENUITEMID - 5, CR_WHITE, 192.1, 352.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT6"; HUDMSG_PLAIN, RPGMENUITEMID - 6, CR_WHITE, 192.1, 424.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT7"; HUDMSG_PLAIN, RPGMENUITEMID - 7, CR_WHITE, 192.1, 496.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT8"; HUDMSG_PLAIN, RPGMENUITEMID - 8, CR_WHITE, 192.1, 568.1 + 4.0 * ScrollPos, 0.0, 0.0);
			
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_CLASSPERKS) {
			if(CheckInventory("DnD_Character") - 1 == DND_PLAYER_BERSERKER) {
				ListenScroll(-8, 0);
				j = 16.0;
			}
			else
				j = 0;
			
			temp = CheckInventory("DnD_Character") - 1;
			toshow = StrParam(s:"CLASS", d:temp);
			HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT2", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			SetHudClipRect(192, 64, 256, 256, 256, 1);
			HudMessage(s:"Class: \cj", l:GetClassLabel(toshow, DND_CLASS_LABEL_NAME); HUDMSG_PLAIN, RPGMENUHELPID - 10, CR_CYAN, 316.4, 80.0 + 4.0 * ScrollPos, 0.0, 0.0);
			
			i = 0;
			if(CheckInventory("Level") < 5)
				HudMessage(l:GetClassLabel(toshow, DND_CLASS_LABEL_PERK1); HUDMSG_PLAIN, RPGMENUITEMID - i - 2 , CR_DARKGRAY, 192.1, 112.1 + (48.0 + j) * (i++) + 4.0 * ScrollPos, 0.0, 0.0);
			else
				HudMessage(l:GetClassLabel(toshow, DND_CLASS_LABEL_PERK1); HUDMSG_PLAIN, RPGMENUITEMID - i - 2 , CR_GREEN, 192.1, 112.1 + (48.0 + j) * (i++) + 4.0 * ScrollPos, 0.0, 0.0);
			
			if(CheckInventory("Level") < 25)
				HudMessage(l:GetClassLabel(toshow, DND_CLASS_LABEL_PERK2); HUDMSG_PLAIN, RPGMENUITEMID - i - 2 , CR_DARKGRAY, 192.1, 112.1 + (48.0 + j) * (i++) + 4.0 * ScrollPos, 0.0, 0.0);
			else
				HudMessage(l:GetClassLabel(toshow, DND_CLASS_LABEL_PERK2); HUDMSG_PLAIN, RPGMENUITEMID - i - 2 , CR_ORANGE, 192.1, 112.1 + (48.0 + j) * (i++) + 4.0 * ScrollPos, 0.0, 0.0);

			if(CheckInventory("Level") < 50)
				HudMessage(l:GetClassLabel(toshow, DND_CLASS_LABEL_PERK3); HUDMSG_PLAIN, RPGMENUITEMID - i - 2 , CR_DARKGRAY, 192.1, 112.1 + (48.0 + j) * i + 4.0 * ScrollPos, 0.0, 0.0);
			else
				HudMessage(l:GetClassLabel(toshow, DND_CLASS_LABEL_PERK3); HUDMSG_PLAIN, RPGMENUITEMID - i - 2 , CR_RED, 192.1, 112.1 + (48.0 + j) * i + 4.0 * ScrollPos, 0.0, 0.0);
			
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_WEAPONPROPS) {
			ListenScroll(-64, 0);
			HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT3", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			SetHudClipRect(192, 56, 256, 384, 256, 1);
			
			HudMessage(l:"DND_MENU_WEPHELPTEXT1"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_WEPHELPTEXT2"; HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, 132.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_WEPHELPTEXT3"; HUDMSG_PLAIN, RPGMENUITEMID - 3, CR_WHITE, 192.1, 200.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_WEPHELPTEXT4"; HUDMSG_PLAIN, RPGMENUITEMID - 4, CR_WHITE, 192.1, 268.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_WEPHELPTEXT5"; HUDMSG_PLAIN, RPGMENUITEMID - 5, CR_WHITE, 192.1, 336.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_WEPHELPTEXT6"; HUDMSG_PLAIN, RPGMENUITEMID - 6, CR_WHITE, 192.1, 404.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_WEPHELPTEXT7"; HUDMSG_PLAIN, RPGMENUITEMID - 7, CR_WHITE, 192.1, 472.1 + 4.0 * ScrollPos, 0.0, 0.0);
			
			SetHudClipRect(0, 0, 0, 0);
			
			for(i = 0; i < MAX_WEAPON_PROPERTIES; ++i)
				ShowWeaponPropertyIcon(i);
		}
		else if(curopt == MENU_HELP_RESEARCHES) {
			ListenScroll(-32, 0);
			HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT4", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			SetHudClipRect(192, 64, 256, 192, 256, 1);
			
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT1"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT2"; HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, 128.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT3"; HUDMSG_PLAIN, RPGMENUITEMID - 3, CR_WHITE, 192.1, 192.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT4"; HUDMSG_PLAIN, RPGMENUITEMID - 4, CR_WHITE, 192.1, 256.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT5"; HUDMSG_PLAIN, RPGMENUITEMID - 5, CR_WHITE, 192.1, 320.1 + 4.0 * ScrollPos, 0.0, 0.0);
			
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_DAMAGETYPES) {
			ListenScroll(-96, 0);
			HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT5", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			SetHudClipRect(192, 64, 256, 384, 256, 1);
			
			HudMessage(l:"DND_MENU_BULLETTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_SHELLTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, 144.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_MELEETEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 3, CR_WHITE, 192.1, 224.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_OCCULTTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 4, CR_WHITE, 192.1, 304.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_EXPLOTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 5, CR_WHITE, 192.1, 384.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_ENERGYTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 6, CR_WHITE, 192.1, 464.1 + 4.0 * ScrollPos, 0.0, 0.0);
			HudMessage(l:"DND_MENU_ELEMENTTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 7, CR_WHITE, 192.1, 544.1 + 4.0 * ScrollPos, 0.0, 0.0);
			
			SetHudClipRect(192, 88, 320, 384, 320, 1);
			
			for(i = 0; i < MAX_DAMAGE_TYPES; ++i)
				ShowDamageTypeIcon(i);
				
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_ORBS) {
			ListenScroll(-192, 0);
			HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT6", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			SetHudClipRect(192, 60, 256, 384, 256, 1);
			for(i = 0; i < MAX_ORBS; ++i) {
				HudMessage(s:InventoryInfo[i + ORBS_BEGIN][SITEM_DESC]; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 192.1, 88.1 + 96.0 * i + 8.0 * ScrollPos, 0.0, 0.0);
				ShowOrbIcon(i);
			}
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_LEGMONS) {
			ListenScroll(-64 * (k / 2), 0);
			HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT8", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			SetHudClipRect(192, 52, 256, 384, 256, 1);
			k = 0;
			for(i = 0; i < MAX_LEGMONS_TEXT; ++i) {
				if(HasKilledLegendary(i)) {
					HudMessage(l:StrParam(s:"DND_MENU_LEGHELPTEXT", d:i + 1); HUDMSG_PLAIN, RPGMENUITEMID - 2 * i, CR_WHITE, 192.1, 112.1 + 144.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
					ShowLegendaryMonsterIcon(i, k);
					++k;
				}
			}
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_MMODS) {
			HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT7", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			DrawBoxText("DND_MENU_MMOD_WEAK", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_MMOD_RESIST", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_MMOD_IMMUNE", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_MMOD_AGGRESS", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_MMOD_DEFENSE", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 5, 192.1, 160.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_MMOD_UTILITY", DND_LANGUAGE_LOOKUP, boxid, MBOX_6, RPGMENUITEMID - 6, 192.1, 176.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("DND_MENU_MMOD_SPECIAL", DND_LANGUAGE_LOOKUP, boxid, MBOX_7, RPGMENUITEMID - 7, 192.1, 192.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_HELP_MMODS_WEAKNESS) {
			ListenScroll(-48, 0);
			HudMessage(s:"--- ", l:"DND_MENU_MMOD_WEAK", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			DrawMonsterModCategory(DND_TRAITCODE_WEAKNESS);
		}
		else if(curopt == MENU_HELP_MMODS_RESIST) {
			ListenScroll(-96, 0);
			HudMessage(s:"--- ", l:"DND_MENU_MMOD_RESIST", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			DrawMonsterModCategory(DND_TRAITCODE_RESIST);
		}
		else if(curopt == MENU_HELP_MMODS_IMMUNITY) {
			ListenScroll(-112, 0);

			HudMessage(s:"--- ", l:"DND_MENU_MMOD_IMMUNE", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			DrawMonsterModCategory(DND_TRAITCODE_IMMUNITY);
		}
		else if(curopt == MENU_HELP_MMODS_AGGRESSIVE) {
			ListenScroll(-144, 0);
			HudMessage(s:"--- ", l:"DND_MENU_MMOD_AGGRESS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			DrawMonsterModCategory(DND_TRAITCODE_AGGRESSIVE);
		}
		else if(curopt == MENU_HELP_MMODS_DEFENSIVE) {
			ListenScroll(-224, 0);
			HudMessage(s:"--- ", l:"DND_MENU_MMOD_DEFENSE", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			DrawMonsterModCategory(DND_TRAITCODE_DEFENSIVE);
		}
		else if(curopt == MENU_HELP_MMODS_UTILITY) {
			ListenScroll(-192, 0);
			HudMessage(s:"--- ", l:"DND_MENU_MMOD_UTILITY", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			DrawMonsterModCategory(DND_TRAITCODE_UTILITY);
		}
		else if(curopt == MENU_HELP_MMODS_SPECIAL) {
			HudMessage(s:"--- ", l:"DND_MENU_MMOD_SPECIAL", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			// -1 is for special stuff
			DrawMonsterModCategory(-1);
		}
		// Main menu side bar
		i = 0;
		// Side bar options with animations
		if(CheckInventory("AttributePoint") && 
			//Don't flash if stats are already maxed
		   !((CheckInventory("PSTAT_Strength") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Dexterity") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Bulkiness") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Charisma") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Vitality") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Intellect") == DND_STAT_FULLMAX))
		   && !(framecounter % 2)) {
			i = mainboxid == MAINBOX_STATS;
			HudMessage(s:"\c[B3]Stats\c-"; HUDMSG_PLAIN, RPGMENULISTID, -1, 96.0, 168.0, 0.0, 0.0);
		} 
		else {
			if(mainboxid == MAINBOX_STATS)
				HudMessage(s:"\c[B1]Stats\c-"; HUDMSG_PLAIN, RPGMENULISTID, -1, 96.0, 168.0, 0.0, 0.0);
			else
				HudMessage(s:"\c[Y5]Stats\c-"; HUDMSG_PLAIN, RPGMENULISTID, -1, 96.0, 168.0, 0.0, 0.0);
		}
		
		// the above is 0 or 1, this one is 2 or 4
		// trick to make this light up when both stats and perks are up
		i |= 2;
		if(CheckInventory("PerkPoint") && 
		   !((CheckInventory("Perk_Sharpshooting") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Endurance") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Wisdom") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Greed") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Medic") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Munitionist") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Deadliness") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Savagery") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Luck") == DND_PERK_MAX))
		   && !(framecounter % 2)) {
			i |= (mainboxid == MAINBOX_PERK) * 4;
			HudMessage(s:"\c[B3]Perks\c-"; HUDMSG_PLAIN, RPGMENULISTID - 1, -1, 96.0, 186.0, 0.0, 0.0);
		}
		else {
			if(mainboxid == MAINBOX_PERK)
				HudMessage(s:"\c[B1]Perks\c-"; HUDMSG_PLAIN, RPGMENULISTID - 1, -1, 96.0, 186.0, 0.0, 0.0);
			else
				HudMessage(s:"\c[Y5]Perks\c-"; HUDMSG_PLAIN, RPGMENULISTID - 1, -1, 96.0, 186.0, 0.0, 0.0);
		}
		DrawHighLightBar(mainboxid, i);
		
		// Rest of the side bar options
		if(mainboxid == MAINBOX_LOAD)
			HudMessage(s:"\c[B1]Loadout\c-"; HUDMSG_PLAIN, RPGMENULISTID - 2, -1, 96.0, 204.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Loadout\c-"; HUDMSG_PLAIN, RPGMENULISTID - 2, -1, 96.0, 204.0, 0.0, 0.0);
		
		if(mainboxid == MAINBOX_SHOP)
			HudMessage(s:"\c[B1]Shop\c-"; HUDMSG_PLAIN, RPGMENULISTID - 3, -1, 96.0, 221.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Shop\c-"; HUDMSG_PLAIN, RPGMENULISTID - 3, -1, 96.0, 221.0, 0.0, 0.0);
		
		if(mainboxid == MAINBOX_RESEARCH)
			HudMessage(s:"\c[B1]Research\c-"; HUDMSG_PLAIN, RPGMENULISTID - 6, -1, 96.0, 251.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Research\c-"; HUDMSG_PLAIN, RPGMENULISTID - 6, -1, 96.0, 251.0, 0.0, 0.0);
		
		if(mainboxid == MAINBOX_ABILITY)
			HudMessage(s:"\c[B1]Abilities\c-"; HUDMSG_PLAIN, RPGMENULISTID - 4, -1, 96.0, 269.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Abilities\c-"; HUDMSG_PLAIN, RPGMENULISTID - 4, -1, 96.0, 269.0, 0.0, 0.0);
		
		if(mainboxid == MAINBOX_HELP)
			HudMessage(s:"\c[B1]Help\c-"; HUDMSG_PLAIN, RPGMENULISTID - 5, -1, 96.0, 287.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Help\c-"; HUDMSG_PLAIN, RPGMENULISTID - 5, -1, 96.0, 287.0, 0.0, 0.0);
		
		HudMessage(s:"\c[Y5]Lasted: \cj", d:CheckInventory("RoundsSurvived"); HUDMSG_PLAIN, RPGMENUNAMEID, -1, 60.1, 140.0, 0.0, 0.0);
		
		// Main Menu Side Bar Ends
		
		// clickable main buttons
		HandleClickableButtonFrames();
		
		// Handle all types of popups
		HandleWeaponInfoPanel(curopt, animcounter, boxid);
		
		Delay(const:1);
		
		animcounter++;
		if(animcounter == 17) {
			animcounter = 0;
			framecounter = (++framecounter) % 3;
		}
		
		// retry ack
		if(!CheckInventory("DND_ACK")) {
			if(sendBox) {
				GiveInventory("DND_ACKLoop", 1);
				//temp = boxid | (CheckInventory("DnD_PlayerItemIndex") << DND_MENU_ITEMSAVEBITS1) | (CheckInventory("DnD_PlayerPrevItemIndex") << DND_MENU_ITEMSAVEBITS2);
				//Log(s:"trying to send prev item loop beg", d:MenuInputData[pnum][DND_MENUINPUT_PAYLOAD] >> 16, s: " vs ", d:MenuInputData[pnum][DND_MENUINPUT_PLAYERCRAFTCLICK] >> 16);
				ACS_NamedExecuteAlways("DnD Retry Sending Until ACK", 0, PlayerNumber() | (CheckInventory("MenuInput") << 16), MenuInputData[pnum][DND_MENUINPUT_PAYLOAD], mainboxid | (CheckInventory("MenuPosX") << 16));
			}
		}
		else {
			sendBox = false;
			SetInventory("MenuInput", 0);
			//Log(s:"reset input data");
			MenuInputData[pnum][DND_MENUINPUT_PAYLOAD] = 0;
			MenuInputData[pnum][DND_MENUINPUT_PLAYERCRAFTCLICK] = 0;
		}
	}
}

Script "DnD Retry Sending Until ACK" (int payload1, int payload2, int mainboxid) CLIENTSIDE {
	if(!payload1 || CheckInventory("DND_ACKLoop"))
		Terminate;
	while(!CheckInventory("DnD_ACK")) {
		//Log(s:"running till ack received with ", d:payload1, s: " ", d:payload2, s: " ", d:mainboxid);
		//Log(s:"trying to send prev item ", d:payload2 >> 16);
		NamedRequestScriptPuke("DND Server Box Receive", payload1, payload2, mainboxid);
		Delay(const:1);
	}
	TakeInventory("DND_ACKLoop", 1);
}

Script "DnD Main Button Click Animation" (int boxid) CLIENTSIDE {
	if(!CheckInventory(ButtonTimers[boxid - FIRST_CLICKABLE_BOXID]))
		SetInventory(ButtonTimers[boxid - FIRST_CLICKABLE_BOXID], 1); // kick starts the animation
	SetResultValue(0);
}

Script "DND Server Box Receive" (int pnum, int boxid, int mainboxid) NET {
	// don't let garbage data slip in
	if(!pnum)
		Terminate;
	int temp = pnum >> 16;
	int tpos = 0;
	
	//int dummy = pnum;
	pnum &= 0xFFFF;
	if(!MenuInputData[pnum][DND_MENUINPUT_DELAY]) {
		//printbold(s:"received ", d:dummy, s: " ", d:boxid, s: " ", d:mainboxid);
		int curopt, i, j;

		// extra Left - Right pos is kept in mainboxid
		if(mainboxid > 0xFFFF) {
			MenuInputData[pnum][DND_MENUINPUT_LRPOS] = mainboxid >> 16;
			mainboxid &= 0xFFFF;
		}
		
		SetActivator(pnum + P_TIDSTART);
		MenuInputData[pnum][DND_MENUINPUT_DELAY] = DND_MENU_INPUTDELAYTICS;
		MenuInputData[pnum][DND_MENUINPUT] = temp;
		
		curopt = CheckInventory("MenuOption");
		GiveInventory("DND_ACK", 1);
		if(mainboxid != MAINBOX_NONE) {
			if(HasLeftClicked(pnum)) {
				TakeInventory("DnD_InventoryView", 1);
				TakeInventory("DnD_StashView", 1);
				if(mainboxid >= FIRST_CLICKABLE_BOXID && mainboxid <= LAST_CLICKABLE_BOXID)
					HandleButtonClick(mainboxid);
				else if(mainboxid == MAINBOX_STATS)
					UpdateMenuPosition(MENU_STAT1);
				else if(mainboxid == MAINBOX_PERK)
					UpdateMenuPosition(MENU_PERK);
				else if(mainboxid == MAINBOX_LOAD)
					UpdateMenuPosition(MENU_LOAD);
				else if(mainboxid == MAINBOX_SHOP)
					UpdateMenuPosition(MENU_SHOP);
				else if(mainboxid == MAINBOX_RESEARCH)
					UpdateMenuPosition(MENU_RESEARCH);
				else if(mainboxid == MAINBOX_ABILITY)
					UpdateMenuPosition(MENU_ABILITY);
				else if(mainboxid == MAINBOX_HELP)
					UpdateMenuPosition(MENU_HELP);
			}
		}
		
		if(CheckInventory("DnD_SellConfirm") && HasLeftClicked(pnum)) {
			TakeInventory("DnD_SellConfirm", 1);
			// clean the sell popup
			SetInventory("DnD_PopupID", 0);
			SetInventory("DnD_PopupSell", 0);
			SetInventory("DnD_ShowPopup", 0);
			SetInventory("DnD_ShowSellPopup", 0);
			SetInventory("DnD_PopupID", 0);
			SetInventory("ActivePopupBox", 0);
		}
		
		if(curopt == MENU_STAT1) { // stat screen
			if(HasPlayerClicked(pnum)) {
				if(CheckInventory("AttributePoint") && boxid != MAINBOX_NONE) { // tried to level stat, so you must have some attrib point
					// allow allocation of stats past 100 if all stats have at least 100.
					int cur_stat_max = DND_STAT_MAX;
					if ((CheckInventory("PSTAT_Strength") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Dexterity") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Bulkiness") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Charisma") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Vitality") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Intellect") >= cur_stat_max))
						cur_stat_max = DND_STAT_FULLMAX;
					
					// here we check if option was left click or right click, right click consumes whatever we can on the given selection
					if(HasLeftClicked(pnum))
						temp = 1;
					else
						temp = Min(CheckInventory("AttributePoint"), cur_stat_max - CheckInventory(StatData[boxid - 1 + DND_ATTRIB_BEGIN][STAT_NAME]));
				
					if(boxid == MBOX_1 && CheckInventory("PSTAT_Strength") < cur_stat_max) { // str
						ConsumeAttributePointOn(STAT_STR, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						UpdatePlayerKnockbackResist();
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_2 && CheckInventory("PSTAT_Dexterity") < cur_stat_max) { // dex
						ConsumeAttributePointOn(STAT_DEX, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_3 && CheckInventory("PSTAT_Bulkiness") < cur_stat_max) { // bul
						ConsumeAttributePointOn(STAT_BUL, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_4 && CheckInventory("PSTAT_Charisma") < cur_stat_max) { // chr
						ConsumeAttributePointOn(STAT_CHR, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_5 && CheckInventory("PSTAT_Vitality") < cur_stat_max) { // vit
						ConsumeAttributePointOn(STAT_VIT, temp);
						SetActorProperty(0, APROP_SPAWNHEALTH, GetSpawnHealth());
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_6 && CheckInventory("PSTAT_Intellect") < cur_stat_max) { // int
						ConsumeAttributePointOn(STAT_INT, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
				}
			}
			
			if(HasPressedLeft(pnum))
				ReturnToMain();
			else if(HasPressedRight(pnum))
				UpdateMenuPosition(MENU_STAT2);
		}
		else if(curopt == MENU_STAT2) {
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_STAT1);
			else if(HasPressedRight(pnum))
				UpdateMenuPosition(MENU_STAT3);
		}
		else if(curopt == MENU_STAT3) {
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_STAT2);
		}
		else if(curopt == MENU_PERK) {
			if(HasPlayerClicked(pnum)) {
				if(CheckInventory("PerkPoint") && boxid != MAINBOX_NONE) { // tried to level perk, so you must have some perk point
					// same check as above
					if(HasLeftClicked(pnum))
						temp = 1;
					else
						temp = Min(CheckInventory("PerkPoint"), DND_PERK_MAX - CheckInventory(StatData[boxid - 1 + DND_PERK_BEGIN][STAT_NAME]));
				
					if(boxid == MBOX_1 && CheckInventory("Perk_Sharpshooting") < DND_PERK_MAX) { // sharp
						ConsumePerkPointOn(STAT_SHRP, temp);
						CleanSharpEndPerks(RES_PERK_SHARP);
						UpdateSharpEndPerks(RES_PERK_SHARP);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_2 && CheckInventory("Perk_Endurance") < DND_PERK_MAX) { // end
						ConsumePerkPointOn(STAT_END, temp);
						CleanSharpEndPerks(RES_PERK_ENDURANCE);
						UpdateSharpEndPerks(RES_PERK_ENDURANCE);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_3 && CheckInventory("Perk_Wisdom") < DND_PERK_MAX) { // wisdom
						ConsumePerkPointOn(STAT_WIS, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_4 && CheckInventory("Perk_Greed") < DND_PERK_MAX) { // greed
						ConsumePerkPointOn(STAT_GRE, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_5 && CheckInventory("Perk_Medic") < DND_PERK_MAX) { // medic
						ConsumePerkPointOn(STAT_MED, temp);
						SetAmmoCapacity("StoredMedkit", GetAmmoCapacity("StoredMedkit") + 15 * CheckInventory("Perk_Medic"));
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_6 && CheckInventory("Perk_Munitionist") < DND_PERK_MAX) { // munitionist
						ConsumePerkPointOn(STAT_MUN, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_7 && CheckInventory("Perk_Deadliness") < DND_PERK_MAX) { // deadliness
						ConsumePerkPointOn(STAT_DED, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_8 && CheckInventory("Perk_Savagery") < DND_PERK_MAX) { // savagery
						ConsumePerkPointOn(STAT_SAV, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_9 && CheckInventory("Perk_Luck") < DND_PERK_MAX) { // luck
						ConsumePerkPointOn(STAT_LUCK, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
				}
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_LOAD) {
			// prevents having something clicked previously in crafting altering something else
			SetInventory("DnD_SelectedInventoryBox", 0);
			if(HasLeftClicked(pnum)) {
				if(boxid > 0) {
					if(boxid == MBOX_7)
						UpdateMenuPosition(MENU_LOAD_TRADE1);
					else if(boxid == MBOX_6)
						UpdateMenuPosition(MENU_LOAD_ACC1);
					else {
						if(MENU_LOAD + boxid == MENU_LOAD_INVENTORY)
							GiveInventory("DnD_InventoryView", 1);
						else if(MENU_LOAD + boxid == MENU_LOAD_STASH)
							GiveInventory("DnD_StashView", 1);
						UpdateMenuPosition(MENU_LOAD + boxid);
					}
				}
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_LOAD1) {
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_LOAD);
		}
		else if(curopt == MENU_LOAD_INVENTORY) {
			if(HasPlayerClicked(pnum)) {
				// handles clicking outside
				// at the last part, we reset the prev box only if there's no item there, otherwise another piece of code handles it
				if(HasLeftClicked(pnum) && boxid == MAINBOX_NONE) {
					if(!CheckInventory("DnD_SelectedInventoryBox")) {
						TakeInventory("DnD_InventoryView", 1);
						SetInventory("DnD_SelectedCharmBox", 0);
						if(CheckInventory("MenuOption") == MENU_LOAD_INVENTORY || CheckInventory("MenuOption") == MENU_LOAD_STASH)
							UpdateMenuPosition_NoSound(MENU_LOAD);
						else
							LocalAmbientSound("RPG/MenuClose", 127);
					}
					else if(GetItemSyncValue(DND_SYNC_ITEMTYPE, CheckInventory("DnD_SelectedInventoryBox") - 1, -1, DND_SYNC_ITEMSOURCE_PLAYERINVENTORY) == DND_ITEM_NULL)
						SetInventory("DnD_SelectedInventoryBox", 0);
				}
				HandleInventoryViewClicks(boxid, temp);
			}
			if(HasPressedLeft(pnum)) {
				TakeInventory("DnD_InventoryView", 1);
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_STASH) {
			if(HasPlayerClicked(pnum)) {
				temp = MenuInputData[pnum][DND_MENUINPUT];
				// handles clicking outside
				// at the last part, we reset the prev box only if there's no item there, otherwise another piece of code handles it
				if(HasLeftClicked(pnum) && boxid == MAINBOX_NONE) {
					if(!CheckInventory("DnD_SelectedInventoryBox")) {
						TakeInventory("DnD_StashView", 1);
						SetInventory("DnD_SelectedCharmBox", 0);
						if(CheckInventory("MenuOption") == MENU_LOAD_INVENTORY || CheckInventory("MenuOption") == MENU_LOAD_STASH)
							UpdateMenuPosition_NoSound(MENU_LOAD);
						else
							LocalAmbientSound("RPG/MenuClose", 127);
					}
					else if (((CheckInventory("DnD_SelectedInventoryBox") > MAX_INVENTORY_BOXES) && (GetItemSyncValue(DND_SYNC_ITEMTYPE, CheckInventory("DnD_SelectedInventoryBox") - MAX_INVENTORY_BOXES - 1, -1, DND_SYNC_ITEMSOURCE_PLAYERINVENTORY) == DND_ITEM_NULL)) ||
							 ((CheckInventory("DnD_SelectedInventoryBox") <= MAX_INVENTORY_BOXES) && (GetItemSyncValue(DND_SYNC_ITEMTYPE, CheckInventory("DnD_SelectedInventoryBox") - 1, -1, DND_SYNC_ITEMSOURCE_STASH) == DND_ITEM_NULL)))
							SetInventory("DnD_SelectedInventoryBox", 0);
				}
				HandleStashViewClicks(boxid, temp);
			}
			if(HasPressedLeft(pnum)) {
				TakeInventory("DnD_StashView", 1);
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_CHARM) {
			HandleItemPageInputs(pnum, boxid);
			if(HasPressedLeft(pnum)) {
				TakeInventory("DnD_InventoryView", 1);
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_CRAFTING) {
			HandleCraftingInputs(boxid, curopt);
			if(HasPressedLeft(pnum)) {
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_CRAFTING_WEAPON) {
			HandleCraftingInputs(boxid, curopt);
			if(HasPressedLeft(pnum)) {
				UpdateMenuPosition(MENU_LOAD_CRAFTING);
			}
		}
		else if(curopt == MENU_LOAD_CRAFTING_INVENTORY) {
			HandleCraftingInputs(boxid, curopt);
			if(HasPressedLeft(pnum)) {
				UpdateMenuPosition(MENU_LOAD_CRAFTING);
			}
		}
		else if(curopt >= MENU_FIRST_TRADE && curopt <= MENU_LAST_TRADE) {
			if(HasPlayerClicked(pnum)) {
				if(boxid >= MBOX_1) {
					// we need to find which player this box corresponds to
					i = 0, temp = 0;
					// how many we skip
					j = MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE);
					for(; i < MAXPLAYERS && temp < boxid + j; ++i)
						if(PlayerInGame(i) && i != pnum)
							++temp;
					// i - 1 is the player number
					--i;
					// left click
					if(HasLeftClicked(pnum)) {
						if(!CheckInventory("DnD_Trade_Cooldown")) {
							// we aren't in trade panel
							if(!CheckInventory("InTradeView")) {
								if(!IsTrading(pnum)) {
									// handle trade protocol, initiate the request
									if(!IsTrading(i)) {
										if(!TradeMuteStatus(i, pnum)) {
											EngageTrade(pnum, i);
											SetActivator(i + P_TIDSTART);
											ACS_NamedExecuteAlways("DnD Announcer", 0, DND_ANNOUNCER_TRADEREQUEST, pnum, i + 1);
											SetActivator(pnum + P_TIDSTART);
											ACS_NamedExecuteAlways("DnD Trade Window", 0, pnum, false);
											ACS_NamedExecuteAlways("DnD Trade Window", 0, i, true);
											LocalAmbientSound("RPG/MenuChoose", 127);
										}
										else
											ShowActorPopup(pnum, POPUP_YOUAREMUTED, false, 0);
									}
									else
										ShowActorPopup(pnum, POPUP_TARGETISTRADING, false, 0);
								}
								else {
									// trade accept window is given to the other party, who engaged this
									if(IsTradingWith(pnum, i) && CheckInventory("DnD_TradeAcceptWindow")) {
										if(!TradeMuteStatus(i, pnum)) {
											// handle trade now, other party accepted
											GiveInventory("InTradeView", 1);
											GiveActorInventory(i + P_TIDSTART, "InTradeView", 1);
											LocalAmbientSound("RPG/MenuChoose", 127);
										}
										else
											ShowActorPopup(pnum, POPUP_YOUAREMUTED, false, 0);
									}
									else
										ShowActorPopup(pnum, POPUP_TARGETISTRADING, false, 0);
								}
							}
							else {
								// we are in trade panel now, handle boxes accordingly
								// give some time for the synchronization to settle in
								HandleTradeViewButtonClicks(pnum, boxid);
							}
						}
					}
					else {
						// right click mutes people
						if(!CheckInventory("InTradeView")) {
							ToggleMuteTrade(i);
							LocalAmbientSound("RPG/MenuChoose", 127);
						}
						else
							HandleTradeViewButtonClicks(pnum, boxid);
					}
				}
			}
			
			// only allow these if we arent currently trading with anyone
			if(!IsTrading(pnum)) {
				if(HasPressedLeft(pnum)) {
					if(curopt == MENU_FIRST_TRADE)
						UpdateMenuPosition(MENU_LOAD);
					else
						UpdateMenuPosition(curopt - 1);
				}
				else if(HasPressedRight(pnum)) {
					if(curopt != MENU_LAST_TRADE && PlayerCount() > MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1))
						UpdateMenuPosition(curopt + 1);
				}
			}
		}
		else if(curopt >= MENU_FIRST_ACCESSORY_PAGE && curopt <= MENU_LAST_ACCESSORY_PAGE) {
			if(HasLeftClicked(pnum)) {
				if(boxid >= MBOX_1) {
					// i is the accessory to toggle
					temp = boxid + ACCESSORY_PER_PAGE * (curopt - MENU_FIRST_ACCESSORY_PAGE) - 1;
					// I don't have this
					if(!CheckInventory(AccessoryInfo[temp][ACCESSORY_NAME]))
						ShowPopup(POPUP_ACCESSORYNOTFOUND, false, 0);
					else if(IsAccessoryEquipped(0, 1 << temp)) { // I have and already equipped it
						LocalAmbientSound("RPG/MenuChoose", 127);
						UnequipAccessory(1 << temp);
					}
					else if(!ReachedAccessoryLimit()) { // I don't have this, and didn't equip
						LocalAmbientSound("RPG/MenuChoose", 127);
						EquipAccessory(1 << temp);
					}
					else
						ShowPopup(POPUP_MAXACCESSORYEQUIPPED, false, 0);
				}
			}
			if(HasPressedLeft(pnum)) {
				if(curopt != MENU_FIRST_ACCESSORY_PAGE)
					UpdateMenuPosition(curopt - 1);
				else
					UpdateMenuPosition(MENU_LOAD);
			}
			else if(HasPressedRight(pnum)) {
				if(curopt != MENU_LAST_ACCESSORY_PAGE)
					UpdateMenuPosition(curopt + 1);
			}
		}
		else if(curopt == MENU_SHOP) {
			if(HasLeftClicked(pnum)) {
				if(boxid == MBOX_1)
					temp = MENU_SHOP_WEAPON;
				else if(boxid == MBOX_2)
					temp = MENU_SHOP_AMMOSELECT;
				else if(boxid == MBOX_3)
					temp = MENU_SHOP_ABILITY_1;
				else if(boxid == MBOX_4)
					temp = MENU_SHOP_ARTIFACT;
				else if(boxid == MBOX_5)
					temp = MENU_SHOP_ARMOR1;
				else if(boxid == MBOX_6)
					temp = MENU_SHOP_ACCOUNT;
				else
					temp = -1;
				if(boxid != MAINBOX_NONE && temp != -1)
					UpdateMenuPosition(temp);
				
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_SHOP_WEAPON) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE && boxid < MBOX_9)
					UpdateMenuPosition(GetWeaponPage(boxid));
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_SHOP_WEAPON1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON1_BEGIN, SHOP_WEAPON_SLOT1END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON2_BEGIN, SHOP_WEAPON_SLOT2END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON3_1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON31_BEGIN, SHOP_WEAPON_SLOT31END, -1, MENU_SHOP_WEAPON3_2);
		else if(curopt == MENU_SHOP_WEAPON3_2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON32_BEGIN, SHOP_WEAPON_SLOT32END, MENU_SHOP_WEAPON3_1, -1);
		else if(curopt == MENU_SHOP_WEAPON4_1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON41_BEGIN, SHOP_WEAPON_SLOT41END, -1, MENU_SHOP_WEAPON4_2);
		else if(curopt == MENU_SHOP_WEAPON4_2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON42_BEGIN, SHOP_WEAPON_SLOT42END, MENU_SHOP_WEAPON4_1, -1);
		else if(curopt == MENU_SHOP_WEAPON5_1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON51_BEGIN, SHOP_WEAPON_SLOT51END, -1, MENU_SHOP_WEAPON5_2);
		else if(curopt == MENU_SHOP_WEAPON5_2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON52_BEGIN, SHOP_WEAPON_SLOT52END, MENU_SHOP_WEAPON5_1, -1);
		else if(curopt == MENU_SHOP_WEAPON6_1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON61_BEGIN, SHOP_WEAPON_SLOT61END, -1, MENU_SHOP_WEAPON6_2);
		else if(curopt == MENU_SHOP_WEAPON6_2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON62_BEGIN, SHOP_WEAPON_SLOT62END, MENU_SHOP_WEAPON6_1, -1);
		else if(curopt == MENU_SHOP_WEAPON7)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON7_BEGIN, SHOP_WEAPON_SLOT7END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON8)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON8_BEGIN, SHOP_WEAPON_SLOT8END, -1, -1);
		else if(curopt == MENU_SHOP_AMMOSELECT) {
			if(HasLeftClicked(pnum)) {
				switch(boxid) {
					case 1:
						UpdateMenuPosition(MENU_SHOP_AMMO_1);
					break;
					case 2:
						UpdateMenuPosition(MENU_SHOP_AMMO_2);
					break;
					case 3:
						UpdateMenuPosition(MENU_SHOP_AMMO_3);
					break;
					case 4:
						UpdateMenuPosition(MENU_SHOP_AMMO_4);
					break;
					case 5:
						UpdateMenuPosition(MENU_SHOP_AMMO_SPECIAL1);
					break;
				}
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_SHOP_AMMO_1)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_CLIP, boxid, AMMOSLOT_CLIP_BEGIN, -1, MENU_SHOP_AMMO_1_2, false);
		else if(curopt == MENU_SHOP_AMMO_1_2)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_CLIP, boxid, AMMOSLOT_CLIP2_BEGIN, MENU_SHOP_AMMO_1, -1, false);
		else if(curopt == MENU_SHOP_AMMO_2)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_SHELL, boxid, AMMOSLOT_SHELL_BEGIN, -1, MENU_SHOP_AMMO_2_2, false);
		else if(curopt == MENU_SHOP_AMMO_2_2)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_SHELL, boxid, AMMOSLOT_SHELL2_BEGIN, MENU_SHOP_AMMO_2, -1, false);
		else if(curopt == MENU_SHOP_AMMO_3)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_ROCKET, boxid, AMMOSLOT_ROCKET_BEGIN, -1, -1, false);
		else if(curopt == MENU_SHOP_AMMO_4)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_CELL, boxid, AMMOSLOT_CELL_BEGIN, -1, -1, false);
		else if(curopt == MENU_SHOP_AMMO_SPECIAL1)
			HandleAmmoPageInput(pnum, -1, boxid, -1, -1, -1, true);
		else if(curopt == MENU_SHOP_ABILITY_1) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_ABILITY1_BEGIN, SHOP_ABILITY1_END, TRADE_BUY | TRADE_ABILITY, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
			else if(HasPressedRight(pnum))
				UpdateMenuPosition(MENU_SHOP_ABILITY_2);
		}
		else if(curopt == MENU_SHOP_ABILITY_2) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_ABILITY2_BEGIN, SHOP_LASTABILITY_INDEX, TRADE_BUY | TRADE_ABILITY, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP_ABILITY_1);
		}
		else if(curopt == MENU_SHOP_ARTIFACT) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_FIRSTARTI_INDEX, SHOP_LASTARTI_INDEX, TRADE_BUY | TRADE_ARTIFACT, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_SHOP_ARMOR1) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE && CanReplaceArmor(SHOP_ARMORPAGE1_BEGIN + boxid))
					ProcessTrade(pnum, boxid - 1, SHOP_ARMORPAGE1_BEGIN, SHOP_ARMORPAGE1_END, TRADE_BUY | TRADE_ARMOR | TRADE_ARMOR_REPLACE, false);
			}
			else if(HasRightClicked(pnum)) {
				if(boxid != MAINBOX_NONE) {
					// returns the popup id as negative number if something is wrong so if we are 0 or up we are good
					if((tpos = CanFillArmor(pnum)) >= 0)
						FillCurrentArmor(pnum, tpos);
					else
						ShowPopup(-tpos, false, 0);
				}
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
			else if(HasPressedRight(pnum))
				UpdateMenuPosition(MENU_SHOP_ARMOR2);
		}
		else if(curopt == MENU_SHOP_ARMOR2) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE && CanReplaceArmor(SHOP_ARMORPAGE2_BEGIN + boxid))
					ProcessTrade(pnum, boxid - 1, SHOP_ARMORPAGE2_BEGIN, SHOP_LASTARMOR_INDEX, TRADE_BUY | TRADE_ARMOR | TRADE_ARMOR_REPLACE, false);
			}
			else if(HasRightClicked(pnum)) {
				if(boxid != MAINBOX_NONE) {
					// returns the popup id as negative number if something is wrong so if we are 0 or up we are good
					if((tpos = CanFillArmor(pnum)) >= 0)
						FillCurrentArmor(pnum, tpos);
					else
						ShowPopup(-tpos, false, 0);
				}
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP_ARMOR1);
		}
		else if(curopt == MENU_SHOP_ACCOUNT) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_ACCOUNT_BEGIN, SHOP_ACCOUNT_END, TRADE_BUY | TRADE_ACCOUNT, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_RESEARCH) {
			if(HasLeftClicked(pnum)) {
				if(boxid == MBOX_1)
					UpdateMenuPosition(MENU_RESEARCH_BODY);
				if(boxid == MBOX_2)
					UpdateMenuPosition(MENU_RESEARCH_AMMO);
				if(boxid == MBOX_3)
					UpdateMenuPosition(MENU_RESEARCH_GUNS);
				if(boxid == MBOX_4)
					UpdateMenuPosition(MENU_RESEARCH_UTILITY);
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_RESEARCH_GUNS) {
			if(HasLeftClicked(pnum)) {
				if(boxid == MBOX_1)
					UpdateMenuPosition(MENU_RESEARCH_SLOTGUNS);
				if(boxid == MBOX_2)
					UpdateMenuPosition(MENU_RESEARCH_LUXURYGUNS);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_RESEARCH);
		}
		else if(curopt >= SHOP_RESPAGE_BEGIN && curopt <= SHOP_RESPAGE_END) {
			HandleResearchPageInput(pnum, curopt - SHOP_RESPAGE_BEGIN, boxid);
		}
		else if(curopt == MENU_ABILITY) {
			if(HasLeftClicked(pnum)) {
				if(boxid == MBOX_1) {
					SetInventory("DashDisabled", !CheckInventory("DashDisabled"));
					ACS_NamedExecuteAlways("DnD Toggle User Dash", 0);
					LocalAmbientSound("RPG/MenuChoose", 127);
				}
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_HELP) {
			if(HasLeftClicked(pnum)) {
				if(boxid >= MBOX_1 && boxid <= MENU_HELP_END - MENU_HELP_BEGIN + 1)
					temp = MENU_HELP_BEGIN + boxid - 1;
				else if(boxid > MENU_HELP_END - MENU_HELP_BEGIN + 1) {
					GiveInventory("SetMapInfo", 1);
					LocalAmbientSound("RPG/MenuChoose", 127);
					temp = -1;
				}
				if(boxid != MAINBOX_NONE && temp != -1)
					UpdateMenuPosition(temp);
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt >= MENU_HELP_BEGIN && curopt <= MENU_HELP_END) {
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_HELP);
			if(curopt == MENU_HELP_MMODS && HasLeftClicked(pnum) && boxid >= MBOX_1)
				UpdateMenuPosition(MENU_HELP_MMODS_WEAKNESS + boxid - 1);
		}
		else if(curopt >= MENU_MMOD_HELP_BEGIN && curopt <= MENU_MMOD_HELP_END) {
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_HELP_MMODS);
		}
		
		ClearPlayerInput(pnum, true);
		
		Delay(const:DND_MENU_INPUTDELAYTICS);
		MenuInputData[pnum][DND_MENUINPUT_DELAY] = 0;
	}
}

Script "DND Menu Cleanup" (void) CLIENTSIDE {
	DeleteText(RPGMENUID);
	DeleteText(RPGMENUBACKGROUNDID);
	DeleteText(RPGMENULARRID);
	DeleteText(RPGMENURETARRID);
	DeleteText(RPGMENURARRID);
	DeleteText(RPGMENUHELPID);
	DeleteText(RPGMENUNAMEID);
	DeleteText(RPGMENUHELPCORNERID);
	DeleteText(RPGMENUHELPCORNERIDMAIN);
	DeleteText(RPGMENUPAGEID);
	DeleteText(RPGMENUPAGEID - 1);
	DeleteText(RPGMENUHIGHLIGHTID);
	DeleteText(PUNISHERPERKID1);
	DeleteText(PUNISHERPERKID2);
	
	DeleteTextRange(RPGMENUCURSORID, RPGMENUINVENTORYID);
	DeleteTextRange(RPGMENUINFOID, RPGMENUWEAPONPANELID);
	DeleteTextRange(RPGMENUITEMIDEND, RPGMENUITEMID);

	// login screen for hardcore
	DeleteText(DND_HARDCORE_SCREENID);
	CleanInventoryInfo();
}

Script "DnD Toggle User Dash" (void) CLIENTSIDE {
	SetCVar("dnd_dashstatus", !GetCVar("dnd_dashstatus"));
}

Script "DnD Trade Cancel Button" (int tradee) {
	Delay(4);
	CancelTradeRoutine(tradee);
}

Script "DnD Trade Countdown" (int p1, int p2) CLIENTSIDE {
	if(ConsolePlayerNumber() != p1)
		Terminate;
	// Handle timer display
	int lim = 7 * Clamp_Between(GetCVar("dnd_trade_timer"), 1, 10);
	int count = 0;
	
	SetFont("BIGFONT");
	while(count < lim && CheckActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed") && CheckActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed")) {
		SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
		HudMessage(s:"\c[W3]", d:(lim - count + 6) / 7; HUDMSG_PLAIN, RPGMENUTRADECOUNTDOWNID, -1, 110.4, 160.0, 0.0, 0.0);
		SetHudSize(HUDMAX_X * 3 / 2, HUDMAX_Y * 3 / 2, 1);
		Delay(5);
		++count;
	}
	
	DeleteText(RPGMENUTRADECOUNTDOWNID);
}

// p1 is us
Script "DnD Trade Counter" (int p1, int p2) {
	int lim = 7 * Clamp_Between(GetCVar("dnd_trade_timer"), 1, 10);
	int count = 0;
	while(count < lim && CheckActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed") && CheckActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed")) {
		Delay(5);
		++count;
	}
	if(count == lim) {
		TransferTradeItems(p1, p2);
		TransferTradeItems(p2, p1);
		ACS_NamedExecuteAlways("DnD Save Player Inventory", 0, p1 | (CheckActorInventory(p1 + P_TIDSTART, "DnD_CharacterID") << 16), p2 | (CheckActorInventory(p2 + P_TIDSTART, "DnD_CharacterID") << 16));
		// take away confirmation stuff
		TakeActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed", 1);
		TakeActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed", 1);
		// finish trade view related stuff
		GiveActorInventory(p1 + P_TIDSTART, "DnD_Trade_Cooldown", 1);
		GiveActorInventory(p2 + P_TIDSTART, "DnD_Trade_Cooldown", 1);
		CancelTrade(p1);
		CancelTrade(p2);
	}
}

Script "DnD Trade Window" (int pnum, int giveWindow) {
	SetActivator(pnum + P_TIDSTART);
	
	if(giveWindow)
		GiveInventory("DnD_TradeAcceptWindow", 1);
	
	int lim = 5 * Clamp_Between(GetCVar("dnd_trade_window"), 5, 20);
	for(int i = 0; i < lim && !CheckInventory("InTradeView"); ++i)
		Delay(7);
	
	if(!CheckInventory("InTradeView")) {
		BreakTradesBetween(pnum);
		TakeInventory("DnD_TradeAcceptWindow", 1);
	}
}

Script "DnD Menu Popup" (int pnum, int isSell, int activebox) {
	SetActivator((pnum & 0xFFFF) + P_TIDSTART);
	if(isSell) {
		GiveInventory("DnD_SellConfirm", 1);
		TakeInventory("DnD_ShowPopup", 1);
		TakeInventory("DnD_PopupError", 1);
		GiveInventory("DnD_PopupSell", 1);
		GiveInventory("DnD_ShowSellPopup", 1);
		SetInventory("DnD_PopupID", activebox);
		SetInventory("ActivePopupBox", pnum >> 16);
	}
	else {
		GiveInventory("DnD_ShowPopup", 1);
		GiveInventory("DnD_PopupError", 1);
		TakeInventory("DnD_PopupSell", 1);
		TakeInventory("DnD_ShowSellPopup", 1);
		SetInventory("ActivePopupBox", 0);
		SetInventory("DnD_PopupID", activebox);
	}
	
	ACS_NamedExecuteAlways("DnD Menu Popup Show", 0, pnum >> 16, pnum & 0xFFFF, isSell);
}

Script "DnD Menu Popup Show" (int id, int pnum, int isSell) CLIENTSIDE {
	// 0 for buy being possible, 2 if credits was not enough, 1 if credits was enough but you are maxed on the item and 3 if neither were satisfied 4 if item can't be sold
	SetActivator(pnum + P_TIDSTART);
	
	if(ConsolePlayerNumber() != pnum)
		Terminate;
	
	int popuptype = POPUP_ERROR;
	if(isSell)
		popuptype = POPUP_SELL;

	SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
	SetFont("DND_ERR");
	if(!isSell)
		HudMessage(s:"A"; HUDMSG_FADEOUT, RPGMENUPOPUPID, -1, 216.1, 128.1, 1.0, 1.0);
	else
		HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUPOPUPID, -1, 216.1, 128.1, 0.0);
	SetFont("SMALLFONT");
	str toshow = "", title = "";
	if(popuptype == POPUP_ERROR) {
		title = "DND_MENU_ERROR";
		// id is minimum 1
		toshow = GetPopupText(id);
		LocalAmbientSound("RPG/MenuError", 127);
	}
	else if(popuptype == POPUP_SELL) {
		title = "DND_MENU_CONFIRM";
		toshow = StrParam(l:"DND_MENU_SELLCONFIRM", s:"\n\cd", s:ShopItemNames[CheckInventory("DnD_PopupID")][SHOPNAME_TAG], s:"\c- ?");
	}

	if(!isSell) {
		HudMessage(s:"\c[Q2]", l:title; HUDMSG_FADEOUT, RPGMENUPOPUPID - 1, -1, 316.4, 136.1, 1.0, 1.0);
		HudMessage(l:toshow; HUDMSG_FADEOUT, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 160.1, 1.0, 1.0);
	}
	else {
		HudMessage(s:"\c[Q2]", l:title; HUDMSG_PLAIN, RPGMENUPOPUPID - 1, -1, 316.4, 136.1, 0.0);
		HudMessage(s:toshow; HUDMSG_PLAIN, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 160.1, 0.0);
	}
}

Script "DnD Menu Sell Popup Clear" (void) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;
	HudMessage(s:""; HUDMSG_PLAIN, RPGMENUPOPUPID, -1, 316.4, 136.1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, RPGMENUPOPUPID - 1, -1, 316.4, 136.1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 160.1, 1.0);
}