#library "DND_MENU"
#include "zcommon.h"

#nocompact

#include "DnD_MenuFuncs.h"

/*
- Main idea here is simple. There are two main scripts: One draws the menu CLIENTSIDE, the other receives button info and stuff from client and vital info from server.
- There are A TON of helper functions to formulate things. Getters are all over the place.
- Everything in the shop has an ID associated with it.
- Everything is flexible and can be customized very easily (!!!). The essential code for input listeners etc are provided, and can be changed at will depending on the menu pages to achieve
different behavior.

============= ADDING NEW WEAPONS TO SHOP =============

1) Add it to DnD_Weapons.h
2) Add constant to DnD_MenuConstants.h, modify begin/last macros if position of them has changed
3) Add price, shop menu labels, shop menu helper text, research requirements (if any) and WeaponDrawInfo to DnD_MenuTables.h
4) Add weapon tip to DnD.h
5) Increment box count of whichever slot page it belongs to in DnD_MenuFuncs => LoadPane function
6) Done!
*/

// Shows the menu
Script 900 (int opt, int showInv) NET {
	int pnum = PlayerNumber();
	if(StatListOpened[pnum]) {
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		TakeInventory("P_Frozen", 1);
		StatListOpened[pnum] = 0;
		SetInventory("ShowingMenu", 0);
		SetInventory("MenuOption", 5);
		SetInventory("DnD_PlayerItemIndex", 0);
		SetInventory("DnD_PlayerPrevItemIndex", 0);
		SetInventory("DnD_PopupId", 0);
		SetInventory("DnD_SelectedCharmBox", 0);
		SetInventory("DnD_ItemSelectTemp", 0);
		SetInventory("DnD_SelectedInventoryBox", 0);
		SetInventory("DnD_UsedTwoItemRequirementMaterial", 0);
		SetInventory("DnD_Crafting_MaterialPage", 0);
		SetInventory("DnD_Crafting_ItemPage", 0);
		SetInventory("DnD_Trade_Confirmed", 0);
		SetInventory("DnD_TradeSpaceFit", 0);
		TakeInventory("DnD_InventoryView", 1);
		TakeInventory("DnD_StashView", 1);
		TakeInventory("InTradeView", 1);
		TakeInventory("DnD_ShowPopup", 1);
		TakeInventory("DnD_ShowSellPopup", 1);
		TakeInventory("DnD_SellConfirm", 1);
		ClearPlayerInput(pnum, true);
		DecideAccessories();
		//SetInventory("MenuPosY", 5);
		LocalAmbientSound("RPG/MenuClose", 127);
		
		int tradee = GetTradee();
		// cancel out of a trade if there is one
		if(tradee != -1) {
			CancelTradeRoutine(tradee);
		}
	}
	else {
		// a little extra check for singleplayer case
		if(CheckInventory("DnD_IntermissionState"))
			Terminate;
		
		if
		(
			GameType() == GAME_SINGLE_PLAYER ||
			(!PlayerIsSpectator(pnum) && GetGameModeState() == GAMESTATE_INPROGRESS && !CheckInventory("CanLoad") && !CheckInventory("ParsingData"))
		)
		{
			if(GameType() != GAME_SINGLE_PLAYER && CheckInventory("DnD_SyncMe")) {
				// sync all player data the first time they open it
				TakeInventory("DnD_SyncMe", 1);
				ACS_NamedExecuteAlways("DnD Force Sync Player Global Data", 0);
			}
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			GiveInventory("P_Frozen", 1);
			StatListOpened[pnum] = 1;

			if(!opt)
				SetInventory("MenuOption", MENU_MAIN);
			else
				SetInventory("MenuOption", opt);

			if(showInv)
				GiveInventory("DnD_InventoryView", 1);

			SetInventory("ShowingMenu", 1);
			TakeInventory("ShowingPrompt", 1);
			LocalAmbientSound("RPG/MenuOpen", 127);
			ClearPlayerInput(pnum, true);
			DeleteTextRange(RPGMENUCURSORID, RPGMENUINVENTORYID);
			FlushStack(pnum);

			ResetTransmutingData(pnum);
			
			ACS_NamedExecuteAlways("DnD Menu Input Loop", 0);
			ACS_NamedExecuteAlways("DND Menu Icon Spawner", 0);
		}
		else {
			SetHudSize(800, 600, 1);
			HudMessage(l:"DND_MENU_NOTINGAME"; HUDMSG_FADEINOUT, MENUUSEID, CR_GOLD, 400.4, 2.1, 4.0, 1.0, 1.0);
		}
	}
}

Script "DnD Transmute Orb Sync" (int pnum, int id, int val) CLIENTSIDE {
	if(ConsolePlayerNumber() != pnum)
		Terminate;

	TransmuteOrbs[pnum][id] = val;
	SetResultValue(0);
}

Script "DnD Menu Reset on Enter" ENTER {
	ResetShopStock(PlayerNumber());
	ACS_NamedExecuteAlways("DnD Menu Reset on Enter CS", 0);
}

// So database can run this
Script "DnD Menu Reset Forced" (void) {
	ResetShopStock(PlayerNumber());
	ACS_NamedExecuteAlways("DnD Menu Reset on Enter CS", 0);
}

Script "DnD Menu Reset on Enter CS" (void) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;
	// this is needed to sync them between the client & server
	ResetShopStock(PlayerNumber());
}

Script "DnD Sync Shop Stock" (int pnum, int itemid, int val) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;
	ShopStockRemaining[pnum][itemid] = val;
}

Script "DND On Disconnect Menu Cleanup" (int pnum) DISCONNECT CLIENTSIDE {
	if(ConsolePlayerNumber() != pnum)
		Terminate;
		
	// clear mugshot
	DeleteText(PLAYER_MUGSHOTID);
		
	ACS_NamedExecuteAlways("DND Menu Cleanup", 0, pnum);
}

Script "DND Menu Icon Spawner" (void) CLIENTSIDE {
	// dont draw it for the player who is on the menu
	if(ConsolePlayerNumber() == PlayerNumber())
		Terminate;
		
	int tid = DND_MENUFLOATYICON_TID + PlayerNumber();
	SpawnForced("DnD_MenuPlayerIcon", GetActorX(0), GetActorY(0), GetActorZ(0) + 64.0, tid);
	while(CheckInventory("ShowingMenu")) {
		SetActorPosition(tid, GetActorX(0), GetActorY(0), GetActorZ(0) + 64.0, 0);
		Delay(const:1);
	}
	Thing_Remove(tid);
}

// this is needed in case user crashes or abruptly leaves
Script "DnD Menu Icon Force Remove" (int tid) CLIENTSIDE {
	Thing_Remove(tid);
}

// the loop for things that need to be redrawn constantly or input handling
Script "DnD Menu Input Loop" (void) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;

	// mainboxid was MAINBOX_NONE + 1
	bool redraw = false;
	int animcounter = 0, framecounter = 0, pnum = PlayerNumber();
	int i = 0;
	int curopt, curopt_prev = MENU_NULL;
	int boxid = MAINBOX_NONE + 1, boxid_prev = MAINBOX_NONE, mainboxid = MAINBOX_NONE, mainboxid_prev = MAINBOX_NONE;
	auto CurrentPane = GetPane();
	ResetPane(CurrentPane);
	auto InventoryPane = GetInventoryPane();
	
	// initialize cursor data
	PlayerCursorData.itemHovered = -1;
	PlayerCursorData.itemDragged = -1;
	PlayerCursorData.itemClicked = -1;
	PlayerCursorData.posx = HUDMAX_XF / 2;
	PlayerCursorData.posy = HUDMAX_YF / 2;
	
	while(CheckInventory("ShowingMenu")) {
		redraw = false;
		// Load cursor stuff
		PlayerCursorData.posx = GetCursorPos(GetPlayerInput(ConsolePlayerNumber(), INPUT_YAW), MOUSE_INPUT_X);
		PlayerCursorData.posy = GetCursorPos(GetPlayerInput(ConsolePlayerNumber(), INPUT_PITCH), MOUSE_INPUT_Y);
		curopt = CheckInventory("MenuOption");
		
		// page changed
		if(curopt != curopt_prev) {
			ResetPane(CurrentPane);
			LoadPane(CurrentPane, curopt);
			ScrollPos.x = 0;
			SetInventory("MenuPosX", 0);
			SetInventory("DnD_PlayerItemIndex", 0);
			SetInventory("DnD_PlayerPrevItemIndex", 0);
			PlayerStatText = ""; // reset stat block text
			PlayerCursorData.hoverNeedsReset = true;
			redraw = true;

			if(IsWeaponPage(curopt_prev))
				ClearInfoPanel();
			else if(IsAmmoPage(curopt_prev) || IsArtifactPage(curopt_prev))
				DeleteText(RPGMENUHELPCORNERID);
		}
			
		curopt_prev = curopt;
		
		// boxes won't be updated until you finish your sell
		if(CheckInventory("DnD_SellConfirm")) {
			if(CheckInventory("ActivePopupBox"))
				boxid = CheckInventory("ActivePopupBox");
			mainboxid = MAINBOX_NONE;
		}
		else if(curopt < MENU_LOAD_CRAFTING || curopt > MENU_LOAD_CRAFTING_LAST) {
			if(!CheckInventory("DnD_InventoryView") && !CheckInventory("InTradeView") && !CheckInventory("DnD_StashView")) {
				boxid = GetTriggeredBoxOnPane(CurrentPane, PlayerCursorData.posx, PlayerCursorData.posy);
				mainboxid = GetTriggeredBoxOnMainPane(PlayerCursorData.posx, PlayerCursorData.posy);
			}
			else {
				if(CheckInventory("DnD_InventoryView"))
					boxid = GetTriggeredBoxOnInventoryPane(InventoryPane, PlayerCursorData.posx, PlayerCursorData.posy);
				else if(CheckInventory("InTradeView"))
					boxid = GetTriggeredBoxOnTradePane(InventoryPane, PlayerCursorData.posx, PlayerCursorData.posy);
				else if(CheckInventory("DnD_StashView")) // I used the trade pane variable to hold the stash content
					boxid = GetTriggeredBoxOnStashPane(InventoryPane, PlayerCursorData.posx, PlayerCursorData.posy);
			}
		}
		else {
			boxid = GetTriggeredBoxOnCraftingPane(InventoryPane, PlayerCursorData.posx, PlayerCursorData.posy);
			if(CheckInventory("DnD_InventoryView") || CheckInventory("InTradeView") || CheckInventory("DnD_StashView"))
				mainboxid = MAINBOX_NONE;
		}
		
		// play sound if box changed
		if(boxid != boxid_prev) {
			if(boxid != MAINBOX_NONE && IsBoxChangeException(curopt, boxid)) {
				boxid = MAINBOX_NONE;
				boxid_prev = MAINBOX_NONE;
			}
			else {
				if(boxid != MAINBOX_NONE) {
					ScrollPos.x = 0;
					if(!CheckInventory("DnD_InventoryView") && !CheckInventory("InTradeView") && !CheckInventory("DnD_StashView"))
						LocalAmbientSound("RPG/MenuMove", 127);
				}
				redraw = true;
			}
		}
		
		if(mainboxid != mainboxid_prev) {
			if(mainboxid != MAINBOX_NONE)
				LocalAmbientSound("RPG/MenuMove", 127);
			redraw = true;
		}
		
		// clean input buffer
		SetInventory("MenuInput", 0);
		// receives MenuInput
		GetInputOnMenuPage(curopt);
		i = CheckInventory("MenuInput");
		
		if(i) {
			// server gets a few extra info in boxid
			if(!MenuInputData[pnum][DND_MENUINPUT_PAYLOAD])
				MenuInputData[pnum][DND_MENUINPUT_PAYLOAD] = (boxid | MenuInputData[pnum][DND_MENUINPUT_PLAYERCRAFTCLICK]);
			i <<= 16;
			i |= PlayerNumber();
			//Log(s:"trying to send prev item ", d:MenuInputData[pnum][DND_MENUINPUT_PAYLOAD] >> 16, s: " vs ", d:MenuInputData[pnum][DND_MENUINPUT_PLAYERCRAFTCLICK] >> 16);
			NamedRequestScriptPuke("DND Server Box Receive", i, MenuInputData[pnum][DND_MENUINPUT_PAYLOAD], mainboxid | (CheckInventory("MenuPosX") << 16));
			redraw = true;
		}
		
		// update prev with new ones
		boxid_prev = boxid;
		mainboxid_prev = mainboxid;
		
		// clickable main buttons
		HandleClickableButtonFrames();
		
		redraw |= HandlePageListening(curopt, boxid);

		SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
		DrawCursor();
		
		// hovered on or things that are otherwise redrawn over and over
		if(PlayerCursorData.itemClicked != -1 && CheckInventory("DnD_UsedTwoItemRequirementMaterial") - 1 != PlayerCursorData.itemClicked) {
			if(PlayerCursorData.clickNeedsReset || CheckInventory("DnD_CursorDataClearRequest"))
				ResetCursorClickData();
			else {
				// don't draw twice
				if(PlayerCursorData.itemHovered == PlayerCursorData.itemClicked)
					ResetCursorHoverData();
			
				// insta refresh
				CleanInventoryInfo(RPGMENUCLICKEDID);
				DrawCraftingInventoryInfo(
					pnum,
					RPGMENUCLICKEDID,
					PlayerCursorData.itemClickedPos.x,
					PlayerCursorData.itemClickedPos.y,
					PlayerCursorData.itemClicked,
					PlayerCursorData.itemClickedType,
					PlayerCursorData.itemClickedSource
				);
			}
		}
		
		if(PlayerCursorData.itemHovered != -1/* && (PlayerCursorData.itemClicked == -1 || CheckInventory("DnD_UsedTwoItemRequirementMaterial"))*/) {
			if(boxid == MAINBOX_NONE || PlayerCursorData.hoverNeedsReset)
				ResetCursorHoverData();
			else {
				if(PlayerCursorData.itemHoveredDim.x)
					DrawInventoryInfo(PlayerCursorData.owner_pnum);
				else {
					DrawCraftingInventoryInfo(
						PlayerCursorData.owner_pnum,
						RPGMENUINVENTORYID,
						PlayerCursorData.posx,
						PlayerCursorData.posy,
						PlayerCursorData.itemHovered,
						PlayerCursorData.itemHoveredType,
						PlayerCursorData.itemHoveredSource
					);
				}
			}
		}
		else if(PlayerCursorData.hoverNeedsReset)
			ResetCursorHoverData();
			
		if(PlayerCursorData.itemDragged != -1) {
			DrawDraggedItem(pnum);
			redraw = true;
		}
		
		Delay(const:1);
		
		// Side bar options with animations -- these require framecounter so they can be checked every tic
		// this also draws "Stats" and "Perks" text, it looks tidier in here this way
		DrawHighLightBar(mainboxid, framecounter);

		// Handle panel on the left
		HandleItemInfoPanel(curopt, boxid, redraw);
		
		// draws items that need frequent redraw
		DrawFrequentRedrawItems(curopt, pnum);
		
		// animation things
		animcounter++;
		if(animcounter == 17) {
			animcounter = 0;
			framecounter = (++framecounter) % 3;
		}
		
		if(CheckInventory("DND_ACK")) {
			SetInventory("MenuInput", 0);
			//Log(s:"reset input data");
			MenuInputData[pnum][DND_MENUINPUT_PAYLOAD] = 0;
			MenuInputData[pnum][DND_MENUINPUT_PLAYERCRAFTCLICK] = 0;
			
			// this part is important because due to how the system is set up once the ACK is received, we may not update for next frames
			// this causes the problem of "spam clicking" multiple stack craft materials and the inputs being reset above, with a redraw we
			// force a recalculation basically so we obtain the values once again
			redraw = true;
		}
		//////////////////////////////////////////
		// MENU DRAWING ROUTINE FROM HERE BELOW //
		//////////////////////////////////////////
		if(redraw || CheckInventory("DnD_RefreshPane") || CheckInventory("DnD_RefreshRequest")) {
			str toshow = "";
			int j = 0, k = 0, temp;
			
			SetHudSize(384, 200, 1);
			/*SetFont("DND_STAT");
			HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUID, -1, 192.0, 100.0, 0.0);*/
			//DeleteText(RPGMENUID);
			SetFont("DND_STAB");
			HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUBACKGROUNDID, -1, 192.0, 100.0, 0.0);
			// the 3 buttons at bottom
			DrawClickableButton("LARR", mainboxid, MAINBOX_LARR, RPGMENULARRID, 218.0, 184.0, "LARRO", "LARR_P");
			DrawClickableButton("RETARR", mainboxid, MAINBOX_RET, RPGMENURETARRID, 251.0, 184.0, "RETARRO", "RETARR_P");
			DrawClickableButton("RARR", mainboxid, MAINBOX_RARR, RPGMENURARRID, 284.0, 184.0, "RARRO", "RARR_P");
			
			// main drawing of texts, labels, icons etc.
			SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
			SetFont("SMALLFONT");
			DeleteTextRange(RPGMENUITEMIDEND, RPGMENUITEMSUBID);
			DeleteTextRange(RPGMENUPAGEID - 1, RPGMENUPAGEID);
			
			if(PlayerCursorData.itemDragged != -1 || !CheckInventory("DnD_UsedTwoItemRequirementMaterial"))
				DeleteText(RPGMENUCURSORID + 1); // dragged item
			
			if(CheckInventory("DnD_InventoryView")) {
				LoadInventoryView(InventoryPane);
				HandleInventoryView(boxid);
			}
			else if(CheckInventory("DnD_StashView")) {
				LoadStashView(InventoryPane);
				HandleStashView(boxid);
			}
			else if(CheckInventory("InTradeView")) {
				LoadTradeView(InventoryPane);
			}
			
			if(CheckInventory("DnD_CleanInventoryRequest")) {
				DeleteTextRange(RPGMENUPOPUPID + 1, RPGMENUINVENTORYID);
				CleanMaterialInfo(true);
				CleanInventoryInfo();
				TakeInventory("DnD_CleanInventoryRequest", 1);
			}
			else if(CheckInventory("DnD_CleanCraftingRequest")) {
				CleanCraftingInfo();
				CleanMaterialInfo(true);
				// dont uncomment this from here... for some reason
				//TakeInventory("DnD_CleanCraftingRequest", 1);
			}
			else if(CheckInventory("DnD_CleanTradeviewRequest")) {
				CleanTradeInfo();
				TakeInventory("DnD_CleanTradeviewRequest", 1);
			}

			SetFont("SMALLFONT");
			if(curopt == MENU_STAT1) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_STATS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				SetHudClipRect(192, 56, 256, 144, 256);
				HudMessage(s:"\c[Y5]", l:"DND_STAT18", s:": \c-", d:CheckInventory("Level"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 192.1, 64.0, 0.0, 0.0);
				HudMessage(s:"\c[Y5]", l:"DND_STAT16", s:": \c-", d:CheckInventory("Exp"), s:" / ", d:LevelCurve[CheckInventory("Level") - 1]; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 80.0, 0.0, 0.0);
				HudMessage(s:"\c[Y5]", l:"DND_STAT19", s:": \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, 96.0, 0.0, 0.0);
				HudMessage(s:"\c[Y5]", l:"DND_MENU_BUDGET", s:": \c-$", d:CheckInventory("Budget"), s:"k"; HUDMSG_PLAIN, RPGMENUITEMID - 23, CR_WHITE, 192.1, 112.0, 0.0, 0.0);
				HudMessage(s:"\c[Y5]", l:"DND_ATTRIBUTEPTS", s:": \c-", d:CheckInventory("AttributePoint"); HUDMSG_PLAIN, RPGMENUITEMID - 10, CR_WHITE, 192.1, 128.0, 0.0, 0.0);
				SetHudClipRect(0, 0, 0, 0, 0);
				
				DrawToggledLabel("STR", DND_NOLOOKUP, -1, boxid, MBOX_1, RPGMENUITEMID - 3, "\c[Y5]", "\c[B1]", 192.1, 144.0);
				DrawToggledLabel("DEX", DND_NOLOOKUP, -1, boxid, MBOX_2, RPGMENUITEMID - 4, "\c[Y5]", "\c[B1]", 192.1, 160.0);
				DrawToggledLabel("INT", DND_NOLOOKUP, -1, boxid, MBOX_3, RPGMENUITEMID - 5, "\c[Y5]", "\c[B1]", 192.1, 176.0);
				// draw values seperately so they align
				HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Strength"); HUDMSG_PLAIN, RPGMENUITEMID - 11, CR_WHITE, 256.1, 144.0, 0.0);
				HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Dexterity"); HUDMSG_PLAIN, RPGMENUITEMID - 12, CR_WHITE, 256.1, 160.0, 0.0);
				HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Intellect"); HUDMSG_PLAIN, RPGMENUITEMID - 13, CR_WHITE, 256.1, 176.0, 0.0);
				// draw bonus stat acquired
				HudMessage(s:"(+ \cd", d:GetPlayerAttributeValue(pnum, INV_STAT_STRENGTH), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 14, CR_WHITE, 320.1, 144.0, 0.0);
				HudMessage(s:"(+ \cd", d:GetPlayerAttributeValue(pnum, INV_STAT_DEXTERITY), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 15, CR_WHITE, 320.1, 160.0, 0.0);
				HudMessage(s:"(+ \cd", d:GetPlayerAttributeValue(pnum, INV_STAT_INTELLECT), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 16, CR_WHITE, 320.1, 176.0, 0.0);
				
				if(boxid != MAINBOX_NONE && boxid <= MBOX_3) {
					SetHudClipRect(184, 208, 256, 64, 256);
					HudMessage(s:"\cd*\c- ", l:GetAttributeLabel(boxid - 1), s:"\n", l:GetAttributeText(boxid - 1); HUDMSG_PLAIN, RPGMENUITEMID - 40, CR_WHITE, 184.1, 232.1, 0.0, 0.0);
					SetHudClipRect(0, 0, 0, 0, 0);
				}
				
				DrawBoxText("=>", DND_NOLOOKUP, boxid, MBOX_7, RPGMENUPAGEID, 436.1, 44.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_STAT2) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_GAINS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);

				DrawBoxText("DND_MENU_GAIN_OFFENSE", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_GAIN_DEFENSE", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_GAIN_UTILITY", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_GAIN_QUEST", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");

				DrawBoxText("<=", DND_NOLOOKUP, boxid, MBOX_5, RPGMENUPAGEID - 1, 184.1, 44.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_STAT2_OFFENSE1) {
				HudMessage(s:"--- ", l:"DND_MENU_GAIN_OFFENSE", s:" #1 ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				DrawPlayerStats(pnum, DRAW_STAT_OFFENSE1);

				DrawBoxText("<=", DND_NOLOOKUP, boxid, MBOX_1, RPGMENUPAGEID - 1, 184.1, 44.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("=>", DND_NOLOOKUP, boxid, MBOX_2, RPGMENUPAGEID, 436.1, 44.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_STAT2_OFFENSE2) {
				HudMessage(s:"--- ", l:"DND_MENU_GAIN_OFFENSE", s:" #2 ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				DrawPlayerStats(pnum, DRAW_STAT_OFFENSE2);

				DrawBoxText("<=", DND_NOLOOKUP, boxid, MBOX_1, RPGMENUPAGEID - 1, 184.1, 44.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_STAT2_DEFENSE) {
				HudMessage(s:"--- ", l:"DND_MENU_GAIN_DEFENSE", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				DrawPlayerStats(pnum, DRAW_STAT_DEFENSE);

				DrawBoxText("<=", DND_NOLOOKUP, boxid, MBOX_1, RPGMENUPAGEID - 1, 184.1, 44.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_STAT2_UTILITY) {
				HudMessage(s:"--- ", l:"DND_MENU_GAIN_UTILITY", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				DrawPlayerStats(pnum, DRAW_STAT_UTILITY);

				DrawBoxText("<=", DND_NOLOOKUP, boxid, MBOX_1, RPGMENUPAGEID - 1, 184.1, 44.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_STAT2_QUESTBONUSES) {
				toshow = "";
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_QUESTBON", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				for(i = 0; i < MAX_QUESTS; ++i) {
					if(IsQuestComplete(0, i))
						toshow = StrParam(s:toshow, s:"\cf*\c- ", l:GetQuestLabel(i, QUEST_REW), s:"\n\n");
				}
				SetHudClipRect(192, 52, 256, 196, 256); // 48 because 64 is begin, text one line len is 16, 48 is max allowed lines, 16 x 3.
				HudMessage(s:toshow; HUDMSG_PLAIN, RPGMENUITEMID - 8, CR_WHITE, 192.1, 64.1 + 2.0 * ScrollPos.x, 0.0, 0.0);
				SetHudClipRect(0, 0, 0, 0, 0);
			
				DrawBoxText("<=", DND_NOLOOKUP, boxid, MBOX_1, RPGMENUPAGEID - 1, 184.1, 44.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_PERK) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_PERKS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
				
				HudMessage(s:"\c[Y5]", l:"DND_MENU_PERKSAVAIL", s:": \c-", d:CheckInventory("PerkPoint"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 312.0, 64.0, 0.0, 0.0);
				
				for(i = 0; i < DND_PERKS; ++i)
					DrawToggledLabel(GetStatLabel(DND_PERK_BEGIN + i), DND_LANGUAGE_LOOKUP, GetStat(DND_PERK_BEGIN + i), boxid, MBOX_1 + i, RPGMENUITEMID - 1 - i, "\c[Y5]", "\c[B1]", 192.1, 80.0 + i * 16.0);
			
				DrawPerkText(boxid);
			}
			else if(curopt == MENU_LOAD) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_LOADOUT", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				DrawBoxText("DND_MENU_ITEMS", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_INVENTORY", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_STASH", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_EQUIPMENTS", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_CRAFTING", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 5, 192.1, 160.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_ACCESSORIES", DND_LANGUAGE_LOOKUP, boxid, MBOX_6, RPGMENUITEMID - 6, 192.1, 176.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_TRADING", DND_LANGUAGE_LOOKUP, boxid, MBOX_7, RPGMENUITEMID - 7, 192.1, 192.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_LOAD1) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_ITEMS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
				j = 0;
				for(i = SHOP_FIRSTARTI1_INDEX; i <= SHOP_LASTDRAWNARTI_INDEX; ++i) {
					k = CheckInventory(GetItemName(i));
					if(k) {
						HudMessage(s:"\c[Y5]", l:GetArtifactTag(i - SHOP_FIRSTARTI1_INDEX), s:": \cj", d:k; HUDMSG_PLAIN, RPGMENUITEMID - 1 - i + SHOP_FIRSTARTI1_INDEX, CR_WHITE, 184.1, 64.0 + j, 0.0, 0.0);
						j += 16.0;
					}
				}
			}
			else if(curopt == MENU_LOAD_INVENTORY) {
				HudMessage(s:"--- ", l:"DND_INVENTORY", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			}
			else if(curopt == MENU_LOAD_STASH) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_STASH", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			}
			else if(curopt == MENU_LOAD_CHARM) {
				DeleteText(RPGMENUHELPID);

				if(boxid == MAINBOX_NONE || (boxid == MBOX_8 && !CheckInventory("DnD_InventoryView")))
					CleanInventoryInfo();
				
				// charms
				DrawCharmBox(DND_CHARM_SMALL, boxid, SMALLCHARM_INDEX1 + 1, 208.4, 208.0);
				DrawCharmBox(DND_CHARM_SMALL, boxid, SMALLCHARM_INDEX2 + 1, 264.4, 208.0);
				DrawCharmBox(DND_CHARM_SMALL, boxid, SMALLCHARM_INDEX3 + 1, 208.4, 256.0);
				DrawCharmBox(DND_CHARM_SMALL, boxid, SMALLCHARM_INDEX4 + 1, 264.4, 256.0);
				DrawCharmBox(DND_CHARM_MEDIUM, boxid, MEDIUMCHARM_INDEX1 + 1, 208.4, 154.0);
				DrawCharmBox(DND_CHARM_MEDIUM, boxid, MEDIUMCHARM_INDEX2 + 1, 264.4, 154.0);
				DrawCharmBox(DND_CHARM_LARGE, boxid, LARGECHARM_INDEX + 1, 236.4, 80.0);

				// armors
				DrawArmorBox(boxid, HELM_INDEX + 1, 394.4, 88.0, DND_ITEM_HELM);
				DrawArmorBox(boxid, BODY_ARMOR_INDEX + 1, 394.4, 152.0, DND_ITEM_BODYARMOR);
				DrawArmorBox(boxid, POWERCORE_INDEX + 1, 338.4, 152.0, DND_ITEM_POWERCORE);
				DrawArmorBox(boxid, BOOT_INDEX + 1, 394.4, 216.0, DND_ITEM_BOOT);

				DrawInventoryExploreIcon(boxid, DND_INV_ICON_BOXID, RPGMENUITEMID - 26, 432.4, 264.0);

				HudMessage(s:"\c[Y5]", l:"DND_MENU_EQUIPLEFT"; HUDMSG_PLAIN, RPGMENUITEMID - 28, CR_CYAN, 236.4, 32.0, 0.0, 0.0);
				HudMessage(s:"\c[Y5]", l:"DND_MENU_EQUIPRIGHT"; HUDMSG_PLAIN, RPGMENUITEMID - 29, CR_CYAN, 396.4, 32.0, 0.0, 0.0);
			}
			else if(curopt == MENU_LOAD_CRAFTING || curopt == MENU_LOAD_CRAFTING_INVENTORY || curopt == MENU_LOAD_CRAFTING_WEAPON || curopt == MENU_LOAD_CRAFTING_TRANSMUTING) {
				SetHudSize(384, 200, 1);
				SetFont("CRFTVW");
				HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUID, CR_CYAN, 176.0, 100.0, 0.0, 0.0);
				SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
				SetFont("SMALLFONT");
				HandleCraftingView(pnum, InventoryPane, boxid, curopt, k);
				SetFont("SMALLFONT");
			}
			else if(curopt >= MENU_FIRST_TRADE && curopt <= MENU_LAST_TRADE) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_TRADE", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				if(CheckInventory("InTradeView") && IsTrading(pnum))
					HandleInventoryViewTrade(boxid);
				else {
					if(!k)
						ResetPane(CurrentPane);
					
					j = 0;
					i = 0;
					// how many we have to skip
					temp = MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE);
					for(; i < MAXPLAYERS && j < MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1); ++i) {
						if(PlayerInGame(i) && i != pnum) {
							if(j >= temp) {
								// n:0 prints the current player regardless, must use i + 1
								if(IsTradingWith(pnum, i))
									toshow = StrParam(s:"\cd- \c-", n:i + 1, s: "\cv V");
								else if(IsTrading(i))
									toshow = StrParam(s:"\cd- \c-", n:i + 1, s: "\c[D4] X");
								else
									toshow = StrParam(s:"\cd- \c-", n:i + 1);
								
								if(TradeMuteStatus(pnum, i))
									toshow = StrParam(s:toshow, s:" \cg M");
								if(TradeMuteStatus(i, pnum))
									toshow = StrParam(s:toshow, s:" \cm M");
								// add this as a clickable box
								if(!k) // don't keep adding boxes
									AddBoxToPane_Points(CurrentPane, 277.0, 260.0 - 16.0 * (j - temp), 180.0, 252.0 - 16.0 * (j - temp));
								if(boxid == MBOX_1 + j - temp)
									HudMessage(s:"\c[B1] <=="; HUDMSG_PLAIN, RPGMENUITEMID - 2 * (j - temp) - 1, CR_CYAN, 420.0, 66.0 + 16.0 * (j - temp), 0.0, 0.0); 
								DrawBoxText(toshow, DND_NOLOOKUP, boxid, MBOX_1 + (j - temp), RPGMENUITEMID - 2 * (j - temp), 192.1, 64.0 + 16.0 * (j - temp), "\c[B1]", "\c[Y5]");
							}
							++j;
						}
					}
					
					k = 1;
				}
				
				if(curopt != MENU_LAST_TRADE && PlayerCount() > MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1))
					HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUITEMID - 32, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
				if(curopt != MENU_FIRST_TRADE)
					HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUITEMID - 33, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
			}
			else if(curopt >= MENU_FIRST_ACCESSORY_PAGE && curopt <= MENU_LAST_ACCESSORY_PAGE) {
				// if RES_ACCESSORY is not made, don't let player do anything here
				if(CheckResearchStatus(RES_ACCESSORY) != RES_DONE)
					HudMessage(s:"--- N / A ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
				else {
					HudMessage(s:"--- ", l:"DND_MENU_HEAD_ACCESSORY", s:" #", d:curopt - MENU_FIRST_ACCESSORY_PAGE + 1, s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
					// init limits
					i = ACCESSORY_PER_PAGE * (curopt - MENU_FIRST_ACCESSORY_PAGE);
					k = Min(i + ACCESSORY_PER_PAGE, MAX_ACCESSORY);
					for(j = i; j < k; ++j)
						DrawAccessory(j, boxid, curopt, CurrentPane);
				}
				
				if(curopt != MENU_LAST_ACCESSORY_PAGE)
					DrawBoxText("=>", DND_NOLOOKUP, boxid, MBOX_6, RPGMENUPAGEID, 436.1, 44.0, "\c[B1]", "\c[Y5]");
				if(curopt != MENU_FIRST_ACCESSORY_PAGE)
					DrawBoxText("<=", DND_NOLOOKUP, boxid, (curopt == MENU_LAST_ACCESSORY_PAGE) ? MBOX_3 : MBOX_7, RPGMENUPAGEID - 1, 184.1, 44.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_SHOP) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_SHOP", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawCredits();
				
				DrawBoxText("DND_MENU_WEAPONS", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID, 192.1, 96.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_AMMO", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_ABILITIES", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_ARTIFACTS", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_ACCOUNT", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 6, 192.1, 160.0, "\c[B1]", "\c[Y5]");
			
				#ifdef ISAPRILFIRST
					DrawBoxText("DND_MENU_NFT", DND_LANGUAGE_LOOKUP, boxid, MBOX_6, RPGMENUITEMID - 7, 192.1, 192.0, "\c[B1]", "\c[Y5]");
				#endif
			}
			else if(curopt == MENU_SHOP_WEAPON) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_WEAPONS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawCredits();
				
				for(i = 0; i < 8; ++i) {
					if(boxid == MBOX_1 + i)
						HudMessage(s:"\c[B1]", l:"DND_MENU_SLOT", s:" ", d:i + 1, s:"\c- <--"; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 96.0 + 16.0 * i, 0.0, 0.0);
					else
						HudMessage(s:"\c[Y5]", l:"DND_MENU_SLOT", s:" ", d:i + 1; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 96.0 + 16.0 * i, 0.0, 0.0);
				}

				HudMessage(
					s:"\c[Y5]", l:"DND_MENU_LEGEND", s:"\n\cd*\c- \c[J7][\c[S7]R\c[J7]] - ", l:"DND_MENU_REPLACESWEP", 
					s:".\n\cd*\c- \c[J7][\c[E3]L\c[J7]] - ", l:"DND_MENU_LUXURYWEP", s:".\n\c[J7]        ", l:"DND_MENU_CARRYLIMIT", s:".";
					HUDMSG_PLAIN, RPGMENUITEMID - 17, CR_WHITE, 192.1, 240.0, 0.0, 0.0
				);
			}
			else if(curopt == MENU_SHOP_WEAPON1)
				HandleWeaponPageDraw(curopt, 0, 1, boxid, -32, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON2)
				HandleWeaponPageDraw(curopt, 0, 2, boxid, -16, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON3_1)
				HandleWeaponPageDraw(curopt, 1, 3, boxid, -32, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON3_2)
				HandleWeaponPageDraw(curopt, 2, 3, boxid, -32, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON3_3)
				HandleWeaponPageDraw(curopt, -3, 3, boxid, -32, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON4_1)
				HandleWeaponPageDraw(curopt, 1, 4, boxid, -24, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON4_2)
				HandleWeaponPageDraw(curopt, -2, 4, boxid, -32, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON5_1)
				HandleWeaponPageDraw(curopt, 1, 5, boxid, -32, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON5_2)
				HandleWeaponPageDraw(curopt, -2, 5, boxid, -24, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON6_1)
				HandleWeaponPageDraw(curopt, 1, 6, boxid, -40, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON6_2)
				HandleWeaponPageDraw(curopt, -2, 6, boxid, -16, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON7)
				HandleWeaponPageDraw(curopt, 0, 7, boxid, -16, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_WEAPON8)
				HandleWeaponPageDraw(curopt, 0, 8, boxid, 0, CurrentPane.cursize, redraw);
			else if(curopt == MENU_SHOP_AMMOSELECT) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_AMMO", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawCredits();
				
				for(i = 0; i < MAX_SLOTS - 1; ++i)
					DrawBoxText(StrParam(l:"DND_MENU_AMMOCATEGORY", s:" - ", d: i + 1), DND_NOLOOKUP, boxid, MBOX_1 + i, RPGMENUITEMID - i - 1, 192.1, 96.0 + 16.0 * i, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_SPECIALAMMO", DND_LANGUAGE_LOOKUP, boxid, MBOX_1 + i, RPGMENUITEMID - i - 1, 192.1, 96.0 + 16.0 * i, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_SHOP_AMMO_1)
				HandleAmmoPageDraw(boxid, DND_AMMOSLOT_CLIP, 1, AMMOSLOT_CLIP_BEGIN, AMMOSLOT_CLIP_END, false);
			else if(curopt == MENU_SHOP_AMMO_1_2)
				HandleAmmoPageDraw(boxid, DND_AMMOSLOT_CLIP, -1, AMMOSLOT_CLIP2_BEGIN, AMMOSLOT_CLIP2_END, false);
			else if(curopt == MENU_SHOP_AMMO_2)
				HandleAmmoPageDraw(boxid, DND_AMMOSLOT_SHELL, 1, AMMOSLOT_SHELL_BEGIN, AMMOSLOT_SHELL_END, false);
			else if(curopt == MENU_SHOP_AMMO_2_2)
				HandleAmmoPageDraw(boxid, DND_AMMOSLOT_SHELL, -1, AMMOSLOT_SHELL2_BEGIN, AMMOSLOT_SHELL2_END, false);
			else if(curopt == MENU_SHOP_AMMO_3)
				HandleAmmoPageDraw(boxid, DND_AMMOSLOT_ROCKET, 0, AMMOSLOT_ROCKET_BEGIN, AMMOSLOT_ROCKET_END, false);
			else if(curopt == MENU_SHOP_AMMO_4)
				HandleAmmoPageDraw(boxid, DND_AMMOSLOT_CELL, 0, AMMOSLOT_CELL_BEGIN, AMMOSLOT_CELL_END, false);
			else if(curopt == MENU_SHOP_AMMO_SPECIAL1)
				HandleAmmoPageDraw(boxid, -1, 0, -1, -1, true);
			else if(curopt == MENU_SHOP_ABILITY_1) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_ABILITIES", s:" (1) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawCredits();
				
				for(i = SHOP_ABILITY1_BEGIN; i <= SHOP_ABILITY1_END; ++i)
					DrawToggledImage(i, boxid, i - SHOP_ABILITY1_BEGIN, AbilityDrawInfo[i - SHOP_ABILITY1_BEGIN].flags, CR_WHITE, CR_GREEN, "", 1, CR_RED);
			
				HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
			}
			else if(curopt == MENU_SHOP_ABILITY_2) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_ABILITIES", s:" (2) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawCredits();
				
				for(i = SHOP_ABILITY2_BEGIN; i <= SHOP_LASTABILITY_INDEX; ++i)
					DrawToggledImage(i, boxid, i - SHOP_ABILITY2_BEGIN, AbilityDrawInfo[i - SHOP_ABILITY1_BEGIN].flags, CR_WHITE, CR_GREEN, "", 1, CR_RED);
			
				HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
			}
			else if(curopt == MENU_SHOP_ARTIFACT_1) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_ARTIFACTS", s:" (1) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawCredits();
				
				for(i = 0; i < MAXARTIFACTS_PERPAGE; ++i)
					DrawToggledImage(SHOP_FIRSTARTI1_INDEX + i, boxid, i, ArtifactDrawInfo[i].flags, CR_WHITE, CR_GREEN, ArtifactInfo[i][ARTI_NAME], ShopInfo[SHOP_FIRSTARTI1_INDEX + i][SHOPINFO_MAX], CR_RED);
			}
			else if(curopt == MENU_SHOP_ARTIFACT_2) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_ARTIFACTS", s:" (2) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawCredits();
				
				for(i = ARTI_RADSUIT; i < MAXARTIFACTS; ++i)
					DrawToggledImage(SHOP_FIRSTARTI1_INDEX + i, boxid, i - ARTI_RADSUIT, ArtifactDrawInfo[i].flags, CR_WHITE, CR_GREEN, ArtifactInfo[i][ARTI_NAME], ShopInfo[SHOP_FIRSTARTI1_INDEX + i][SHOPINFO_MAX], CR_RED);
			}
			else if(curopt == MENU_SHOP_ACCOUNT) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_ACCOUNT", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawCredits();
				
				for(i  = 0; i < MAXACCOUNTITEMS; ++i)
					DrawToggledImage(SHOP_ACCOUNT_BEGIN + i, boxid, i, OBJ_RESEARCH | OBJ_ACCOUNT, CR_WHITE, CR_GREEN, GetItemName(SHOP_ACCOUNT_BEGIN + i), ShopInfo[SHOP_ACCOUNT_BEGIN + i][SHOPINFO_MAX], CR_RED);
			}
			else if(curopt == MENU_RESEARCH) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_RESCAT", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawBudget();
				
				DrawBoxText("DND_RESMENU_BODY", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_RESMENU_AMMO", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_RESMENU_GUNS", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_RESMENU_UTILITY", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");

				i = CheckInventory("Budget");
				if(i)
					HudMessage(s:"\c[Y5]", l:"DND_MENU_BUDGET", s:": \c-$", d:i, s:"\cjK"; HUDMSG_PLAIN, RPGMENUITEMID - 5, CR_WHITE, 192.1, 176.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]", l:"DND_MENU_BUDGET", s:": \c-$0"; HUDMSG_PLAIN, RPGMENUITEMID - 5, CR_WHITE, 192.1, 176.0, 0.0, 0.0);

				HudMessage(s:"\c[Y5]", l:"DND_MENU_CREDITS", s:": \c-$", d:CheckInventory("Credit"), s:"\n\c[Y5]", l:"DND_MENU_CONVRATE", s:": \cj$", d:DND_BUDGET_CONVERSION_CREDIT, s:" <=> 1k"; HUDMSG_PLAIN, RPGMENUITEMID - 6, CR_WHITE, 192.1, 192.0, 0.0, 0.0);

				DrawBoxText("DND_MENU_DONATE", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 7, 192.1, 224.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_RESEARCH_GUNS) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_RESGUNS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawBudget();
				
				DrawBoxText("DND_RESMENU_SUBSLOT", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_RESMENU_SUBLUX", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
				
				HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
			}
			else if(curopt >= SHOP_RESPAGE_BEGIN && curopt <= SHOP_RESPAGE_END)
				HandleResearchPageDraw(pnum, curopt - SHOP_RESPAGE_BEGIN, boxid);
			else if(curopt == MENU_ABILITY) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_ABILEARNED", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				for(i = 0; i < MAXABILITIES; ++i) {
					if(CheckInventory(GetItemName(SHOP_ABILITY1_BEGIN + i)))
						HudMessage(s:"\c[Y5]", l:GetAbilityTag(i), s:": \cd", l:"DND_MENU_LEARNED"; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 192.1, 80.0 + 16.0 * i, 0.0, 0.0);
					else
						HudMessage(s:"\c[Y5]", l:GetAbilityTag(i), s:": \c-", s:"\c[G8]N/A"; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 192.1, 80.0 + 16.0 * i, 0.0, 0.0);
				}
					
				if(boxid == MBOX_1) {
					if(!CheckInventory("DashDisabled"))
						HudMessage(s:"\c[B1]", l:"DND_MENU_DASH", s:": ", l:"DND_MENU_ENABLED"; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
					else
						HudMessage(s:"\c[B1]", l:"DND_MENU_DASH", s:": ", l:"DND_MENU_DISABLED"; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
				}
				else {
					if(!CheckInventory("DashDisabled"))
						HudMessage(s:"\c[Y5]", l:"DND_MENU_DASH", s:": ", l:"DND_MENU_ENABLED"; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
					else
						HudMessage(s:"\c[Y5]", l:"DND_MENU_DASH", s:": ", l:"DND_MENU_DISABLED"; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
				}
			}
			else if(curopt == MENU_MAIN) {
				HudMessage(s:"--- ", l:"DND_MENU_WELCOME", s:"! ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
				ShowBobby();
				// total on y must add to 280
				SetHudClipRect(192, 152, 256, 128, 256);
				HudMessage(s:"\cv*\c- ", l:"DND_MENU_BOBBY1", s:"\n\n\cv*\c- ", l:"DND_MENU_BOBBY2", s:"\n\n\cv*\c- ", l:"DND_MENU_BOBBY3"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 152.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_HELP", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
				
				DrawBoxText("DND_MENU_HELPTEXT1", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID, 192.1, 64.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_HELPTEXT2", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 1, 192.1, 80.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_HELPTEXT3", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 2, 192.1, 96.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_HELPTEXT4", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 3, 192.1, 112.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_HELPTEXT5", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 4, 192.1, 128.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_HELPTEXT6", DND_LANGUAGE_LOOKUP, boxid, MBOX_6, RPGMENUITEMID - 5, 192.1, 144.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_HELPTEXT7", DND_LANGUAGE_LOOKUP, boxid, MBOX_7, RPGMENUITEMID - 6, 192.1, 160.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_HELPTEXT8", DND_LANGUAGE_LOOKUP, boxid, MBOX_8, RPGMENUITEMID - 7, 192.1, 176.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_HELPTEXT9", DND_LANGUAGE_LOOKUP, boxid, MBOX_9, RPGMENUITEMID - 8, 192.1, 192.0, "\c[B1]", "\c[Y5]");
				
				HudMessage(s:"\c[Y5]", l:"DND_MENU_AVGMONLEVEL", s:": \cj", d:CheckInventory("DnD_PTotalLevel") / PlayerCount(); HUDMSG_PLAIN, RPGMENUITEMID - 9, CR_WHITE, 192.1, 228.0, 0.0, 0.0);
				str mapinfo = "DND_MENU_DISABLED";
				if(CheckInventory("ShowMapInfo"))
					mapinfo = "DND_MENU_ENABLED";
				DrawBoxText(StrParam(l:"DND_MENU_MAPINFO", l:mapinfo), DND_NOLOOKUP, boxid, MBOX_10, RPGMENUITEMID - 10, 192.1, 244.0, "\c[B1]", "\c[Y5]");
				if(CheckInventory("SetMapInfo")) {
					SetCVar("dnd_showmapinfo", !GetCVar("dnd_showmapinfo"));
					SetInventory("ShowMapInfo", !CheckInventory("ShowMapInfo"));
				}
				
				// draw mod tier text
				mapinfo = "DND_MENU_DISABLED";
				if(GetCVar("dnd_detailedmods"))
					mapinfo = "DND_MENU_ENABLED";
				DrawBoxText(StrParam(l:"DND_MENU_MODTIERS", l:mapinfo), DND_NOLOOKUP, boxid, MBOX_11, RPGMENUITEMID - 11, 192.1, 260.0, "\c[B1]", "\c[Y5]");
				if(CheckInventory("SetModTierInfo"))
					SetCVar("dnd_detailedmods", !GetCVar("dnd_detailedmods"));

				// ignore temp wep drops
				mapinfo = "DND_MENU_DISABLED";
				if(GetCVar("dnd_ignoretempweps"))
					mapinfo = "DND_MENU_ENABLED";
				DrawBoxText(StrParam(l:"DND_MENU_IGNORETEMPS", l:mapinfo), DND_NOLOOKUP, boxid, MBOX_12, RPGMENUITEMID - 12, 192.1, 276.0, "\c[B1]", "\c[Y5]");
				if(CheckInventory("SetTempWepIgnore"))
					SetCVar("dnd_ignoretempweps", !GetCVar("dnd_ignoretempweps"));
			}
			else if(curopt == MENU_HELP_CHARACTER) {
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT1", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				SetHudClipRect(192, 64, 256, 216, 256);
				
				HudMessage(
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT1", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT2", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT3", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT4", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT5", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT6", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT7", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT8", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_CHARHELPTEXT9", s:"\n\n";
					HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 4.0 * ScrollPos.x, 0.0, 0.0
				);

				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP_CLASSPERKS) {
				j = StrParam(s:"CLASS", d:CheckInventory("DnD_Character") - 1); 
				
				toshow = "";
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT2", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				SetHudClipRect(192, 64, 256, 216, 256);
				HudMessage(l:"DND_CLASS", s:": \cj", l:GetClassLabel(j, DND_CLASS_LABEL_NAME); HUDMSG_PLAIN, RPGMENUHELPID - 10, CR_CYAN, 316.4, 72.1, 0.0, 0.0);
				
				if(CheckInventory("Level") < 5)
					toshow = StrParam(s:toshow, s:"\n\n\cm+ L5: ", l:GetClassLabel(j, DND_CLASS_LABEL_PERK1));
				else
					toshow = StrParam(s:toshow, s:"\n\n\c[Y5]+ L5:\c- ", l:GetClassLabel(j, DND_CLASS_LABEL_PERK1));
				
				if(CheckInventory("Level") < 25)
					toshow = StrParam(s:toshow, s:"\n\n\cm+ L25: ", l:GetClassLabel(j, DND_CLASS_LABEL_PERK2));
				else
					toshow = StrParam(s:toshow, s:"\n\n\c[Y5]+ L25:\c- ", l:GetClassLabel(j, DND_CLASS_LABEL_PERK2));

				if(CheckInventory("Level") < 50)
					toshow = StrParam(s:toshow, s:"\n\n\cm+ L50: ", l:GetClassLabel(j, DND_CLASS_LABEL_PERK3));
				else
					toshow = StrParam(s:toshow, s:"\n\n\c[Y5]+ L50:\c- ", l:GetClassLabel(j, DND_CLASS_LABEL_PERK3));
					
				HudMessage(s:toshow; HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_GREEN, 192.1, 88.1, 0.0, 0.0);
				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP_WEAPONPROPS) {
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT3", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				SetHudClipRect(192, 56, 256, 224, 256);
				
				for(i = 0; i < MAX_WEAPON_PROPERTIES; ++i)
					HudMessage(s:"\c[Y5]", l:StrParam(s:"DND_WEPPROP_", d:i + 1), s:"\n\n", l:StrParam(s:"DND_MENU_WEPHELPTEXT", d:i + 1); HUDMSG_PLAIN, RPGMENUITEMID - 1 - i, CR_WHITE, 192.1, 64.1 + i * 68.0 + 4.0 * ScrollPos.x, 0.0, 0.0);
				
				SetHudSize(640, 480, 1);
				SetHudClipRect(192, 72, 320, 340, 320);
				for(i = 0; i < MAX_WEAPON_PROPERTIES; ++i)
					ShowWeaponPropertyIcon(i);
				SetFont("SMALLFONT");
				SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP_RESEARCHES) {
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT4", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				SetHudClipRect(192, 64, 256, 216, 256);
				
				HudMessage(
					s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT1", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT2", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT3", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT4", s:"\n\n",
					s:"\c[Y5]* \c-", l:"DND_MENU_RESHELPTEXT5";
					HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 4.0 * ScrollPos.x, 0.0, 0.0
				);

				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP_DAMAGETYPES) {
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT5", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				SetHudClipRect(192, 64, 256, 216, 256);
				
				HudMessage(l:"DND_MENU_BULLETTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				HudMessage(l:"DND_MENU_MELEETEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, 144.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				HudMessage(l:"DND_MENU_OCCULTTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 3, CR_WHITE, 192.1, 224.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				HudMessage(l:"DND_MENU_EXPLOTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 4, CR_WHITE, 192.1, 304.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				HudMessage(l:"DND_MENU_ENERGYTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 5, CR_WHITE, 192.1, 384.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				HudMessage(l:"DND_MENU_FIRETEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 6, CR_WHITE, 192.1, 464.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				HudMessage(l:"DND_MENU_ICETEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 7, CR_WHITE, 192.1, 544.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				HudMessage(l:"DND_MENU_POISONTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 8, CR_WHITE, 192.1, 624.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				HudMessage(l:"DND_MENU_LIGHTNINGTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 9, CR_WHITE, 192.1, 704.1 + 4.0 * ScrollPos.x, 0.0, 0.0);
				
				// size is 640 by 480 instead of 480 by 320, ratio them
				SetHudClipRect(192, 90, 256, 330, 256);
				
				for(i = 0; i < MAX_DAMAGE_TYPES; ++i)
					ShowDamageTypeIcon(i);
					
				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP_AILMENTS) {
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT6", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				SetHudClipRect(192, 52, 256, 228, 256);
				
				// we have 5 maximum ailments at the moment
				for(i = 0; i < 5; ++i)
					toshow = StrParam(s:toshow, s:"\c[Y5]", l:StrParam(s:"DND_MENU_AILMENT", d:i + 1), s:"\n\n", l:StrParam(s:"DND_MENU_AILMENT", d:i + 1, s: "_EXP"), s:"\n\n");
				
				HudMessage(s:toshow; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 8.0 * ScrollPos.x, 0.0, 0.0);
				
				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP_ORBS) {
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT7", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				// sum of y and clip y should = 280
				SetHudClipRect(192, 60, 256, 220, 256);
				
				j = 0;

				// top header text
				HudMessage(l:"DND_MENU_ORBHELPTEXT"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 64.1 + 8.0 * ScrollPos.x + j, 0.0, 0.0);

				for(i = 0; i < MAX_ORBS; ++i) {
					// maybe optimize this in the future to not use this many strparams but idk now -- storing these is not an option
					toshow = StrParam(s:"\c[Y5]", l:GetInventoryTag(i + ORBS_BEGIN), s:"\n", l:GetInventoryText(i + ORBS_BEGIN));

					// if there's a recipe completed, add it next to it as well
					if(CheckOrbRecipe(i))
						toshow = StrParam(s:toshow, s:"\n", s:GetOrbRecipeText(i));

					HudMessage(s:toshow; HUDMSG_PLAIN, RPGMENUITEMID - i - 2, CR_WHITE, 192.1, 200.1 + 8.0 * ScrollPos.x + j, 0.0, 0.0);
					ShowOrbIcon(i, j);
					
					k = StrLen(toshow);
					j += Max((k / 18) * 10.0, 80.0);
				}

				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP_LEGMONS) {
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT9", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				SetHudClipRect(192, 52, 256, 228, 256);
				j = 0;
				for(i = 0; i < MAX_LEGMONS_TEXT; ++i) {
					if(HasKilledLegendary(i)) {
						HudMessage(l:StrParam(s:"DND_MENU_LEGHELPTEXT", d:i + 1); HUDMSG_PLAIN, RPGMENUITEMID - 2 * i, CR_WHITE, 192.1, 112.1 + 144.0 * j + 4.0 * ScrollPos.x, 0.0, 0.0);
						ShowLegendaryMonsterIcon(i, j);
						++j;
					}
				}
				SetHudClipRect(0, 0, 0, 0);
			}
			else if(curopt == MENU_HELP_MMODS) {
				HudMessage(s:"--- ", l:"DND_MENU_HELPTEXT8", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				
				DrawBoxText("DND_MENU_MMOD_WEAK", DND_LANGUAGE_LOOKUP, boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_MMOD_RESIST", DND_LANGUAGE_LOOKUP, boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_MMOD_IMMUNE", DND_LANGUAGE_LOOKUP, boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_MMOD_AGGRESS", DND_LANGUAGE_LOOKUP, boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_MMOD_DEFENSE", DND_LANGUAGE_LOOKUP, boxid, MBOX_5, RPGMENUITEMID - 5, 192.1, 160.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_MMOD_UTILITY", DND_LANGUAGE_LOOKUP, boxid, MBOX_6, RPGMENUITEMID - 6, 192.1, 176.0, "\c[B1]", "\c[Y5]");
				DrawBoxText("DND_MENU_MMOD_SPECIAL", DND_LANGUAGE_LOOKUP, boxid, MBOX_7, RPGMENUITEMID - 7, 192.1, 192.0, "\c[B1]", "\c[Y5]");
			}
			else if(curopt == MENU_HELP_MMODS_WEAKNESS) {
				HudMessage(s:"--- ", l:"DND_MENU_MMOD_WEAK", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawMonsterModCategory(DND_TRAITCODE_WEAKNESS);
			}
			else if(curopt == MENU_HELP_MMODS_RESIST) {
				HudMessage(s:"--- ", l:"DND_MENU_MMOD_RESIST", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawMonsterModCategory(DND_TRAITCODE_RESIST);
			}
			else if(curopt == MENU_HELP_MMODS_IMMUNITY) {
				HudMessage(s:"--- ", l:"DND_MENU_MMOD_IMMUNE", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawMonsterModCategory(DND_TRAITCODE_IMMUNITY);
			}
			else if(curopt == MENU_HELP_MMODS_AGGRESSIVE) {
				HudMessage(s:"--- ", l:"DND_MENU_MMOD_AGGRESS", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawMonsterModCategory(DND_TRAITCODE_AGGRESSIVE);
			}
			else if(curopt == MENU_HELP_MMODS_DEFENSIVE) {
				HudMessage(s:"--- ", l:"DND_MENU_MMOD_DEFENSE", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawMonsterModCategory(DND_TRAITCODE_DEFENSIVE);
			}
			else if(curopt == MENU_HELP_MMODS_UTILITY) {
				HudMessage(s:"--- ", l:"DND_MENU_MMOD_UTILITY", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				DrawMonsterModCategory(DND_TRAITCODE_UTILITY);
			}
			else if(curopt == MENU_HELP_MMODS_SPECIAL) {
				HudMessage(s:"--- ", l:"DND_MENU_MMOD_SPECIAL", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
				// -1 is for special stuff
				DrawMonsterModCategory(-1);
			}
			#ifdef ISAPRILFIRST
			else if(curopt == MENU_SHOP_NFT) {
				HudMessage(s:"--- ", l:"DND_MENU_HEAD_NFT", s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.1, 0.0, 0.0);
				DrawCredits();
				
				SetHudClipRect(184, 56, 264, 224, 264);
				
				HudMessage(l:"DND_NFT_INTRO"; HUDMSG_PLAIN, RPGMENUITEMID - 69, CR_WHITE, 316.4, 72.1, 0.0, 0.0);
				
				// draw nft labels, with images
				HandleNFTDrawing(boxid);
				
				SetHudClipRect(0, 0, 0, 0, 0, 0);
			}
			#endif
			
			// Main menu side bar -- stats and perks are in the other looping script
			if(curopt < MENU_LOAD_CRAFTING || curopt > MENU_LOAD_CRAFTING_INVENTORY) {
				if(mainboxid == MAINBOX_LOAD)
					HudMessage(s:"\c[B1]", l:"DND_MENU_SIDE_LOADOUT"; HUDMSG_PLAIN, RPGMENULISTID - 2, -1, 96.0, 204.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]", l:"DND_MENU_SIDE_LOADOUT"; HUDMSG_PLAIN, RPGMENULISTID - 2, -1, 96.0, 204.0, 0.0, 0.0);
				
				if(mainboxid == MAINBOX_SHOP)
					HudMessage(s:"\c[B1]", l:"DND_MENU_HEAD_SHOP"; HUDMSG_PLAIN, RPGMENULISTID - 3, -1, 96.0, 221.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]", l:"DND_MENU_HEAD_SHOP"; HUDMSG_PLAIN, RPGMENULISTID - 3, -1, 96.0, 221.0, 0.0, 0.0);
				
				if(mainboxid == MAINBOX_RESEARCH)
					HudMessage(s:"\c[B1]", l:"DND_MENU_RESEARCH"; HUDMSG_PLAIN, RPGMENULISTID - 6, -1, 96.0, 251.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]", l:"DND_MENU_RESEARCH"; HUDMSG_PLAIN, RPGMENULISTID - 6, -1, 96.0, 251.0, 0.0, 0.0);
				
				if(mainboxid == MAINBOX_ABILITY)
					HudMessage(s:"\c[B1]", l:"DND_MENU_HEAD_ABILITIES"; HUDMSG_PLAIN, RPGMENULISTID - 4, -1, 96.0, 269.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]", l:"DND_MENU_HEAD_ABILITIES"; HUDMSG_PLAIN, RPGMENULISTID - 4, -1, 96.0, 269.0, 0.0, 0.0);
				
				if(mainboxid == MAINBOX_HELP)
					HudMessage(s:"\c[B1]", l:"DND_MENU_HELP"; HUDMSG_PLAIN, RPGMENULISTID - 5, -1, 96.0, 287.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]", l:"DND_MENU_HELP"; HUDMSG_PLAIN, RPGMENULISTID - 5, -1, 96.0, 287.0, 0.0, 0.0);
				
				// hoping nobody lives more than 9999 maps --- find an adjustment for later ahh yes
				temp = CheckInventory("RoundsSurvived");
				if(temp <= 999)
					HudMessage(s:"\c[Y5]", l:"DND_MENU_LASTED", s:": \cj", d:temp; HUDMSG_PLAIN, RPGMENUNAMEID, -1, 60.1, 140.0, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]", l:"DND_MENU_LASTED", s:":\cj", d:temp; HUDMSG_PLAIN, RPGMENUNAMEID, -1, 60.1, 140.0, 0.0, 0.0);
			}
			
			// we've had redrawn, take these away now
			TakeInventory("DnD_RefreshPane", 1);
			//TakeInventory("DnD_RefreshRequest", 1);
			///////////////////////////////
			// MENU DRAWING ROUTINE ENDS //
			///////////////////////////////
		}
	}
	
	ScrollPos.x = 0;
	ClearMenuDisplay();
}

Script "DnD Main Button Click Animation" (int boxid) CLIENTSIDE {
	if(!CheckInventory(ButtonTimers[boxid - FIRST_CLICKABLE_BOXID]))
		SetInventory(ButtonTimers[boxid - FIRST_CLICKABLE_BOXID], 1); // kick starts the animation
	SetResultValue(0);
}

Script "DND Server Box Receive" (int pnum, int boxid, int mainboxid) NET {
	// don't let garbage data slip in
	if(!pnum)
		Terminate;
	int temp = pnum >> 16;
	int tpos = 0;
	int stat_id, stat_pt;
	
	//int dummy = pnum;
	pnum &= 0xFFFF;
	if(!MenuInputData[pnum][DND_MENUINPUT_DELAY]) {
		//printbold(s:"received ", d:dummy, s: " ", d:boxid, s: " ", d:mainboxid);
		int curopt, i, j;

		// extra Left - Right pos is kept in mainboxid
		if(mainboxid > 0xFFFF) {
			MenuInputData[pnum][DND_MENUINPUT_LRPOS] = mainboxid >> 16;
			mainboxid &= 0xFFFF;
		}
		
		SetActivator(pnum + P_TIDSTART);
		MenuInputData[pnum][DND_MENUINPUT_DELAY] = DND_MENU_INPUTDELAYTICS;
		MenuInputData[pnum][DND_MENUINPUT] = temp;
		
		curopt = CheckInventory("MenuOption");
		GiveInventory("DND_ACK", 1);
		if(mainboxid != MAINBOX_NONE) {
			if(HasLeftClicked(pnum)) {
				TakeInventory("DnD_InventoryView", 1);
				TakeInventory("DnD_StashView", 1);
				if(mainboxid >= FIRST_CLICKABLE_BOXID && mainboxid <= LAST_CLICKABLE_BOXID)
					HandleButtonClick(mainboxid);
				else if(mainboxid == MAINBOX_STATS)
					UpdateMenuPosition(MENU_STAT1);
				else if(mainboxid == MAINBOX_PERK)
					UpdateMenuPosition(MENU_PERK);
				else if(mainboxid == MAINBOX_LOAD)
					UpdateMenuPosition(MENU_LOAD);
				else if(mainboxid == MAINBOX_SHOP)
					UpdateMenuPosition(MENU_SHOP);
				else if(mainboxid == MAINBOX_RESEARCH)
					UpdateMenuPosition(MENU_RESEARCH);
				else if(mainboxid == MAINBOX_ABILITY)
					UpdateMenuPosition(MENU_ABILITY);
				else if(mainboxid == MAINBOX_HELP)
					UpdateMenuPosition(MENU_HELP);
			}
		}
		
		if(CheckInventory("DnD_SellConfirm") && HasLeftClicked(pnum)) {
			TakeInventory("DnD_SellConfirm", 1);
			// clean the sell popup
			SetInventory("DnD_PopupID", 0);
			SetInventory("DnD_PopupSell", 0);
			SetInventory("DnD_ShowPopup", 0);
			SetInventory("DnD_ShowSellPopup", 0);
			SetInventory("DnD_PopupID", 0);
			SetInventory("ActivePopupBox", 0);
			boxid = MAINBOX_NONE;
		}
		
		if(curopt == MENU_STAT1) { // stat screen
			if(HasPlayerClicked(pnum)) {
				if(boxid == MBOX_7)
					UpdateMenuPosition(MENU_STAT2);
				else if(CheckInventory("AttributePoint") && boxid != MAINBOX_NONE) { // tried to level stat, so you must have some attrib point
					// here we check if option was left click or right click, right click consumes whatever we can on the given selection
					if(HasLeftClicked(pnum))
						temp = 1;
					else
						temp = CheckInventory("AttributePoint");
						
					stat_id = boxid - 1 + DND_ATTRIB_BEGIN;
					stat_pt = GetStat(stat_id);
				
					ConsumeAttributePointOn(stat_id, temp);
					LocalAmbientSound("RPG/MenuChoose", 127);
					ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, pnum);
				}
			}
			else if(HasPressedLeft(pnum))
				ReturnToMain();
			else if(HasPressedRight(pnum))
				UpdateMenuPosition(MENU_STAT2);
		}
		else if(curopt == MENU_STAT2) {
			if(HasPlayerClicked(pnum)) {
				if(boxid == MBOX_5)
					UpdateMenuPosition(MENU_STAT1);
				else if(boxid == MBOX_1)
					UpdateMenuPosition(MENU_STAT2_OFFENSE1);
				else if(boxid != MAINBOX_NONE) // skip offense page 2
					UpdateMenuPosition(boxid - MBOX_1 + MENU_STAT2 + 2);
			}
			else if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_STAT1);
		}
		else if(curopt >= MENU_STAT2_OFFENSE1 && curopt <= MENU_STAT2_QUESTBONUSES) {
			if(HasPressedLeft(pnum)) {
				if(curopt == MENU_STAT2_OFFENSE2)
					UpdateMenuPosition(MENU_STAT2_OFFENSE1);
				else
					UpdateMenuPosition(MENU_STAT2);
			}
			else if(HasPressedRight(pnum)) {
				if(curopt == MENU_STAT2_OFFENSE1)
					UpdateMenuPosition(MENU_STAT2_OFFENSE2);
			}
			else if(HasPlayerClicked(pnum)) {
				if(boxid == MBOX_1) {
					if(curopt == MENU_STAT2_OFFENSE2)
						UpdateMenuPosition(MENU_STAT2_OFFENSE1);
					else
						UpdateMenuPosition(MENU_STAT2);
				}
				else if(curopt == MENU_STAT2_OFFENSE1 && boxid == MBOX_2)
					UpdateMenuPosition(MENU_STAT2_OFFENSE2);
			}
		}
		else if(curopt == MENU_PERK) {
			if(HasPlayerClicked(pnum)) {
				if(CheckInventory("PerkPoint") && boxid != MAINBOX_NONE) { // tried to level perk, so you must have some perk point
					// same check as above
					stat_id = boxid - 1 + DND_PERK_BEGIN;
					stat_pt = GetStat(stat_id);
					if(HasLeftClicked(pnum))
						temp = 1;
					else
						temp = Min(CheckInventory("PerkPoint"), DND_PERK_MAX - stat_pt);
					
					if(stat_pt < DND_PERK_MAX) {
						ConsumePerkPointOn(stat_id, temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}					
				}
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_LOAD) {
			// prevents having something clicked previously in crafting altering something else
			SetInventory("DnD_SelectedInventoryBox", 0);
			if(HasLeftClicked(pnum)) {
				if(boxid > 0) {
					if(boxid == MBOX_7)
						UpdateMenuPosition(MENU_LOAD_TRADE1);
					else if(boxid == MBOX_6)
						UpdateMenuPosition(MENU_LOAD_ACC1);
					else {
						if(MENU_LOAD + boxid == MENU_LOAD_INVENTORY)
							GiveInventory("DnD_InventoryView", 1);
						else if(MENU_LOAD + boxid == MENU_LOAD_STASH)
							GiveInventory("DnD_StashView", 1);
						UpdateMenuPosition(MENU_LOAD + boxid);
					}
				}
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_LOAD1) {
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_LOAD);
		}
		else if(curopt == MENU_LOAD_INVENTORY) {
			if(HasPlayerClicked(pnum)) {
				// handles clicking outside
				// at the last part, we reset the prev box only if there's no item there, otherwise another piece of code handles it
				if(HasLeftClicked(pnum) && boxid == MAINBOX_NONE) {
					if(!CheckInventory("DnD_SelectedInventoryBox")) {
						TakeInventory("DnD_InventoryView", 1);
						SetInventory("DnD_SelectedCharmBox", 0);
						GiveInventory("DnD_CleanInventoryRequest", 1);
						if(CheckInventory("MenuOption") == MENU_LOAD_INVENTORY || CheckInventory("MenuOption") == MENU_LOAD_STASH)
							UpdateMenuPosition_NoSound(MENU_LOAD);
						else
							LocalAmbientSound("RPG/MenuClose", 127);
					}
					else if(GetItemSyncValue(pnum, DND_SYNC_ITEMTYPE, CheckInventory("DnD_SelectedInventoryBox") - 1, -1, DND_SYNC_ITEMSOURCE_PLAYERINVENTORY) == DND_ITEM_NULL)
						SetInventory("DnD_SelectedInventoryBox", 0);
				}
				HandleInventoryViewClicks(pnum, boxid, temp);
			}
			if(HasPressedLeft(pnum)) {
				TakeInventory("DnD_InventoryView", 1);
				GiveInventory("DnD_CleanInventoryRequest", 1);
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_STASH) {
			if(HasPlayerClicked(pnum)) {
				temp = MenuInputData[pnum][DND_MENUINPUT];
				// handles clicking outside
				// at the last part, we reset the prev box only if there's no item there, otherwise another piece of code handles it
				if(HasLeftClicked(pnum) && boxid == MAINBOX_NONE) {
					if(!CheckInventory("DnD_SelectedInventoryBox")) {
						TakeInventory("DnD_StashView", 1);
						SetInventory("DnD_SelectedCharmBox", 0);
						GiveInventory("DnD_CleanInventoryRequest", 1);
						if(CheckInventory("MenuOption") == MENU_LOAD_INVENTORY || CheckInventory("MenuOption") == MENU_LOAD_STASH)
							UpdateMenuPosition_NoSound(MENU_LOAD);
						else
							LocalAmbientSound("RPG/MenuClose", 127);
					}
					else if
					(
						((CheckInventory("DnD_SelectedInventoryBox") > MAX_INVENTORY_BOXES) && (GetItemSyncValue(pnum, DND_SYNC_ITEMTYPE, CheckInventory("DnD_SelectedInventoryBox") - MAX_INVENTORY_BOXES - 1, -1, DND_SYNC_ITEMSOURCE_PLAYERINVENTORY) == DND_ITEM_NULL)) ||
						(
							(CheckInventory("DnD_SelectedInventoryBox") <= MAX_INVENTORY_BOXES) && 
							(GetItemSyncValue(pnum, DND_SYNC_ITEMTYPE, CheckInventory("DnD_SelectedInventoryBox") - 1, -1, DND_SYNC_ITEMSOURCE_STASH | ((CheckInventory("DnD_PlayerPreviousPage") - 1) << 16)) == DND_ITEM_NULL)
						)
					)
					{
						//printbold(s:"set to 0 before arrival on page ", d:CheckInventory("DnD_PlayerPreviousPage"));
						SetInventory("DnD_SelectedInventoryBox", 0);
					}
				}
				HandleStashViewClicks(pnum, boxid, temp);
			}
			if(HasPressedLeft(pnum)) {
				TakeInventory("DnD_StashView", 1);
				GiveInventory("DnD_CleanInventoryRequest", 1);
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_CHARM) {
			HandleItemPageInputs(pnum, boxid);
			if(HasPressedLeft(pnum)) {
				// skip the view if there was, otherwise move page back
				if(CheckInventory("DnD_InventoryView")) {
					TakeInventory("DnD_InventoryView", 1);
					GiveInventory("DnD_CleanInventoryRequest", 1);
				}
				else
					UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt >= MENU_LOAD_CRAFTING && curopt <= MENU_LOAD_CRAFTING_INVENTORY)
			HandleCraftingInputs(boxid, curopt);
		else if(curopt == MENU_LOAD_CRAFTING_TRANSMUTING)
			HandleTransmutingInputs(pnum, boxid);
		else if(curopt >= MENU_FIRST_TRADE && curopt <= MENU_LAST_TRADE) {
			if(HasPlayerClicked(pnum)) {
				if(boxid >= MBOX_1) {
					// we need to find which player this box corresponds to
					i = 0, temp = 0;
					// how many we skip
					j = MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE);
					for(; i < MAXPLAYERS && temp < boxid + j; ++i)
						if(PlayerInGame(i) && i != pnum)
							++temp;
					// i - 1 is the player number
					--i;
					// left click
					if(HasLeftClicked(pnum)) {
						if(!CheckInventory("DnD_Trade_Cooldown")) {
							// we aren't in trade panel
							if(!CheckInventory("InTradeView")) {
								if(!IsTrading(pnum)) {
									// handle trade protocol, initiate the request
									if(!IsTrading(i)) {
										if(!TradeMuteStatus(i, pnum)) {
											EngageTrade(pnum, i);
											SetActivator(i + P_TIDSTART);
											ACS_NamedExecuteAlways("DnD Announcer", 0, DND_ANNOUNCER_TRADEREQUEST, pnum, i + 1);
											SetActivator(pnum + P_TIDSTART);
											ACS_NamedExecuteAlways("DnD Trade Window", 0, pnum, false);
											ACS_NamedExecuteAlways("DnD Trade Window", 0, i, true);
											LocalAmbientSound("RPG/MenuChoose", 127);
										}
										else
											ShowActorPopup(pnum, POPUP_YOUAREMUTED, false, 0);
									}
									else
										ShowActorPopup(pnum, POPUP_TARGETISTRADING, false, 0);
								}
								else {
									// trade accept window is given to the other party, who engaged this
									if(IsTradingWith(pnum, i) && CheckInventory("DnD_TradeAcceptWindow")) {
										if(!TradeMuteStatus(i, pnum)) {
											// handle trade now, other party accepted
											GiveInventory("InTradeView", 1);
											GiveActorInventory(i + P_TIDSTART, "InTradeView", 1);
											GiveInventory("DnD_RefreshRequest", 1);
											GiveActorInventory(i + P_TIDSTART, "DnD_RefreshRequest", 1);
											LocalAmbientSound("RPG/MenuChoose", 127);
										}
										else
											ShowActorPopup(pnum, POPUP_YOUAREMUTED, false, 0);
									}
									else
										ShowActorPopup(pnum, POPUP_TARGETISTRADING, false, 0);
								}
							}
							else {
								// we are in trade panel now, handle boxes accordingly
								// give some time for the synchronization to settle in
								HandleTradeViewButtonClicks(pnum, boxid);
							}
						}
					}
					else {
						// right click mutes people
						if(!CheckInventory("InTradeView")) {
							ToggleMuteTrade(i);
							LocalAmbientSound("RPG/MenuChoose", 127);
						}
						else
							HandleTradeViewButtonClicks(pnum, boxid);
					}
				}
			}
			
			// only allow these if we arent currently trading with anyone
			if(!IsTrading(pnum)) {
				if(HasPressedLeft(pnum)) {
					if(curopt == MENU_FIRST_TRADE)
						UpdateMenuPosition(MENU_LOAD);
					else
						UpdateMenuPosition(curopt - 1);
				}
				else if(HasPressedRight(pnum)) {
					if(curopt != MENU_LAST_TRADE && PlayerCount() > MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1))
						UpdateMenuPosition(curopt + 1);
				}
			}
		}
		else if(curopt >= MENU_FIRST_ACCESSORY_PAGE && curopt <= MENU_LAST_ACCESSORY_PAGE) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE) {
					if(boxid == MBOX_6 && curopt != MENU_LAST_ACCESSORY_PAGE)
						UpdateMenuPosition(curopt + 1);
					else if(boxid == MBOX_7 || (curopt == MENU_LAST_ACCESSORY_PAGE && boxid == MBOX_3))
						UpdateMenuPosition(curopt - 1);
					else {
						// i is the accessory to toggle
						temp = boxid + ACCESSORY_PER_PAGE * (curopt - MENU_FIRST_ACCESSORY_PAGE) - 1;
						// I don't have this
						if(!CheckInventory(AccessoryInfo[temp][ACCESSORY_NAME]))
							ShowPopup(POPUP_ACCESSORYNOTFOUND, false, 0);
						else if(IsAccessoryEquipped(0, 1 << temp)) { // I have and already equipped it
							LocalAmbientSound("RPG/MenuChoose", 127);
							UnequipAccessory(1 << temp);
						}
						else if(!ReachedAccessoryLimit()) { // I don't have this, and didn't equip
							LocalAmbientSound("RPG/MenuChoose", 127);
							EquipAccessory(1 << temp);
						}
						else
							ShowPopup(POPUP_MAXACCESSORYEQUIPPED, false, 0);
					}
				}
			}
			if(HasPressedLeft(pnum)) {
				if(curopt != MENU_FIRST_ACCESSORY_PAGE)
					UpdateMenuPosition(curopt - 1);
				else
					UpdateMenuPosition(MENU_LOAD);
			}
			else if(HasPressedRight(pnum)) {
				if(curopt != MENU_LAST_ACCESSORY_PAGE)
					UpdateMenuPosition(curopt + 1);
			}
		}
		else if(curopt == MENU_SHOP) {
			if(HasLeftClicked(pnum)) {
				if(boxid == MBOX_1)
					temp = MENU_SHOP_WEAPON;
				else if(boxid == MBOX_2)
					temp = MENU_SHOP_AMMOSELECT;
				else if(boxid == MBOX_3)
					temp = MENU_SHOP_ABILITY_1;
				else if(boxid == MBOX_4)
					temp = MENU_SHOP_ARTIFACT_1;
				else if(boxid == MBOX_5)
					temp = MENU_SHOP_ACCOUNT;
				#ifdef ISAPRILFIRST
				else if(boxid == MBOX_6)
					temp = MENU_SHOP_NFT;
				#endif
				else
					temp = -1;
				if(boxid != MAINBOX_NONE && temp != -1)
					UpdateMenuPosition(temp);
				
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_SHOP_WEAPON) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE && boxid < MBOX_9)
					UpdateMenuPosition(GetWeaponPage(boxid));
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_SHOP_WEAPON1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON1_BEGIN, SHOP_WEAPON_SLOT1END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON2_BEGIN, SHOP_WEAPON_SLOT2END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON3_1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON31_BEGIN, SHOP_WEAPON_SLOT31END, -1, MENU_SHOP_WEAPON3_2);
		else if(curopt == MENU_SHOP_WEAPON3_2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON32_BEGIN, SHOP_WEAPON_SLOT32END, MENU_SHOP_WEAPON3_1, MENU_SHOP_WEAPON3_3);
		else if(curopt == MENU_SHOP_WEAPON3_3)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON33_BEGIN, SHOP_WEAPON_SLOT33END, MENU_SHOP_WEAPON3_2, -1);
		else if(curopt == MENU_SHOP_WEAPON4_1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON41_BEGIN, SHOP_WEAPON_SLOT41END, -1, MENU_SHOP_WEAPON4_2);
		else if(curopt == MENU_SHOP_WEAPON4_2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON42_BEGIN, SHOP_WEAPON_SLOT42END, MENU_SHOP_WEAPON4_1, -1);
		else if(curopt == MENU_SHOP_WEAPON5_1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON51_BEGIN, SHOP_WEAPON_SLOT51END, -1, MENU_SHOP_WEAPON5_2);
		else if(curopt == MENU_SHOP_WEAPON5_2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON52_BEGIN, SHOP_WEAPON_SLOT52END, MENU_SHOP_WEAPON5_1, -1);
		else if(curopt == MENU_SHOP_WEAPON6_1)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON61_BEGIN, SHOP_WEAPON_SLOT61END, -1, MENU_SHOP_WEAPON6_2);
		else if(curopt == MENU_SHOP_WEAPON6_2)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON62_BEGIN, SHOP_WEAPON_SLOT62END, MENU_SHOP_WEAPON6_1, -1);
		else if(curopt == MENU_SHOP_WEAPON7)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON7_BEGIN, SHOP_WEAPON_SLOT7END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON8)
			HandleWeaponPageInput(pnum, boxid, SHOP_WEAPON8_BEGIN, SHOP_WEAPON_SLOT8END, -1, -1);
		else if(curopt == MENU_SHOP_AMMOSELECT) {
			if(HasLeftClicked(pnum)) {
				switch(boxid) {
					case 1:
						UpdateMenuPosition(MENU_SHOP_AMMO_1);
					break;
					case 2:
						UpdateMenuPosition(MENU_SHOP_AMMO_2);
					break;
					case 3:
						UpdateMenuPosition(MENU_SHOP_AMMO_3);
					break;
					case 4:
						UpdateMenuPosition(MENU_SHOP_AMMO_4);
					break;
					case 5:
						UpdateMenuPosition(MENU_SHOP_AMMO_SPECIAL1);
					break;
				}
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_SHOP_AMMO_1)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_CLIP, boxid, AMMOSLOT_CLIP_BEGIN, -1, MENU_SHOP_AMMO_1_2, false);
		else if(curopt == MENU_SHOP_AMMO_1_2)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_CLIP, boxid, AMMOSLOT_CLIP2_BEGIN, MENU_SHOP_AMMO_1, -1, false);
		else if(curopt == MENU_SHOP_AMMO_2)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_SHELL, boxid, AMMOSLOT_SHELL_BEGIN, -1, MENU_SHOP_AMMO_2_2, false);
		else if(curopt == MENU_SHOP_AMMO_2_2)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_SHELL, boxid, AMMOSLOT_SHELL2_BEGIN, MENU_SHOP_AMMO_2, -1, false);
		else if(curopt == MENU_SHOP_AMMO_3)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_ROCKET, boxid, AMMOSLOT_ROCKET_BEGIN, -1, -1, false);
		else if(curopt == MENU_SHOP_AMMO_4)
			HandleAmmoPageInput(pnum, DND_AMMOSLOT_CELL, boxid, AMMOSLOT_CELL_BEGIN, -1, -1, false);
		else if(curopt == MENU_SHOP_AMMO_SPECIAL1)
			HandleAmmoPageInput(pnum, -1, boxid, 0, -1, -1, true);
		else if(curopt == MENU_SHOP_ABILITY_1) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_ABILITY1_BEGIN, SHOP_ABILITY1_END, TRADE_BUY | TRADE_ABILITY, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
			else if(HasPressedRight(pnum))
				UpdateMenuPosition(MENU_SHOP_ABILITY_2);
		}
		else if(curopt == MENU_SHOP_ABILITY_2) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_ABILITY2_BEGIN, SHOP_LASTABILITY_INDEX, TRADE_BUY | TRADE_ABILITY, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP_ABILITY_1);
		}
		else if(curopt == MENU_SHOP_ARTIFACT_1) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_FIRSTARTI1_INDEX, SHOP_ARTIFACT1_END, TRADE_BUY | TRADE_ARTIFACT, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
			else if(HasPressedRight(pnum))
				UpdateMenuPosition(MENU_SHOP_ARTIFACT_2);
		}
		else if(curopt == MENU_SHOP_ARTIFACT_2) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_FIRSTARTI2_INDEX, SHOP_LASTARTI_INDEX, TRADE_BUY | TRADE_ARTIFACT, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP_ARTIFACT_1);
		}
		else if(curopt == MENU_SHOP_ACCOUNT) {
			if(HasLeftClicked(pnum)) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(pnum, boxid - 1, SHOP_ACCOUNT_BEGIN, SHOP_ACCOUNT_END, TRADE_BUY | TRADE_ACCOUNT, false);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_RESEARCH) {
			if(HasLeftClicked(pnum)) {
				if(boxid == MBOX_1)
					UpdateMenuPosition(MENU_RESEARCH_BODY);
				else if(boxid == MBOX_2)
					UpdateMenuPosition(MENU_RESEARCH_AMMO);
				else if(boxid == MBOX_3)
					UpdateMenuPosition(MENU_RESEARCH_GUNS);
				else if(boxid == MBOX_4)
					UpdateMenuPosition(MENU_RESEARCH_UTILITY);
				else if(boxid == MBOX_5) {
					// donate budget option, basically credit to budget conversion
					// 10,000 credits => 1k budget
					if(CheckInventory("Credit") >= DND_BUDGET_CONVERSION_CREDIT) {
						TakeInventory("Credit", DND_BUDGET_CONVERSION_CREDIT);
						GiveInventory("Budget", 1);
						LocalAmbientSound("RPG/MenuSell", 127);
					}
					else
						ShowPopup(POPUP_NOFUNDS, false, 0);
				}
			}
			else if(HasRightClicked(pnum) && boxid == MBOX_5) {
				// x10
				// donate budget option, basically credit to budget conversion
				// 10,000 credits => 1k budget
				if(CheckInventory("Credit") >= DND_BUDGET_CONVERSION_CREDIT * 10) {
					TakeInventory("Credit", DND_BUDGET_CONVERSION_CREDIT * 10);
					GiveInventory("Budget", 10);
					LocalAmbientSound("RPG/MenuSell", 127);
				}
				else
					ShowPopup(POPUP_NOFUNDS, false, 0);
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_RESEARCH_GUNS) {
			if(HasLeftClicked(pnum)) {
				if(boxid == MBOX_1)
					UpdateMenuPosition(MENU_RESEARCH_SLOTGUNS);
				if(boxid == MBOX_2)
					UpdateMenuPosition(MENU_RESEARCH_LUXURYGUNS);
			}
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_RESEARCH);
		}
		else if(curopt >= SHOP_RESPAGE_BEGIN && curopt <= SHOP_RESPAGE_END) {
			HandleResearchPageInput(pnum, curopt - SHOP_RESPAGE_BEGIN, boxid);
		}
		else if(curopt == MENU_ABILITY) {
			if(HasLeftClicked(pnum)) {
				if(boxid == MBOX_1) {
					SetInventory("DashDisabled", !CheckInventory("DashDisabled"));
					ACS_NamedExecuteAlways("DnD Toggle User Dash", 0);
					LocalAmbientSound("RPG/MenuChoose", 127);
				}
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt == MENU_HELP) {
			if(HasLeftClicked(pnum)) {
				if(boxid >= MBOX_1 && boxid <= MENU_HELP_END - MENU_HELP_BEGIN + 1)
					temp = MENU_HELP_BEGIN + boxid - 1;
				else if(boxid == MBOX_10) {
					GiveInventory("SetMapInfo", 1);
					LocalAmbientSound("RPG/MenuChoose", 127);
					temp = -1;
				}
				else if(boxid == MBOX_11) {
					GiveInventory("SetModTierInfo", 1);
					LocalAmbientSound("RPG/MenuChoose", 127);
					temp = -1;
				}
				else if(boxid == MBOX_12) {
					GiveInventory("SetTempWepIgnore", 1);
					SetInventory("DnD_NoTempPickup", !CheckInventory("DnD_NoTempPickup"));
					LocalAmbientSound("RPG/MenuChoose", 127);
					temp = -1;
				}
				if(boxid != MAINBOX_NONE && temp != -1)
					UpdateMenuPosition(temp);
			}
			if(HasPressedLeft(pnum))
				ReturnToMain();
		}
		else if(curopt >= MENU_HELP_BEGIN && curopt <= MENU_HELP_END) {
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_HELP);
			if(curopt == MENU_HELP_MMODS && HasLeftClicked(pnum) && boxid >= MBOX_1)
				UpdateMenuPosition(MENU_HELP_MMODS_WEAKNESS + boxid - 1);
		}
		else if(curopt >= MENU_MMOD_HELP_BEGIN && curopt <= MENU_MMOD_HELP_END) {
			if(HasPressedLeft(pnum))
				UpdateMenuPosition(MENU_HELP_MMODS);
		}
		#ifdef ISAPRILFIRST
		else if(curopt == MENU_SHOP_NFT) {
			if(HasLeftClicked(pnum) && boxid != MAINBOX_NONE) {
				// check if player has enough $$
				if(CheckInventory("Credit") >= NFT_COST) {
					if(!IsSet(CheckInventory("NFT_Token"), boxid - 1)) {
						TakeCredit(NFT_COST);
						SetInventory("NFT_Token", SetBit(CheckInventory("NFT_Token"), boxid - 1));
						ACS_NamedExecuteAlways("DnD NFT Announce", 0, pnum, boxid - 1);
					}
					else
						ShowPopup(POPUP_OWNNFT, false, 0);
				}
				else
					ShowPopup(POPUP_NOFUNDS, false, 0);
			}
		}
		#endif
		
		ClearPlayerInput(pnum, true);
		
		Delay(const:DND_MENU_INPUTDELAYTICS);
		MenuInputData[pnum][DND_MENUINPUT_DELAY] = 0;
	}
}

Script "DND Menu Cleanup" (int pnum) CLIENTSIDE {
	if(pnum != ConsolePlayerNumber())
		Terminate;
		
	ClearMenuDisplay();
}

Script "DnD Toggle User Dash" (void) CLIENTSIDE {
	SetCVar("dnd_dashstatus", !GetCVar("dnd_dashstatus"));
}

Script "DnD Trade Cancel Button" (int tradee) {
	Delay(4);
	CancelTradeRoutine(tradee);
}

Script "DnD Trade Countdown" (int p1, int p2) CLIENTSIDE {
	if(ConsolePlayerNumber() != p1)
		Terminate;
	// Handle timer display
	int lim = 7 * Clamp_Between(GetCVar("dnd_trade_timer"), 1, 10);
	int count = 0;
	
	while(count < lim && CheckActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed") && CheckActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed")) {
		SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
		SetFont("BIGFONT");
		HudMessage(s:"\c[W3]", d:(lim - count + 6) / 7; HUDMSG_PLAIN, RPGMENUTRADECOUNTDOWNID, -1, 110.4, 160.0, 0.0);
		SetHudSize(HUDMAX_X * 3 / 2, HUDMAX_Y * 3 / 2, 1);
		Delay(const:5);
		++count;
	}
	
	DeleteText(RPGMENUTRADECOUNTDOWNID);
}

// p1 is us
Script "DnD Trade Counter" (int p1, int p2) {
	int lim = 7 * Clamp_Between(GetCVar("dnd_trade_timer"), 1, 10);
	int count = 0;
	while(count < lim && CheckActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed") && CheckActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed")) {
		Delay(5);
		++count;
	}
	if(count == lim) {
		TransferTradeItems(p1, p2);
		TransferTradeItems(p2, p1);
		
		// check if commenting this causes any issues, we already save player inventories when they spectate
		// ACS_NamedExecuteAlways("DnD Save Player Inventory", 0, p1 | (CheckActorInventory(p1 + P_TIDSTART, "DnD_CharacterID") << 16), p2 | (CheckActorInventory(p2 + P_TIDSTART, "DnD_CharacterID") << 16));
		
		// take away confirmation stuff
		TakeActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed", 1);
		TakeActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed", 1);
		// finish trade view related stuff
		GiveActorInventory(p1 + P_TIDSTART, "DnD_CleanTradeviewRequest", 1);
		GiveActorInventory(p2 + P_TIDSTART, "DnD_CleanTradeviewRequest", 1);
		GiveActorInventory(p1 + P_TIDSTART, "DnD_Trade_Cooldown", 1);
		GiveActorInventory(p2 + P_TIDSTART, "DnD_Trade_Cooldown", 1);
		CancelTrade(p1);
		CancelTrade(p2);
	}
}

Script "DnD Trade Window" (int pnum, int giveWindow) {
	SetActivator(pnum + P_TIDSTART);
	
	if(giveWindow)
		GiveInventory("DnD_TradeAcceptWindow", 1);
	
	int lim = 5 * Clamp_Between(GetCVar("dnd_trade_window"), 5, 20);
	for(int i = 0; i < lim && !CheckInventory("InTradeView"); ++i)
		Delay(const:7);
	
	if(!CheckInventory("InTradeView")) {
		BreakTradesBetween(pnum);
		TakeInventory("DnD_TradeAcceptWindow", 1);
	}
}

Script "DnD Menu Popup" (int pnum, int isSell, int activebox) {
	SetActivator((pnum & 0xFFFF) + P_TIDSTART);
	if(isSell) {
		GiveInventory("DnD_SellConfirm", 1);
		TakeInventory("DnD_ShowPopup", 1);
		TakeInventory("DnD_PopupError", 1);
		GiveInventory("DnD_PopupSell", 1);
		GiveInventory("DnD_ShowSellPopup", 1);
		SetInventory("DnD_PopupID", activebox);
		SetInventory("ActivePopupBox", pnum >> 16);
	}
	else {
		GiveInventory("DnD_ShowPopup", 1);
		GiveInventory("DnD_PopupError", 1);
		TakeInventory("DnD_PopupSell", 1);
		TakeInventory("DnD_ShowSellPopup", 1);
		SetInventory("ActivePopupBox", 0);
		SetInventory("DnD_PopupID", activebox);
	}
	
	ACS_NamedExecuteAlways("DnD Menu Popup Show", 0, pnum >> 16, pnum & 0xFFFF, isSell);
}

Script "DnD Menu Popup Show" (int id, int pnum, int isSell) CLIENTSIDE {
	// 0 for buy being possible, 2 if credits was not enough, 1 if credits was enough but you are maxed on the item and 3 if neither were satisfied 4 if item can't be sold
	SetActivator(pnum + P_TIDSTART);
	
	if(ConsolePlayerNumber() != pnum)
		Terminate;
	
	int popuptype = POPUP_ERROR;
	if(isSell)
		popuptype = POPUP_SELL;

	SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
	SetFont("DND_ERR");
	if(!isSell)
		HudMessage(s:"A"; HUDMSG_FADEOUT, RPGMENUPOPUPID, -1, 216.1, 128.1, 1.0, 1.0);
	else
		HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUPOPUPID, -1, 216.1, 128.1, 0.0);
	SetFont("SMALLFONT");
	str toshow = "", title = "";
	if(popuptype == POPUP_ERROR) {
		title = "DND_MENU_ERROR";
		// id is minimum 1
		toshow = GetPopupText(id);
		LocalAmbientSound("RPG/MenuError", 127);
	}
	else if(popuptype == POPUP_SELL) {
		title = "DND_MENU_CONFIRM";
		// we should be able to do this because theres an underlying assumption that the thing we are selling can only be a weapon (for now at least)
		toshow = StrParam(l:"DND_MENU_SELLCONFIRM", s:"\n\cd", s:GetShopWeaponTag(CheckInventory("DnD_PopupID")), s:"\c- ?");
	}

	SetHudClipRect(220, 132, 180, 128, 180);
	if(!isSell) {
		HudMessage(s:"\c[Q2]", l:title; HUDMSG_FADEOUT, RPGMENUPOPUPID - 1, -1, 316.4, 136.1, 1.0, 1.0);
		HudMessage(l:toshow; HUDMSG_FADEOUT, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 160.1, 1.0, 1.0);
	}
	else {
		HudMessage(s:"\c[Q2]", l:title; HUDMSG_PLAIN, RPGMENUPOPUPID - 1, -1, 316.4, 136.1, 0.0);
		HudMessage(s:toshow; HUDMSG_PLAIN, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 160.1, 0.0);
	}
	SetHudClipRect(0, 0, 0, 0, 0);
}

Script "DnD Menu Notif" (int pnum, int extra, int activebox) {
	int popupid = pnum >> 16;
	pnum &= 0xFFFF;

	SetActivator(pnum + P_TIDSTART);

	GiveInventory("DnD_ShowPopup", 1);
	SetInventory("ActivePopupBox", activebox);
	SetInventory("DnD_PopupID", popupid);
	
	ACS_NamedExecuteAlways("DnD Menu Notif Show", 0, pnum, popupid, extra);
}

Script "DnD Menu Notif Show" (int pnum, int popupid, int extra) CLIENTSIDE {
	// 0 for buy being possible, 2 if credits was not enough, 1 if credits was enough but you are maxed on the item and 3 if neither were satisfied 4 if item can't be sold
	SetActivator(pnum + P_TIDSTART);
	
	if(ConsolePlayerNumber() != pnum)
		Terminate;

	SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
	
	SetFont("DND_ERR");
	HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUPOPUPID, -1, 216.1, 128.1, 0.0);
	
	SetFont("SMALLFONT");
	SetHudClipRect(220, 132, 180, 128, 180);
	HudMessage(s:"\cd", l:"DND_MENU_CONFIRM"; HUDMSG_PLAIN, RPGMENUPOPUPID - 1, -1, 316.4, 136.1, 0.0);
	if(popupid == POPUP_SCAVENGECONFIRM)
		HudMessage(
			l:GetPopupText(popupid), s:"\cd$", d:extra, s:"\c-?", s:" (\cd", k:"+altattack", s:" = ", l:"DND_MENU_CONFIRM", s:", \cg", k:"+attack", s:"\c- = \cg", l:"DND_MENU_CANCEL", s:"\c-)\n",
			l:"DND_DISASS_CHANCE", s:": \ci", d:CheckInventory("DnD_ItemCursorMsg") >> 16, s:"%";
			HUDMSG_PLAIN, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 144.1, 0.0
		);
	else
		HudMessage(l:GetPopupText(popupid); HUDMSG_PLAIN, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 144.1, 0.0);
	SetHudClipRect(0, 0, 0, 0, 0);
}

Script "DnD Menu Sell Popup Clear" (void) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber())
		Terminate;
	HudMessage(s:""; HUDMSG_PLAIN, RPGMENUPOPUPID, -1, 316.4, 136.1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, RPGMENUPOPUPID - 1, -1, 316.4, 136.1, 1.0);
	HudMessage(s:""; HUDMSG_PLAIN, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 160.1, 1.0);
}

Script "DnD Menu Investment Sync" (int pnum, int resid, int val) CLIENTSIDE {
	ResearchInvestments[pnum][resid] = val;
	SetResultValue(0);
}

Script "DnD Open Inventory" (void) NET {
	ACS_ExecuteAlways(900, 0, MENU_LOAD_CHARM, 1);
}

#ifdef ISAPRILFIRST
Script "DnD NFT Announce" (int pnum, int id) CLIENTSIDE {
	AmbientSound("CoolNFT", 127);
	
	int cnt = 10 * TICRATE + 17;
	int u = 0;
	int x = 640.0;
	int y = 480.0;
	
	int r = 200;
	
	// only log first instance
	int f = HUDMSG_LOG | HUDMSG_PLAIN | HUDMSG_ALPHA;
	
	while(cnt--) {
		x = 640.0 - r * sin(u);
		y = 480.0 - r * sin(u) * 4 / 3;
		SetHudSize(x >> 16, y >> 16, 1);
		SetFont("BIGFONT");
		HudmessageBold(
			n:pnum, s: " \cfHAS JUST BOUGHT THE \cv", l:StrParam(s:"DND_NFT_TAG", d:id), s: "\cf NFT!!!!";
			f, 1, CR_GOLD, GetIntegerBits(x / 2) + 0.4, 0.1 + GetIntegerBits(y / 30), 0.1, 0.25 + Clamp_Between(FixedMul(0.75, sin(u)), 0, 0.75)
		);
		u = (u + 0.0075) % 1.0;
		Delay(1);
		f = HUDMSG_PLAIN | HUDMSG_ALPHA;
	}
}
#endif
