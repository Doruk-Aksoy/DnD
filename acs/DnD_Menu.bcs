#library "DND_MENU"
#include "zcommon.h"

#nocompact

#include "DnD_MenuFuncs.h"

/*
- Main idea here is simple. There are two main scripts: One draws the menu CLIENTSIDE, the other receives button info and stuff from client and vital info from server.
- There are A TON of helper functions to formulate things. Getters are all over the place.
- Everything in the shop has an ID associated with it.
- Everything is flexible and can be customized very easily (!!!). The essential code for input listeners etc are provided, and can be changed at will depending on the menu pages to achieve
different behavior.

============= ADDING NEW WEAPONS TO SHOP =============

1) Add it to DnD_Weapons.h
2) Add constant to DnD_MenuConstants.h, modify begin/last macros if position of them has changed
3) Add price, shop menu labels, shop menu helper text, research requirements (if any) and WeaponDrawInfo to DnD_MenuTables.h
4) Add weapon tip to DnD.h
5) Increment box count of whichever slot page it belongs to in DnD_MenuFuncs => LoadPane function
6) Done!
*/

// Shows the menu
Script 900 (void) NET {
	if(StatListOpened[PlayerNumber()]) {
		SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);
		TakeInventory("P_Frozen", 1);
		StatListOpened[PlayerNumber()] = 0;
		SetInventory("ShowingMenu", 0);
		SetInventory("MenuOption", 5);
		SetInventory("MenuPosX", 0);
		SetInventory("DnD_PlayerItemIndex", 0);
		SetInventory("DnD_PlayerPrevItemIndex", 0);
		SetInventory("MadeChoice", 0);
		SetInventory("DnD_PopupId", 0);
		SetInventory("DnD_SelectedCharmBox", 0);
		SetInventory("DnD_SelectedInventoryBox", 0);
		SetInventory("DnD_Crafting_MaterialPage", 0);
		SetInventory("DnD_Crafting_ItemPage", 0);
		SetInventory("DnD_Trade_Confirmed", 0);
		SetInventory("DnD_TradeSpaceFit", 0);
		TakeInventory("DnD_InventoryView", 1);
		TakeInventory("DnD_StashView", 1);
		TakeInventory("InTradeView", 1);
		TakeInventory("DnD_ShowPopup", 1);
		TakeInventory("DnD_ShowSellPopup", 1);
		TakeInventory("DnD_SellConfirm", 1);
		DecideAccessories();
		//SetInventory("MenuPosY", 5);
		LocalAmbientSound("RPG/MenuClose", 127);
		ACS_NamedExecuteAlways("DND Menu Cleanup", 0);
		
		int tradee = GetTradee();
		// cancel out of a trade if there is one
		if(tradee != -1) {
			CancelTradeRoutine(tradee);
		}
	}
	else {
		// a little extra check for singleplayer case
		if((GameType() == GAME_SINGLE_PLAYER || !PlayerIsSpectator(PlayerNumber())) && !CheckInventory("ParsingData")) {
			if(GameType() != GAME_SINGLE_PLAYER && CheckInventory("DnD_SyncMe")) {
				TakeInventory("DnD_SyncMe", 1);
				ACS_NamedExecuteAlways("Force Sync Player Global Data", 0);
			}
			SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN);
			GiveInventory("P_Frozen", 1);
			StatListOpened[PlayerNumber()] = 1;
			SetInventory("MenuOption", MENU_MAIN);
			SetInventory("MenuPosX", 0);
			SetInventory("ShowingMenu", 1);
			SetInventory("Mouse_X", HUDMAX_XF / 2);
			SetInventory("Mouse_Y", HUDMAX_YF / 2);
			LocalAmbientSound("RPG/MenuOpen", 127);
			DeleteTextRange(RPGMENUCURSORID, RPGMENUINVENTORYID);
			
			ACS_NamedExecuteAlways("DND Menu Draw", 0);
			ACS_NamedExecuteAlways("DND Menu Input Handle", 0);
		}
		else {
			SetHudSize(800, 600, 1);
			HudMessage(s: "You have to be in the game to use the menu"; HUDMSG_FADEINOUT, MENUUSEID, CR_GOLD, 400.4, 2.1, 4.0, 1.0, 1.0);
		}
	}
}

Script "DND Menu Popup Handle" (void) {
	while(CheckInventory("DnD_ShowPopup") || CheckInventory("DnD_ShowSellPopup"))
		Delay(1);
	TakeInventory("DnD_PopupHack", 1);
	TakeInventory("DnD_PopupError", 1);
	TakeInventory("DnD_PopupSell", 1);
	TakeInventory("DnD_PopupFullAmmo", 1);
}

Script "DND Server Box Receive" (int ptid, int boxid, int mainboxid) NET {
	GiveActorInventory(ptid, "DND_ACK", 1);
	// THIS part here is the reason menu didn't work on TSPG. Using inventories here is just... why...
	MenuBoxes[ptid - P_TIDSTART][DND_ACTIVEBOX] = boxid;
	MenuBoxes[ptid - P_TIDSTART][DND_ACTIVEMAINBOX] = mainboxid;
}

Script "DND Menu Cleanup" (void) CLIENTSIDE {
	DeleteText(RPGMENUID);
	DeleteText(RPGMENUBACKGROUNDID);
	DeleteText(RPGMENULARRID);
	DeleteText(RPGMENURETARRID);
	DeleteText(RPGMENURARRID);
	DeleteText(RPGMENUHELPID);
	DeleteText(RPGMENUNAMEID);
	DeleteText(RPGMENUHELPCORNERID);
	DeleteText(RPGMENUHELPCORNERIDMAIN);
	DeleteText(RPGMENUPAGEID);
	DeleteText(RPGMENUPAGEID - 1);
	
	DeleteTextRange(RPGMENUCURSORID, RPGMENUINVENTORYID);
	DeleteTextRange(RPGMENUINFOID, RPGMENUWEAPONPANELID);
	DeleteTextRange(RPGMENUITEMIDEND, RPGMENUITEMID);

	// login screen for hardcore
	DeleteText(DND_HARDCORE_SCREENID);
	CleanInventoryInfo();
}

Script "DND On Disconnect Cleanup" (int pnum) DISCONNECT CLIENTSIDE {
	ACS_NamedExecuteAlways("DND Menu Cleanup", 0);
}

Script "DND Menu Draw" (void) CLIENTSIDE {
	if(ConsolePlayerNumber() != PlayerNumber()) 
		Terminate;
	
	int animcounter = 0, framecounter = 0, pnum = PlayerNumber(), temp;
	int popupid, i = 0, j = 0, k = 0, mousex, mousey;
	str toshow;
	bool drawlit = false, sendBox = false;
	int curopt, curopt_prev = MENU_NULL;
	int boxid = MAINBOX_NONE + 1, boxid_prev = MAINBOX_NONE, mainboxid = MAINBOX_NONE + 1, mainboxid_prev = MAINBOX_NONE;
	auto CurrentPane = GetPane();
	ResetPane(CurrentPane);
	auto InventoryPane = GetInventoryPane();
	auto TradePane = GetTradePane();

	while(CheckInventory("ShowingMenu")) {
		// Load cursor stuff
		mousex = GetCursorPos(GetPlayerInput(ConsolePlayerNumber(), INPUT_YAW), MOUSE_INPUT_X);
		mousey = GetCursorPos(GetPlayerInput(ConsolePlayerNumber(), INPUT_PITCH), MOUSE_INPUT_Y);
		SetInventory("Mouse_X", mousex);
		SetInventory("Mouse_Y", mousey);
		curopt = CheckInventory("MenuOption");
		popupid = CheckInventory("DnD_PopupId");
		
		if(curopt != curopt_prev) {
			ResetPane(CurrentPane);
			LoadPane(CurrentPane, curopt);
			ScrollPos = 0;
			k = 0;
			SetInventory("DnD_PlayerItemIndex", 0);
			SetInventory("DnD_PlayerPrevItemIndex", 0);
		}
		
		// cleanup
		if(curopt_prev <= MENU_LOAD_CRAFTING_LAST && curopt_prev >= MENU_LOAD_CRAFTING)
			DeleteTextRange(RPGMENUID - MATERIALBOX_OFFSET - 3 * MAX_CRAFTING_MATERIALBOXES, RPGMENUID - 2);
		if(curopt_prev >= MENU_LOAD_INVENTORY && curopt_prev <= MENU_LOAD_CRAFTING_INVENTORY)
			CleanInventoryInfo();
		
		curopt_prev = curopt;
		
		// set to none or sth if this is up
		if(CheckInventory("DnD_SellConfirm")) {
			boxid = MenuBoxes[pnum][DND_ACTIVEBOX];
			mainboxid = MenuBoxes[pnum][DND_ACTIVEMAINBOX];
		}
		else {
			if(curopt < MENU_LOAD_CRAFTING || curopt > MENU_LOAD_CRAFTING_LAST) {
				if(!CheckInventory("DnD_InventoryView") && !CheckInventory("InTradeView") && !CheckInventory("DnD_StashView"))
					boxid = GetTriggeredBoxOnPane(CurrentPane, mousex, mousey, curopt);
				else if(CheckInventory("DnD_InventoryView"))
					boxid = GetTriggeredBoxOnInventoryPane(InventoryPane, mousex, mousey);
				else if(CheckInventory("InTradeView"))
					boxid = GetTriggeredBoxOnTradePane(TradePane, mousex, mousey);
				else if(CheckInventory("DnD_StashView")) // I used the trade pane variable to hold the stash content
					boxid = GetTriggeredBoxOnStashPane(TradePane, mousex, mousey);
			}
			else
				boxid = GetTriggeredBoxOnCraftingPane(InventoryPane, mousex, mousey);
			if(CheckInventory("DnD_InventoryView") || CheckInventory("InTradeView") || CheckInventory("DnD_StashView") || (curopt >= MENU_LOAD_CRAFTING && curopt <= MENU_LOAD_CRAFTING_LAST))
				mainboxid = MAINBOX_NONE;
			else
				mainboxid = GetTriggeredBoxOnMainPane(mousex, mousey);
			/*SetInventory("ActiveBox", boxid);
			SetInventory("ActiveMainBox", mainboxid);*/
		}
		drawlit = 0;
		// play sound if box changed
		// ifs are seperate because scroll pos should only change if current in-pane box is changed
		if(boxid != boxid_prev) {
			if(boxid != MAINBOX_NONE) {
				ScrollPos = 0;
				if(!CheckInventory("DnD_InventoryView") && !CheckInventory("InTradeView") && !CheckInventory("DnD_StashView"))
					LocalAmbientSound("RPG/MenuMove", 127);
			}
			sendBox = true;
		}
		
		if(mainboxid != mainboxid_prev) {
			if(mainboxid != MAINBOX_NONE)
				LocalAmbientSound("RPG/MenuMove", 127);
			sendBox = true;
		}
		
		if(sendBox) {
			// server gets a few extra info in boxid
			temp = boxid | (CheckInventory("DnD_PlayerItemIndex") << DND_MENU_ITEMSAVEBITS1) | (CheckInventory("DnD_PlayerPrevItemIndex") << DND_MENU_ITEMSAVEBITS2);
			NamedRequestScriptPuke("DND Server Box Receive", PlayerNumber() + P_TIDSTART, temp, mainboxid);
		}
		boxid_prev = boxid;
		mainboxid_prev = mainboxid;

		SetHudSize(384, 200, 1);
		SetFont("DND_STAT");
		HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUID, -1, 192.0, 100.0, 0.0, 0.0);
		SetFont("DND_STAB");
		HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUBACKGROUNDID, -1, 192.0, 100.0, 0.0, 0.0);
		// the 3 buttons at bottom
		DrawClickableButton("LARR", mainboxid, MAINBOX_LARR, RPGMENULARRID, 218.0, 184.0, "LARRO", "LARR_P");
		DrawClickableButton("RETARR", mainboxid, MAINBOX_RET, RPGMENURETARRID, 251.0, 184.0, "RETARRO", "RETARR_P");
		DrawClickableButton("RARR", mainboxid, MAINBOX_RARR, RPGMENURARRID, 284.0, 184.0, "RARRO", "RARR_P");
		SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
		DrawCursor();
		SetFont("SMALLFONT");
		DeleteTextRange(RPGMENUITEMIDEND, RPGMENUITEMID);
		DeleteTextRange(RPGMENUPAGEID - 1, RPGMENUPAGEID);
		
		if(CheckInventory("DnD_InventoryView")) {
			LoadInventoryView(InventoryPane);
			HandleInventoryView(boxid);
			j = 1;
		}
		else if(CheckInventory("DnD_StashView")) {
			LoadStashView(TradePane);
			HandleStashView(boxid);
			j = 1;
		}
		else if(CheckInventory("InTradeView")) {
			LoadTradeView(TradePane);
			j = 1;
		}
		else {
			if(j) {
				DeleteTextRange(RPGMENUPOPUPID + 1, RPGMENUINVENTORYID);
				j = 0;
			}
		}
		
		if(curopt == MENU_STAT1) {
			HudMessage(s:"--- Player Stats ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			SetHudClipRect(192, 56, 256, 144, 256, 1);
			HudMessage(s:"\c[Y5]Level: \c-", d:CheckInventory("Level"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 192.1, 64.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Experience: \c-", d:CheckInventory("Exp"), s:" / ", d:LevelCurve[CheckInventory("Level") - 1]; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, 80.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, 96.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Attribute Points: \c-", d:CheckInventory("AttributePoint"); HUDMSG_PLAIN, RPGMENUITEMID - 10, CR_WHITE, 192.1, 112.0, 0.0, 0.0);
			SetHudClipRect(0, 0, 0, 0, 0);
			
			DrawToggledLabel("STR", -1, boxid, MBOX_1, RPGMENUITEMID - 3, "\c[Y5]", "\c[B1]", 192.1, 128.0);
			DrawToggledLabel("DEX", -1, boxid, MBOX_2, RPGMENUITEMID - 4, "\c[Y5]", "\c[B1]", 192.1, 144.0);
			DrawToggledLabel("BUL", -1, boxid, MBOX_3, RPGMENUITEMID - 5, "\c[Y5]", "\c[B1]", 192.1, 160.0);
			DrawToggledLabel("CHR", -1, boxid, MBOX_4, RPGMENUITEMID - 6, "\c[Y5]", "\c[B1]", 192.1, 176.0);
			DrawToggledLabel("VIT", -1, boxid, MBOX_5, RPGMENUITEMID - 7, "\c[Y5]", "\c[B1]", 192.1, 192.0);
			DrawToggledLabel("INT", -1, boxid, MBOX_6, RPGMENUITEMID - 8, "\c[Y5]", "\c[B1]", 192.1, 208.0);
			// draw values seperately so they align
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Strength"); HUDMSG_PLAIN, RPGMENUITEMID - 11, CR_WHITE, 256.1, 128.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Dexterity"); HUDMSG_PLAIN, RPGMENUITEMID - 12, CR_WHITE, 256.1, 144.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Bulkiness"); HUDMSG_PLAIN, RPGMENUITEMID - 13, CR_WHITE, 256.1, 160.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Charisma"); HUDMSG_PLAIN, RPGMENUITEMID - 14, CR_WHITE, 256.1, 176.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Vitality"); HUDMSG_PLAIN, RPGMENUITEMID - 15, CR_WHITE, 256.1, 192.0, 0.0);
			HudMessage(d:STAT_BASE + CheckInventory("PSTAT_Intellect"); HUDMSG_PLAIN, RPGMENUITEMID - 16, CR_WHITE, 256.1, 208.0, 0.0);
			// draw bonus stat acquired
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_STR"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 17, CR_WHITE, 320.1, 128.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_DEX"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 18, CR_WHITE, 320.1, 144.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_BUL"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 19, CR_WHITE, 320.1, 160.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_CHR"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 20, CR_WHITE, 320.1, 176.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_VIT"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 21, CR_WHITE, 320.1, 192.0, 0.0);
			HudMessage(s:"(+ \cd", d:CheckInventory("IATTR_StatBonus_INT"), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - 22, CR_WHITE, 320.1, 208.0, 0.0);
			
			
			SetHudClipRect(184, 208, 256, 64, 256, 1);
			if(boxid != MAINBOX_NONE)
				HudMessage(s:"* ", s:AttributeExplanation[boxid - 1]; HUDMSG_PLAIN, RPGMENUITEMID - 40, CR_WHITE, 184.1, 216.1, 0.0, 0.0);
			SetHudClipRect(0, 0, 0, 0, 0);
			
			HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_STAT2) {
			ListenScroll(-96, 0);
			SetHudClipRect(192, 56, 256, 224, 256, 1);
			
			i = CheckInventory("PSTAT_Bulkiness");
			temp = 64.0 + 6.0 * ScrollPos;
			
			HudMessage(s:"--- Current Gains ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			HudMessage(s:"+ \c[Q9]", d:GetSpawnHealth() - DND_BASE_HEALTH, s:"\c- health capacity"; HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 192.1, temp, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetArmorCap(true) - DND_BASE_ARMOR_SHOW, s:"\c- armor capacity"; HUDMSG_PLAIN, RPGMENUITEMID - 2, CR_WHITE, 192.1, temp + 16.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:((DND_STR_GAIN * CheckInventory("PSTAT_Strength")) >> 16) * 100, s:"%\c- bonus melee damage"; HUDMSG_PLAIN, RPGMENUITEMID - 3, CR_WHITE, 192.1, temp + 32.0, 0.0, 0.0);
			if(i > 100)
				HudMessage(s:"+ \c[Q9]", f:ftrunc(100 * DND_BULKINESS_GAIN * 100 + (i - 100) * DND_BULKINESS_GAIN_AFTER100), s:"%\c- armor efficiency"; HUDMSG_PLAIN, RPGMENUITEMID - 4, CR_WHITE, 192.1, temp + 48.0, 0.0, 0.0);
			else
				HudMessage(s:"+ \c[Q9]", f:ftrunc(100 * DND_BULKINESS_GAIN * CheckInventory("PSTAT_Bulkiness")), s:"%\c- armor efficiency"; HUDMSG_PLAIN, RPGMENUITEMID - 4, CR_WHITE, 192.1, temp + 48.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", f:ftrunc(DND_DEX_GAIN * CheckInventory("PSTAT_Dexterity")), s:"%\c- physical damage"; HUDMSG_PLAIN, RPGMENUITEMID - 5, CR_WHITE, 192.1, temp + 64.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", f:ftrunc(DND_INT_GAIN * CheckInventory("PSTAT_Intellect")), s:"%\c- magic damage"; HUDMSG_PLAIN, RPGMENUITEMID - 6, CR_WHITE, 192.1, temp + 80.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", f:ftrunc(DND_CHR_GAIN * CheckInventory("PSTAT_Charisma")), s:"%\c- discount"; HUDMSG_PLAIN, RPGMENUITEMID - 7, CR_WHITE, 192.1, temp + 96.0, 0.0, 0.0);
			if(GetBonusPlayerSpeed(pnum) >= 0)
				HudMessage(s:"+ \c[Q9]", f:ftrunc(100 * GetBonusPlayerSpeed(pnum)), s:"%\c- movement speed"; HUDMSG_PLAIN, RPGMENUITEMID - 8, CR_WHITE, 192.1, temp + 112.0, 0.0, 0.0);
			else
				HudMessage(s:"- \c[Q2]", f:ftrunc(100 * GetBonusPlayerSpeed(pnum)), s:"%\c- movement speed"; HUDMSG_PLAIN, RPGMENUITEMID - 8, CR_WHITE, 192.1, temp + 112.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", f:ftrunc(100 * (GetDropChance(pnum, 0) - 1.0)), s:"%\c- drop chance"; HUDMSG_PLAIN, RPGMENUITEMID - 9, CR_WHITE, 192.1, temp + 128.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:CalculateWisdomBonus(pnum), s:"%\c- exp bonus"; HUDMSG_PLAIN, RPGMENUITEMID - 10, CR_WHITE, 192.1, temp + 144.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:CalculateGreedBonus(pnum), s:"%\c- credit bonus"; HUDMSG_PLAIN, RPGMENUITEMID - 11, CR_WHITE, 192.1, temp + 160.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_MAGAZINE_INCREASE), s:"%\c- magazine cap"; HUDMSG_PLAIN, RPGMENUITEMID - 12, CR_WHITE, 192.1, temp + 176.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_PELLET_INCREASE), s:"%\c- more pellets"; HUDMSG_PLAIN, RPGMENUITEMID - 13, CR_WHITE, 192.1, temp + 192.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_EXPLOSION_RADIUS), s:"%\c- explosion radius"; HUDMSG_PLAIN, RPGMENUITEMID - 14, CR_WHITE, 192.1, temp + 208.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_EXPLOSIVE_RESIST), s:"%\c- self explosive resist"; HUDMSG_PLAIN, RPGMENUITEMID - 15, CR_WHITE, 192.1, temp + 224.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_AMMOGAIN_CHANCE), s:"%\c- chance to gain ammo back on firing"; HUDMSG_PLAIN, RPGMENUITEMID - 16, CR_WHITE, 192.1, temp + 240.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_AMMOGAIN_INCREASE), s:"%\c- more ammo from pickups"; HUDMSG_PLAIN, RPGMENUITEMID - 17, CR_WHITE, 192.1, temp + 256.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_REGENCAP_INCREASE), s:"\c- to your regen cap"; HUDMSG_PLAIN, RPGMENUITEMID - 18, CR_WHITE, 192.1, temp + 272.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_KNOCKBACK_RESIST), s:"\c- knockback resist"; HUDMSG_PLAIN, RPGMENUITEMID - 19, CR_WHITE, 192.1, temp + 288.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_DAMAGEPERCENT_INCREASE), s:"%\c- increased damage"; HUDMSG_PLAIN, RPGMENUITEMID - 20, CR_WHITE, 192.1, temp + 304.0, 0.0, 0.0);
			HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_ACCURACY_INCREASE), s:"\c- accuracy rating"; HUDMSG_PLAIN, RPGMENUITEMID - 21, CR_WHITE, 192.1, temp + 320.0, 0.0, 0.0);
		
			for(i = DND_TALENT_BEGIN; i < DND_TALENT_END; ++i) {
				HudMessage(s:"+ \c[Q9]", d:GetDamageTypeBonus(pnum, i), s:"%\c- ", s:TalentNames[i][TALENT_NAME], s:" Damage bonus"; HUDMSG_PLAIN, RPGMENUITEMID - 22 - 2 * i, CR_WHITE, 192.1, temp + 336.0 + 32.0 * i, 0.0, 0.0);
				HudMessage(s:"+ \c[Q9]", d:MapTalentToFlatBonus(pnum, i), s:"\c- to ", s:TalentNames[i][TALENT_NAME], s:" damage"; HUDMSG_PLAIN, RPGMENUITEMID - 23 - 2 * i, CR_WHITE, 192.1, temp + 352.0 + 32.0 * i, 0.0, 0.0);
			}
			j = 2 * (DND_TALENT_END - 1);
			for(i = 0; i < MAX_WEAPON_SLOTS; ++i)
				HudMessage(s:"+ \c[Q9]", d:GetPlayerAttributeValue(pnum, INV_SLOT1_DAMAGE + i), s:"%\c- damage bonus to slot ", d:i + 1; HUDMSG_PLAIN, RPGMENUITEMID - 25 - j - i, CR_WHITE, 192.1, temp + 368.0 + 16.0 * (j + i), 0.0, 0.0);
			
			j += MAX_WEAPON_SLOTS;
			if(GetCVar("survival")) {
				HudMessage(s:"\c[Y5]Lives left: \c-", d:GetPlayerLivesLeft(PlayerNumber()); HUDMSG_PLAIN, RPGMENUITEMID - 45, CR_WHITE, 190.1, temp + 400.0 + 16.0 * j, 0.0, 0.0);
				HudMessage(s:"\c[Y5]Map Difficulty: \c-", s:MapDifficultyLabel[CheckInventory("MapDifficultyClientside")]; HUDMSG_PLAIN, RPGMENUITEMID - 46, CR_WHITE, 190.1, temp + 416.0 + 16.0 * j, 0.0, 0.0);
			}
			SetHudClipRect(0, 0, 0, 0, 0, 0);
			HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_STAT3) {
			ListenScroll(-128, 0);
		
			toshow = "";
			j = 0;
			HudMessage(s:"--- Quest Bonuses ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			for(i = 0; i < MAX_QUESTS; ++i) {
				if(IsQuestComplete(0, i)) {
					toshow = StrParam(s:toshow, s:"\cf*\c- ", s:Quest_Description[i][QUEST_REW], s:"\n\n");
					++j;
				}
			}
			SetHudClipRect(192, 56, 256, 448, 256); // 48 because 64 is begin, text one line len is 16, 48 is max allowed lines, 16 x 3.
			HudMessage(s:toshow; HUDMSG_PLAIN, RPGMENUITEMID - 8, CR_WHITE, 192.1, 64.1 + 2.0 * ScrollPos, 0.0, 0.0);
			SetHudClipRect(0, 0, 0, 0, 0);
		
			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_PERK) {
			HudMessage(s:"--- Player Perks ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			
			HudMessage(s:"\c[Y5]Perks Available: \c-", d:CheckInventory("PerkPoint"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 312.0, 64.0, 0.0, 0.0);
			
			for(i = 0; i < DND_PERKS; ++i)
				DrawToggledLabel(StatLabels[DND_PERK_BEGIN + i], CheckInventory(StatNames[DND_PERK_BEGIN + i]), boxid, MBOX_1 + i, RPGMENUITEMID - 1 - i, "\c[Y5]", "\c[B1]", 184.1, 80.0 + i * 16.0);
		}
		else if(curopt == MENU_LOAD) {
			HudMessage(s:"--- Loadout Selection ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			DrawBoxText("Weapons", boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Items", boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Talents", boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Inventory", boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Stash", boxid, MBOX_5, RPGMENUITEMID - 5, 192.1, 160.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Charms", boxid, MBOX_6, RPGMENUITEMID - 6, 192.1, 176.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Crafting", boxid, MBOX_7, RPGMENUITEMID - 7, 192.1, 192.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Accessories", boxid, MBOX_8, RPGMENUITEMID - 8, 192.1, 208.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Trading", boxid, MBOX_9, RPGMENUITEMID - 9, 192.1, 224.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_LOAD1) {
			// handle scale here in the future, doesn't get to fit all weps
			ListenScroll(-32 * (i / 3 + k / 8), 0);

			HudMessage(s:"--- Weapons Acquired ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			SetHudClipRect(192, 64, 256, 512, 256, 1);
			i = 0, k = 0;
			for(j = 0; j < MAXWEPS; ++j) {
				// make this part into a function later
				if(CheckInventory(Weapons[j][WEAPON_NAME])) {
					HudMessage(s:"\c[Y5]", d:i + 1, s:". ", s:"\c[R5]", s:Weapons[j][WEAPON_TAG], s:":\c- \c[Y5]Slot - ", s:Weapons[j][WEAPON_SLOT]; HUDMSG_PLAIN, RPGMENUITEMID - DND_MENU_LOADOUTWEPITEMS * i, CR_WHITE, 192.1, 64.1 + 48.0 * i + 16.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
					ShowWeaponIcon(j, i, k);
					temp = GetWeaponEnchantDisplay(pnum, j);
					if(temp) {
						HudMessage(s:"\c[Y5]* Quality: \c[Q9]+", d:temp, s:"%"; HUDMSG_PLAIN, RPGMENUITEMID - DND_MENU_LOADOUTWEPITEMS * i - 1, CR_WHITE, 256.1, 80.1 + 48.0 * i + 16.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
						++k;
					}
					temp = GetCritChanceDisplay(pnum, j);
					if(temp) {
						HudMessage(s:"\c[Y5]* Crit Chance: \c[Q9]", f:temp, s:"%"; HUDMSG_PLAIN, RPGMENUITEMID - DND_MENU_LOADOUTWEPITEMS * i - 2, CR_WHITE, 256.1, 80.1 + 48.0 * i + 16.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
						++k;
					}
					if(HasCritDamageBonus(pnum, j)) {
						HudMessage(s:"\c[Y5]* Crit Damage: \c[Q9]", f:GetCritDamageDisplay(pnum, j), s:"%"; HUDMSG_PLAIN, RPGMENUITEMID - DND_MENU_LOADOUTWEPITEMS * i - 3, CR_WHITE, 256.1, 80.1 + 48.0 * i + 16.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
						++k;
					}
					temp = GetBonusDamageDisplay(pnum, j);
					if(temp) {
						if(temp > 0)
							HudMessage(s:"\c[Y5]* Damage Bonus: \c[Q9]", f:temp, s:"%"; HUDMSG_PLAIN, RPGMENUITEMID - DND_MENU_LOADOUTWEPITEMS * i - 4, CR_WHITE, 256.1, 80.1 + 48.0 * i + 16.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
						else
							HudMessage(s:"\c[Y5]* Damage Bonus: \c[Q2]", f:temp, s:"%"; HUDMSG_PLAIN, RPGMENUITEMID - DND_MENU_LOADOUTWEPITEMS * i - 4, CR_WHITE, 256.1, 80.1 + 48.0 * i + 16.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
						++k;
					}
					++i;
				}
			}
			SetHudClipRect(0, 0, 0, 0, 0, 0);
		}
		else if(curopt == MENU_LOAD2) {
			HudMessage(s:"--- Items Acquired ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			j = 0;
			for(i = SHOP_FIRSTARTI_INDEX; i <= SHOP_LASTDRAWNARTI_INDEX; ++i) {
				if(CheckInventory(ShopItemNames[i][SHOPNAME_ITEM])) {
					HudMessage(s:"\c[Y5]", s:ShopItemNames[i][SHOPNAME_TAG], s:": \cj", d:CheckInventory(ShopItemNames[i][SHOPNAME_ITEM]); HUDMSG_PLAIN, RPGMENUITEMID - 1 - i + SHOP_FIRSTARTI_INDEX, CR_WHITE, 184.1, 64.0 + j, 0.0, 0.0);
					j += 16.0;
				}
			}
		}
		else if(curopt == MENU_LOAD3) {
			HudMessage(s:"--- Talents Acquired ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			for(i = 0; i < MAX_TALENTS; ++i) {
				toshow = TalentNames[i][TALENT_NAME];
				HudMessage(s:"\c[Y5]", s:toshow, s:" Talent:"; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 184.1, 64.0 + 16.0 * i, 0.0, 0.0);
				if(i != TALENT_OCCULT)
					j = DND_DEX_GAIN * GetDexterity();
				else
					j = DND_INT_GAIN * GetIntellect();
				HudMessage(f:ftrunc((DND_TALENT_INCREASE + j) * CheckInventory(TalentNames[i][TALENT_TAG])), s:"% (\cd", d:CheckInventory(TalentNames[i][TALENT_TAG]), s:"\c-)"; HUDMSG_PLAIN, RPGMENUITEMID - i - MAX_TALENTS - 2, CR_WHITE, 448.2, 64.0 + 16.0 * i, 0.0, 0.0);
			}
		}
		else if(curopt == MENU_LOAD_INVENTORY) {
			HudMessage(s:"--- Inventory ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_LOAD_STASH) {
			HudMessage(s:"--- Stash ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_LOAD_CHARM) {
			HudMessage(s:"--- Charms Equipped ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			if(boxid == MAINBOX_NONE || boxid == MBOX_8)
				CleanInventoryInfo();
			
			DrawCharmBox(DND_CHARM_SMALL, boxid, MBOX_1, 192.1, 216.0);
			DrawCharmBox(DND_CHARM_SMALL, boxid, MBOX_2, 256.1, 216.0);
			DrawCharmBox(DND_CHARM_SMALL, boxid, MBOX_3, 320.1, 216.0);
			DrawCharmBox(DND_CHARM_SMALL, boxid, MBOX_4, 384.1, 216.0);
			
			DrawCharmBox(DND_CHARM_MEDIUM, boxid, MBOX_5, 224.1, 152.0);
			DrawCharmBox(DND_CHARM_MEDIUM, boxid, MBOX_6, 352.1, 152.0);
			
			DrawCharmBox(DND_CHARM_LARGE, boxid, MBOX_7, 288.1, 96.0);
			
			DrawBoxText("View Inventory", boxid, MBOX_8, RPGMENUITEMID, 316.4, 248.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_LOAD_CRAFTING || curopt == MENU_LOAD_CRAFTING_INVENTORY || curopt == MENU_LOAD_CRAFTING_WEAPON) {
			if(!k)
				DeleteTextRange(RPGMENUID - MATERIALBOX_OFFSET - 3 * MAX_CRAFTING_MATERIALBOXES, RPGMENUID - 1);
			SetHudSize(384, 200, 1);
			SetFont("CRFTVW");
			HudMessage(s:"A"; HUDMSG_PLAIN, RPGMENUID - 1, CR_CYAN, 164.0, 100.0, 0.0, 0.0);
			SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
			SetFont("SMALLFONT");
			HandleCraftingView(InventoryPane, boxid, curopt, k);
			k = 1;
		}
		else if(curopt >= MENU_FIRST_TRADE && curopt <= MENU_LAST_TRADE) {
			HudMessage(s:"--- Arrange a Trade ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			if(CheckInventory("InTradeView"))
				HandleInventoryViewTrade(boxid);
			else {
				if(!k)
					ResetPane(CurrentPane);
				
				j = 0;
				i = 0;
				// how many we have to skip
				temp = MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE);
				for(; i < MAXPLAYERS && j < MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1); ++i) {
					if(PlayerInGame(i) && i != pnum) {
						if(j >= temp) {
							// n:0 prints the current player regardless, must use i + 1
							if(IsTradingWith(pnum, i))
								toshow = StrParam(s:"\cd- \c-", n:i + 1, s: "\cv V");
							else if(IsTrading(i))
								toshow = StrParam(s:"\cd- \c-", n:i + 1, s: "\c[D4] X");
							else
								toshow = StrParam(s:"\cd- \c-", n:i + 1);
							
							if(TradeMuteStatus(pnum, i))
								toshow = StrParam(s:toshow, s:" \cg M");
							if(TradeMuteStatus(i, pnum))
								toshow = StrParam(s:toshow, s:" \cm M");
							// add this as a clickable box
							if(!k) // don't keep adding boxes
								AddBoxToPane_Points(CurrentPane, 277.0, 260.0 - 16.0 * (j - temp), 180.0, 252.0 - 16.0 * (j - temp));
							if(boxid == MBOX_1 + j - temp)
								HudMessage(s:"\c[B1] <=="; HUDMSG_PLAIN, RPGMENUITEMID - 2 * (j - temp) - 1, CR_CYAN, 420.0, 66.0 + 16.0 * (j - temp), 0.0, 0.0); 
							DrawBoxText(toshow, boxid, MBOX_1 + (j - temp), RPGMENUITEMID - 2 * (j - temp), 192.1, 64.0 + 16.0 * (j - temp), "\c[B1]", "\c[Y5]");
						}
						++j;
					}
				}
				
				k = 1;
			}
			
			if(curopt != MENU_LAST_TRADE && PlayerCount() > MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1))
				HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUITEMID - 32, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
			if(curopt != MENU_FIRST_TRADE)
				HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUITEMID - 33, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt >= MENU_FIRST_ACCESSORY_PAGE && curopt <= MENU_LAST_ACCESSORY_PAGE) {
			// if RES_ACCESSORY is not made, don't let player do anything here
			if(CheckResearchStatus(RES_ACCESSORY) != RES_DONE)
				HudMessage(s:"--- N / A ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			else {
				HudMessage(s:"--- Current Accessories #", d:curopt - MENU_FIRST_ACCESSORY_PAGE + 1, s:" ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
				// init limits
				i = ACCESSORY_PER_PAGE * (curopt - MENU_FIRST_ACCESSORY_PAGE);
				k = Min(i + ACCESSORY_PER_PAGE, MAX_ACCESSORY);
				for(j = i; j < k; ++j)
					DrawAccessory(j, boxid, curopt, CurrentPane);
			}
			
			if(curopt != MENU_LAST_ACCESSORY_PAGE)
				HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
			if(curopt != MENU_FIRST_ACCESSORY_PAGE)
				HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP) {
			HudMessage(s:"--- DnD Shop ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID - 1, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			DrawBoxText("Weapons Menu", boxid, MBOX_1, RPGMENUITEMID, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Ammunition Menu", boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Abilities Menu", boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Artifacts Menu", boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Talents Menu", boxid, MBOX_5, RPGMENUITEMID - 5, 192.1, 160.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Armors Menu", boxid, MBOX_6, RPGMENUITEMID - 6, 192.1, 176.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Account Menu", boxid, MBOX_7, RPGMENUITEMID - 7, 192.1, 192.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_SHOP_WEAPON) {
			HudMessage(s:"--- WEAPONS ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = 0; i < 8; ++i) {
				if(boxid == MBOX_1 + i)
					HudMessage(s:"\c[B1]Slot ", d:i + 1, s:"\c- <--"; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 96.0 + 16.0 * i, 0.0, 0.0);
				else
					HudMessage(s:"\c[Y5]Slot ", d:i + 1; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 96.0 + 16.0 * i, 0.0, 0.0);
			}

			HudMessage(s:"\c[Y5]LEGEND\n* \c[J7][\c[S7]R\c[J7]] - Replaces slot weapon.\n* \c[J7][\c[E3]L\c[J7]] - Luxury weapon.\n\c[J7]        Can carry at most 1."; HUDMSG_PLAIN, RPGMENUITEMID - 17, CR_WHITE, 192.1, 240.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP_WEAPON1)
			HandleWeaponPageDraw(curopt, 0, 1, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON2)
			HandleWeaponPageDraw(curopt, 0, 2, boxid, -16);
		else if(curopt == MENU_SHOP_WEAPON3_1)
			HandleWeaponPageDraw(curopt, 1, 3, boxid, -24);
		else if(curopt == MENU_SHOP_WEAPON3_2)
			HandleWeaponPageDraw(curopt, -2, 3, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON4_1)
			HandleWeaponPageDraw(curopt, 1, 4, boxid, -16);
		else if(curopt == MENU_SHOP_WEAPON4_2)
			HandleWeaponPageDraw(curopt, -2, 4, boxid, -24);
		else if(curopt == MENU_SHOP_WEAPON5_1)
			HandleWeaponPageDraw(curopt, 1, 5, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON5_2)
			HandleWeaponPageDraw(curopt, -2, 5, boxid, -32);
		else if(curopt == MENU_SHOP_WEAPON6_1)
			HandleWeaponPageDraw(curopt, 1, 6, boxid, -16);
		else if(curopt == MENU_SHOP_WEAPON6_2)
			HandleWeaponPageDraw(curopt, -2, 6, boxid, -16);
		else if(curopt == MENU_SHOP_WEAPON7)
			HandleWeaponPageDraw(curopt, 0, 7, boxid, -16);
		else if(curopt == MENU_SHOP_WEAPON8)
			HandleWeaponPageDraw(curopt, 0, 8, boxid, 0);
		else if(curopt == MENU_SHOP_AMMOSELECT) {
			HudMessage(s:"--- AMMUNITIONS ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = 0; i < MAX_SLOTS - 1; ++i)
				DrawBoxText(StrParam(s:"Ammo Category - ", d: i + 1), boxid, MBOX_1 + i, RPGMENUITEMID - i - 1, 192.1, 96.0 + 16.0 * i, "\c[B1]", "\c[Y5]");
			DrawBoxText("Special Ammo", boxid, MBOX_1 + i, RPGMENUITEMID - i - 1, 192.1, 96.0 + 16.0 * i, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_SHOP_AMMO_1)
			HandleAmmoPageDraw(curopt, boxid, DND_AMMOSLOT_CLIP, 0, false);
		else if(curopt == MENU_SHOP_AMMO_2)
			HandleAmmoPageDraw(curopt, boxid, DND_AMMOSLOT_SHELL, 0, false);
		else if(curopt == MENU_SHOP_AMMO_3)
			HandleAmmoPageDraw(curopt, boxid, DND_AMMOSLOT_ROCKET, 0, false);
		else if(curopt == MENU_SHOP_AMMO_4)
			HandleAmmoPageDraw(curopt, boxid, DND_AMMOSLOT_CELL, 0, false);
		else if(curopt == MENU_SHOP_AMMO_SPECIAL1)
			HandleAmmoPageDraw(curopt, boxid, -1, 0, true);
		else if(curopt == MENU_SHOP_ABILITY_1) {
			HudMessage(s:"--- ABILITIES (1) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = SHOP_ABILITY1_BEGIN; i <= SHOP_ABILITY1_END; ++i)
				DrawToggledImage(i, boxid, i - SHOP_ABILITY1_BEGIN, AbilityDrawInfo[i - SHOP_ABILITY1_BEGIN].flags, CR_WHITE, CR_GREEN, ShopItemNames[i][SHOPNAME_CONDITION], 1, CR_RED);
		
			HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP_ABILITY_2) {
			HudMessage(s:"--- ABILITIES (2) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = SHOP_ABILITY2_BEGIN; i <= SHOP_LASTABILITY_INDEX; ++i)
				DrawToggledImage(i, boxid, i - SHOP_ABILITY2_BEGIN, AbilityDrawInfo[i - SHOP_ABILITY1_BEGIN].flags, CR_WHITE, CR_GREEN, ShopItemNames[i][SHOPNAME_CONDITION], 1, CR_RED);
		
			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP_ARTIFACT) {
			HudMessage(s:"--- ARTIFACTS ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = 0; i < MAXARTIFACTS; ++i)
				DrawToggledImage(SHOP_FIRSTARTI_INDEX + i, boxid, i, ArtifactDrawInfo[i].flags, CR_WHITE, CR_GREEN, ArtifactInfo[i][ARTI_NAME], ShopInfo[SHOP_FIRSTARTI_INDEX + i][SHOPINFO_MAX], CR_RED);
		}
		else if(curopt == MENU_SHOP_TALENT) {
			HudMessage(s:"--- TALENTS ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i = 0; i < MAX_TALENTS; ++i)
				DrawToggledImage(SHOP_TALENT_BEGIN + i, boxid, i, OBJ_TALENT, CR_WHITE, CR_GREEN, TalentNames[i][TALENT_TAG], TALENT_CAP, CR_RED);
		}
		else if(curopt == MENU_SHOP_ARMOR1) {
			HudMessage(s:"--- ARMORS (1) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i  = 0; i < PAGE1_ARMOR_COUNT; ++i)
				DrawToggledImage(SHOP_ARMOR_GREEN + i, boxid, i, ArmorDrawInfo[i].flags, CR_WHITE, CR_GREEN, "Armor", ArmorBaseAmounts[i + 1], CR_RED);
		
			HudMessage(s:"\c[Y5]=>"; HUDMSG_PLAIN, RPGMENUPAGEID, CR_CYAN, 436.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP_ARMOR2) {
			HudMessage(s:"--- ARMORS (2) ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i  = 0; i < PAGE2_ARMOR_COUNT; ++i)
				DrawToggledImage(SHOP_FIRSTARMOR2_INDEX + i, boxid, i, ArmorDrawInfo[PAGE1_ARMOR_COUNT + i].flags, CR_WHITE, CR_GREEN, "Armor", ArmorBaseAmounts[i + PAGE1_ARMOR_COUNT + 1], CR_RED);

			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt == MENU_SHOP_ACCOUNT) {
			HudMessage(s:"--- ACCOUNT ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			HudMessage(s:"\c[Y5]Credits: \c-$", d:CheckInventory("Credit"); HUDMSG_PLAIN, RPGMENUITEMID, CR_WHITE, 264.1, 64.0, 0.0, 0.0);
			
			for(i  = 0; i < MAXACCOUNTITEMS; ++i)
				DrawToggledImage(SHOP_ACCOUNT_BEGIN + i, boxid, i, OBJ_RESEARCH | OBJ_HASCHOICE | OBJ_ACCOUNT, CR_WHITE, CR_GREEN, ShopItemNames[SHOP_ACCOUNT_BEGIN + i][SHOPNAME_ITEM], ShopInfo[SHOP_ACCOUNT_BEGIN + i][SHOPINFO_MAX], CR_RED);
		}
		else if(curopt == MENU_RESEARCH) {
			HudMessage(s:"--- RESEARCH MENU ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			DrawBoxText("Research Category: Body", boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Research Category: Ammo", boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Research Category: Guns", boxid, MBOX_3, RPGMENUITEMID - 3, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Research Category: Utility", boxid, MBOX_4, RPGMENUITEMID - 4, 192.1, 144.0, "\c[B1]", "\c[Y5]");
		}
		else if(curopt == MENU_RESEARCH_GUNS) {
			HudMessage(s:"--- RESEARCH: GUNS ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			DrawBoxText("Sub Category: Slot Guns", boxid, MBOX_1, RPGMENUITEMID - 1, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Sub Category: Luxury Bundles", boxid, MBOX_2, RPGMENUITEMID - 2, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			
			HudMessage(s:"\c[Y5]<="; HUDMSG_PLAIN, RPGMENUPAGEID - 1, CR_CYAN, 184.1, 44.0, 0.0, 0.0);
		}
		else if(curopt >= SHOP_RESPAGE_BEGIN && curopt <= SHOP_RESPAGE_END)
			HandleResearchPageDraw(curopt - SHOP_RESPAGE_BEGIN, boxid);
		else if(curopt == MENU_ABILITY) {
			HudMessage(s:"--- Abilities Learned ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			for(i = 0; i < MAXABILITIES; ++i) {
				toshow = "\c[G8]N/A";
				if(CheckInventory(ShopItemNames[SHOP_ABILITY1_BEGIN + i][SHOPNAME_ITEM]))
					toshow = "\cdLearned\c-";
				HudMessage(s:"\c[Y5]", s:ShopItemNames[SHOP_ABILITY1_BEGIN + i][SHOPNAME_TAG], s:": \c-", s:toshow; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 192.1, 80.0 + 16.0 * i, 0.0, 0.0);
			}
				
			str dashstatus = "\cgDisabled";
			if(!CheckInventory("DashDisabled"))
				dashstatus = "\cdEnabled";
			if(boxid == MBOX_1)
				HudMessage(s:"\c[B1]Dash: ", s:dashstatus; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
			else
				HudMessage(s:"\c[Y5]Dash: ", s:dashstatus; HUDMSG_PLAIN, RPGMENUITEMID - 26, CR_WHITE, 192.1, 256.0, 0.0, 0.0);
		}
		else if(curopt == MENU_MAIN) {
			ListenScroll(-32, 0);
			
			HudMessage(s:"--- Welcome to the DnD Menu! ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			ShowBobby();
			SetHudClipRect(192, 152, 256, 192, 256, 1);
			for(i = 0; i < MAX_HELPTEXT_MAIN; ++i)
				HudMessage(s:"\cv*\c- ", s:HelpText_Main[i]; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 152.1 + 4.0 * ScrollPos + 96.0 * i, 0.0, 0.0);
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP) {
			HudMessage(s:"--- DnD Help ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0); 
			
			DrawBoxText("Character Loading Help", boxid, MBOX_1, RPGMENUITEMID, 192.1, 96.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Weapon Property Help", boxid, MBOX_2, RPGMENUITEMID - 1, 192.1, 112.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Research Help", boxid, MBOX_3, RPGMENUITEMID - 2, 192.1, 128.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Damage Types Help", boxid, MBOX_4, RPGMENUITEMID - 3, 192.1, 144.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Orbs Help", boxid, MBOX_5, RPGMENUITEMID - 4, 192.1, 160.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Legendary Monster Codex", boxid, MBOX_6, RPGMENUITEMID - 5, 192.1, 176.0, "\c[B1]", "\c[Y5]");
			DrawBoxText("Monster Modifiers", boxid, MBOX_7, RPGMENUITEMID - 6, 192.1, 192.0, "\c[B1]", "\c[Y5]");
			
			HudMessage(s:"\c[Y5]Average Monster Level: \cj", d:CheckInventory("DnD_PTotalLevel") / PlayerCount(); HUDMSG_PLAIN, RPGMENUITEMID - 7, CR_WHITE, 192.1, 228.0, 0.0, 0.0);
			str mapinfo = "\cgDisabled";
			if(CheckInventory("ShowMapInfo"))
				mapinfo = "\cdEnabled";
			DrawBoxText(StrParam(s:"Show Map Info: ", s:mapinfo), boxid, MBOX_8, RPGMENUITEMID - 8, 192.1, 244.0, "\c[B1]", "\c[Y5]");
			if(CheckInventory("SetMapInfo")) {
				SetCVar("dnd_showmapinfo", !GetCVar("dnd_showmapinfo"));
				SetInventory("ShowMapInfo", !CheckInventory("ShowMapInfo"));
			}
		}
		else if(curopt == MENU_HELP_CHARACTER) {
			ListenScroll(-96, 0);
			HudMessage(s:"--- DnD Character Help ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			SetHudClipRect(192, 64, 256, 192, 256, 1);
			
			for(i = 0; i < MAX_HELPTEXT_CHARACTER; ++i)
				HudMessage(s:"\c[Y5]* \c-", s:HelpText_Character[i]; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 64.1 + 72.0 * i + 4.0 * ScrollPos, 0.0, 0.0);
			
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_WEAPONPROPS) {
			ListenScroll(-64, 0);
			HudMessage(s:"--- DnD Weapon Property Help ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			for(i = 0; i < MAX_WEAPON_PROPERTIES; ++i) {
				SetHudClipRect(192, 56, 256, 384, 256, 1);
				HudMessage(s:HelpText_WeaponProp[i]; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 192.1, 64.1 + 68.0 * i + 4.0 * ScrollPos, 0.0, 0.0);
				ShowWeaponPropertyIcon(i);
			}
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_RESEARCHES) {
			ListenScroll(-32, 0);
			HudMessage(s:"--- DnD Researches Help ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			SetHudClipRect(192, 64, 256, 192, 256, 1);
			
			for(i = 0; i < MAX_HELPTEXT_RESEARCH; ++i)
				HudMessage(s:"\c[Y5]* \c-", s:HelpText_Research[i]; HUDMSG_PLAIN, RPGMENUITEMID - i - 1, CR_WHITE, 192.1, 64.1 + 64.0 * i + 4.0 * ScrollPos, 0.0, 0.0);
			
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_DAMAGETYPES) {
			ListenScroll(-96, 0);
			HudMessage(s:"--- DnD Damage Types Help ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			SetHudClipRect(192, 64, 256, 384, 256, 1);
			for(i = 0; i < MAX_HELPTEXT_DAMAGETYPES; ++i) {
				HudMessage(s:HelpText_DamageTypes[i]; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 192.1, 64.1 + 80.0 * i + 4.0 * ScrollPos, 0.0, 0.0);
				ShowDamageTypeIcon(i);
			}
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_ORBS) {
			ListenScroll(-192, 0);
			HudMessage(s:"--- DnD Orbs Help ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			SetHudClipRect(192, 60, 256, 384, 256, 1);
			for(i = 0; i < MAX_ORBS; ++i) {
				HudMessage(s:InventoryInfo[i + ORBS_BEGIN][SITEM_DESC]; HUDMSG_PLAIN, RPGMENUITEMID - i, CR_WHITE, 192.1, 88.1 + 96.0 * i + 8.0 * ScrollPos, 0.0, 0.0);
				ShowOrbIcon(i);
			}
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_LEGMONS) {
			ListenScroll(-64 * (k / 2), 0);
			HudMessage(s:"--- Legendary Monster Codex ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			SetHudClipRect(192, 52, 256, 384, 256, 1);
			k = 0;
			for(i = 0; i < MAX_LEGMONS_TEXT; ++i) {
				if(HasKilledLegendary(i)) {
					HudMessage(s:LegendaryMonsterText[i]; HUDMSG_PLAIN, RPGMENUITEMID - 2 * i, CR_WHITE, 192.1, 112.1 + 144.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
					ShowLegendaryMonsterIcon(i, k);
					++k;
				}
			}
			SetHudClipRect(0, 0, 0, 0);
		}
		else if(curopt == MENU_HELP_MMODS) {
			ListenScroll(-32 * (k / 2), 0);
			k = 0;
			HudMessage(s:"--- Elite Monster Modifiers ---"; HUDMSG_PLAIN, RPGMENUHELPID, CR_CYAN, 316.4, 44.0, 0.0, 0.0);
			
			SetHudClipRect(192, 52, 256, 384, 256, 1);
			for(i = DND_TRAIT1_STARTSHOW; i <= DND_TRAIT1_LASTSHOW; ++i, ++k) {
				HudMessage(s:GetTraitColorCode(i, DND_TRAITSIDE_1), s:MonsterTraits[i]; HUDMSG_PLAIN, RPGMENUITEMID - 2 * k, CR_WHITE, 192.1, 80.1 + 64.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
				HudMessage(s:Help_EliteModExplanation[k]; HUDMSG_PLAIN, RPGMENUITEMID - 2 * k - 1, CR_WHITE, 192.1, 96.1 + 64.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
			}
			
			for(i = DND_TRAIT2_STARTSHOW; i <= DND_TRAIT2_LASTSHOW; ++i, ++k) {
				HudMessage(s:GetTraitColorCode(i, DND_TRAITSIDE_2), s:MonsterTraits2[i - DND_TRAIT2_STARTSHOW]; HUDMSG_PLAIN, RPGMENUITEMID - 2 * k, CR_WHITE, 192.1, 80.1 + 64.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
				HudMessage(s:Help_EliteModExplanation[k]; HUDMSG_PLAIN, RPGMENUITEMID - 2 * k - 1, CR_WHITE, 192.1, 96.1 + 64.0 * k + 4.0 * ScrollPos, 0.0, 0.0);
			}
			
			SetHudClipRect(0, 0, 0, 0);
		}
		
		DrawHelpCorner(curopt, boxid);
		// Main menu side bar
		
		// Side bar options with animations
		if(CheckInventory("AttributePoint") && 
			//Don't flash if stats are already maxed
		   !((CheckInventory("PSTAT_Strength") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Dexterity") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Bulkiness") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Charisma") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Vitality") == DND_STAT_FULLMAX) &&
			(CheckInventory("PSTAT_Intellect") == DND_STAT_FULLMAX))
		   && !(framecounter % 2)) {
			if(mainboxid == MAINBOX_STATS)
				drawlit = 1;
			HudMessage(s:"\c[B3]Stats\c-"; HUDMSG_PLAIN, RPGMENULISTID, -1, 96.0, 168.0, 0.0, 0.0);
		} 
		else {
			if(mainboxid == MAINBOX_STATS)
				HudMessage(s:"\c[B1]Stats\c-"; HUDMSG_PLAIN, RPGMENULISTID, -1, 96.0, 168.0, 0.0, 0.0);
			else
				HudMessage(s:"\c[Y5]Stats\c-"; HUDMSG_PLAIN, RPGMENULISTID, -1, 96.0, 168.0, 0.0, 0.0);
		}
		
		if(CheckInventory("PerkPoint") && 
		   !((CheckInventory("Perk_Sharpshooting") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Endurance") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Wisdom") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Greed") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Medic") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Munitionist") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Deadliness") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Savagery") == DND_PERK_MAX) &&
			(CheckInventory("Perk_Luck") == DND_PERK_MAX))
		   && !(framecounter % 2)) {
			if(mainboxid == MAINBOX_PERK)
				drawlit = 1;
			HudMessage(s:"\c[B3]Perks\c-"; HUDMSG_PLAIN, RPGMENULISTID - 1, -1, 96.0, 186.0, 0.0, 0.0);
		}
		else {
			if(mainboxid == MAINBOX_PERK)
				HudMessage(s:"\c[B1]Perks\c-"; HUDMSG_PLAIN, RPGMENULISTID - 1, -1, 96.0, 186.0, 0.0, 0.0);
			else
				HudMessage(s:"\c[Y5]Perks\c-"; HUDMSG_PLAIN, RPGMENULISTID - 1, -1, 96.0, 186.0, 0.0, 0.0);
		}
		
		// Rest of the side bar options
		if(mainboxid == MAINBOX_LOAD)
			HudMessage(s:"\c[B1]Loadout\c-"; HUDMSG_PLAIN, RPGMENULISTID - 2, -1, 96.0, 204.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Loadout\c-"; HUDMSG_PLAIN, RPGMENULISTID - 2, -1, 96.0, 204.0, 0.0, 0.0);
		
		if(mainboxid == MAINBOX_SHOP)
			HudMessage(s:"\c[B1]Shop\c-"; HUDMSG_PLAIN, RPGMENULISTID - 3, -1, 96.0, 221.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Shop\c-"; HUDMSG_PLAIN, RPGMENULISTID - 3, -1, 96.0, 221.0, 0.0, 0.0);
		
		if(mainboxid == MAINBOX_RESEARCH)
			HudMessage(s:"\c[B1]Research\c-"; HUDMSG_PLAIN, RPGMENULISTID - 6, -1, 96.0, 251.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Research\c-"; HUDMSG_PLAIN, RPGMENULISTID - 6, -1, 96.0, 251.0, 0.0, 0.0);
		
		if(mainboxid == MAINBOX_ABILITY)
			HudMessage(s:"\c[B1]Abilities\c-"; HUDMSG_PLAIN, RPGMENULISTID - 4, -1, 96.0, 269.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Abilities\c-"; HUDMSG_PLAIN, RPGMENULISTID - 4, -1, 96.0, 269.0, 0.0, 0.0);
		
		if(mainboxid == MAINBOX_HELP)
			HudMessage(s:"\c[B1]Help\c-"; HUDMSG_PLAIN, RPGMENULISTID - 5, -1, 96.0, 287.0, 0.0, 0.0);
		else
			HudMessage(s:"\c[Y5]Help\c-"; HUDMSG_PLAIN, RPGMENULISTID - 5, -1, 96.0, 287.0, 0.0, 0.0);
		
		HudMessage(s:"\c[Y5]Lasted: \cj", d:CheckInventory("RoundsSurvived"); HUDMSG_PLAIN, RPGMENUNAMEID, -1, 60.1, 140.0, 0.0, 0.0);
		
		DrawHighLightBar(mainboxid, drawlit);
		// Main Menu Side Bar Ends
		
		// Handle all types of popups
		HandleWeaponInfoPanel(curopt, animcounter, boxid);
		Delay(1);
		
		animcounter++;
		if(animcounter == 17) {
			animcounter = 0;
			framecounter = (++framecounter) % 3;
		}
		
		// retry ack
		if(!CheckInventory("DND_ACK")) {
			if(sendBox) {
				temp = boxid | (CheckInventory("DnD_PlayerItemIndex") << DND_MENU_ITEMSAVEBITS1) | (CheckInventory("DnD_PlayerPrevItemIndex") << DND_MENU_ITEMSAVEBITS2);
				NamedRequestScriptPuke("DND Server Box Receive", PlayerNumber() + P_TIDSTART, temp, mainboxid);
			}
		}
		else
			sendBox = false;
	}
}

Script "DND Menu Input Handle" (void) {
	int curposx, curopt, temp, i, j;
	int pnum = PlayerNumber();
	int boxid, mainboxid;
	FlushStack(pnum);
	while(CheckInventory("ShowingMenu")) { // first screen
		curposx = CheckInventory("MenuPosX");
		boxid = MenuBoxes[pnum][DND_ACTIVEBOX];
		mainboxid = MenuBoxes[pnum][DND_ACTIVEMAINBOX];
		curopt = CheckInventory("MenuOption");
		// This handles the popup messages in the shop
		if(!CheckInventory("DnD_PopupHack") && CheckInventory("DnD_ShowPopup")) {
			GiveInventory("DnD_PopupHack", 1); // make this only execute one script
			ACS_NamedExecuteAlways("DND Menu Popup Handle", 0);
		}
		
		if(mainboxid != MAINBOX_NONE) {
			ListenInput(0, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				TakeInventory("DnD_InventoryView", 1);
				TakeInventory("DnD_StashView", 1);
				HandleButtonClick(mainboxid);
				if(mainboxid == MAINBOX_STATS)
					UpdateMenuPosition(MENU_STAT1);
				else if(mainboxid == MAINBOX_PERK)
					UpdateMenuPosition(MENU_PERK);
				else if(mainboxid == MAINBOX_LOAD)
					UpdateMenuPosition(MENU_LOAD);
				else if(mainboxid == MAINBOX_SHOP)
					UpdateMenuPosition(MENU_SHOP);
				else if(mainboxid == MAINBOX_RESEARCH)
					UpdateMenuPosition(MENU_RESEARCH);
				else if(mainboxid == MAINBOX_ABILITY)
					UpdateMenuPosition(MENU_ABILITY);
				else if(mainboxid == MAINBOX_HELP)
					UpdateMenuPosition(MENU_HELP);
				SetInventory("MadeChoice", 0);
			}
		}
		
		if(curopt == MENU_STAT1) { // stat screen
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice")) {
				if(CheckInventory("AttributePoint") && boxid != MAINBOX_NONE) { // tried to level stat, so you must have some attrib point
					// allow allocation of stats past 100 if all stats have at least 100.
					int cur_stat_max = DND_STAT_MAX;
					if ((CheckInventory("PSTAT_Strength") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Dexterity") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Bulkiness") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Charisma") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Vitality") >= cur_stat_max) &&
						(CheckInventory("PSTAT_Intellect") >= cur_stat_max))
						cur_stat_max = DND_STAT_FULLMAX;
					
					// here we check if option was left click or right click, right click consumes whatever we can on the given selection
					if(CheckInventory("MadeChoice") == 1)
						temp = 1;
					else
						temp = Min(CheckInventory("AttributePoint"), cur_stat_max - CheckInventory(StatNames[boxid - 1 + DND_ATTRIB_BEGIN]));
				
					if(boxid == MBOX_1 && CheckInventory("PSTAT_Strength") < cur_stat_max) { // str
						GiveInventory("PSTAT_Strength", temp);
						TakeInventory("AttributePoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						UpdatePlayerKnockbackResist();
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_2 && CheckInventory("PSTAT_Dexterity") < cur_stat_max) { // dex
						GiveInventory("PSTAT_Dexterity", temp);
						TakeInventory("AttributePoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_3 && CheckInventory("PSTAT_Bulkiness") < cur_stat_max) { // bul
						GiveInventory("PSTAT_Bulkiness", temp);
//						GiveInventory("MaxArmorBonusNew", 2);
						TakeInventory("AttributePoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_4 && CheckInventory("PSTAT_Charisma") < cur_stat_max) { // chr
						GiveInventory("PSTAT_Charisma", temp);
						TakeInventory("AttributePoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_5 && CheckInventory("PSTAT_Vitality") < cur_stat_max) { // vit
						GiveInventory("PSTAT_Vitality", temp);
//						GiveInventory("MaxHealthBonusNew", DND_VIT_INCREASE);
						SetActorProperty(0, APROP_SPAWNHEALTH, GetSpawnHealth());
						TakeInventory("AttributePoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_6 && CheckInventory("PSTAT_Intellect") < cur_stat_max) { // int
						GiveInventory("PSTAT_Intellect", temp);
						TakeInventory("AttributePoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
				}
				SetInventory("MadeChoice", 0);
			}
			
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				ReturnToMain();
			else if(CheckInventory("MenuLR") == MENU_MOVE_RIGHT)
				UpdateMenuPosition(MENU_STAT2);
		}
		else if(curopt == MENU_STAT2) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_STAT1);
			else if(CheckInventory("MenuLR") == MENU_MOVE_RIGHT)
				UpdateMenuPosition(MENU_STAT3);
		}
		else if(curopt == MENU_STAT3) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_STAT2);
		}
		else if(curopt == MENU_PERK) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice")) {
				if(CheckInventory("PerkPoint") && boxid != MAINBOX_NONE) { // tried to level perk, so you must have some perk point
					// same check as above
					if(CheckInventory("MadeChoice") == 1)
						temp = 1;
					else
						temp = Min(CheckInventory("PerkPoint"), DND_PERK_MAX - CheckInventory(StatNames[boxid - 1 + DND_PERK_BEGIN]));
				
					if(boxid == MBOX_1 && CheckInventory("Perk_Sharpshooting") < DND_PERK_MAX) { // sharp
						GiveInventory("Perk_Sharpshooting", temp);
						TakeInventory("PerkPoint", temp);
						CleanSharpEndPerks(RES_PERK_SHARP);
						UpdateSharpEndPerks(RES_PERK_SHARP);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_2 && CheckInventory("Perk_Endurance") < DND_PERK_MAX) { // end
						GiveInventory("Perk_Endurance", temp);
						TakeInventory("PerkPoint", temp);
						CleanSharpEndPerks(RES_PERK_ENDURANCE);
						UpdateSharpEndPerks(RES_PERK_ENDURANCE);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_3 && CheckInventory("Perk_Wisdom") < DND_PERK_MAX) { // wisdom
						GiveInventory("Perk_Wisdom", temp);
						TakeInventory("PerkPoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_4 && CheckInventory("Perk_Greed") < DND_PERK_MAX) { // greed
						GiveInventory("Perk_Greed", temp);
						TakeInventory("PerkPoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_5 && CheckInventory("Perk_Medic") < DND_PERK_MAX) { // medic
						GiveInventory("Perk_Medic", temp);
						SetAmmoCapacity("StoredMedkit", GetAmmoCapacity("StoredMedkit") + 15 * CheckInventory("Perk_Medic"));
						TakeInventory("PerkPoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_6 && CheckInventory("Perk_Munitionist") < DND_PERK_MAX) { // munitionist
						GiveInventory("Perk_Munitionist", temp);
						TakeInventory("PerkPoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
                    else if(boxid == MBOX_7 && CheckInventory("Perk_Deadliness") < DND_PERK_MAX) { // deadliness
                        GiveInventory("Perk_Deadliness", temp);
						TakeInventory("PerkPoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_8 && CheckInventory("Perk_Savagery") < DND_PERK_MAX) { // savagery
                        GiveInventory("Perk_Savagery", temp);
						TakeInventory("PerkPoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
					else if(boxid == MBOX_9 && CheckInventory("Perk_Luck") < DND_PERK_MAX) { // luck
						GiveInventory("Perk_Luck", temp);
						TakeInventory("PerkPoint", temp);
						LocalAmbientSound("RPG/MenuChoose", 127);
						ACS_NamedExecuteAlways("DnD Force Damage Cache Recalculation", 0, PlayerNumber());
					}
				}
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				ReturnToMain();
		}
		else if(curopt == MENU_LOAD) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid > 0) {
					if(boxid == MBOX_9)
						UpdateMenuPosition(MENU_LOAD_TRADE1);
					else if(boxid == MBOX_8)
						UpdateMenuPosition(MENU_LOAD_ACC1);
					else {
						if(MENU_LOAD + boxid == MENU_LOAD_INVENTORY)
							GiveInventory("DnD_InventoryView", 1);
						else if(MENU_LOAD + boxid == MENU_LOAD_STASH)
							GiveInventory("DnD_StashView", 1);
						UpdateMenuPosition(MENU_LOAD + boxid);
					}
				}
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				ReturnToMain();
		}
		else if(curopt == MENU_LOAD1) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_LOAD);
		}
		else if(curopt == MENU_LOAD2) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_LOAD);
		}
		else if(curopt == MENU_LOAD3) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_LOAD);
		}
		else if(curopt == MENU_LOAD_INVENTORY) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice")) {
				// handles clicking outside
				// at the last part, we reset the prev box only if there's no item there, otherwise another piece of code handles it
				if(CheckInventory("MadeChoice") == 1 && boxid == MAINBOX_NONE) {
					if(!CheckInventory("DnD_SelectedInventoryBox")) {
						TakeInventory("DnD_InventoryView", 1);
						SetInventory("DnD_SelectedCharmBox", 0);
						if(CheckInventory("MenuOption") == MENU_LOAD_INVENTORY || CheckInventory("MenuOption") == MENU_LOAD_STASH)
							UpdateMenuPosition_NoSound(MENU_LOAD);
						else
							LocalAmbientSound("RPG/MenuClose", 127);
					}
					else if(GetItemSyncValue(DND_SYNC_ITEMTYPE, CheckInventory("DnD_SelectedInventoryBox") - 1, -1, DND_SYNC_ITEMSOURCE_PLAYERINVENTORY) == DND_ITEM_NULL)
						SetInventory("DnD_SelectedInventoryBox", 0);
				}
				HandleInventoryViewClicks(boxid, CheckInventory("MadeChoice"));
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT) {
				TakeInventory("DnD_InventoryView", 1);
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_STASH) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice")) {
				// handles clicking outside
				// at the last part, we reset the prev box only if there's no item there, otherwise another piece of code handles it
				if(CheckInventory("MadeChoice") == 1 && boxid == MAINBOX_NONE) {
					if(!CheckInventory("DnD_SelectedInventoryBox")) {
						TakeInventory("DnD_StashView", 1);
						SetInventory("DnD_SelectedCharmBox", 0);
						if(CheckInventory("MenuOption") == MENU_LOAD_INVENTORY || CheckInventory("MenuOption") == MENU_LOAD_STASH)
							UpdateMenuPosition_NoSound(MENU_LOAD);
						else
							LocalAmbientSound("RPG/MenuClose", 127);
					}
					else if(GetItemSyncValue(DND_SYNC_ITEMTYPE, CheckInventory("DnD_SelectedInventoryBox") - 1, -1, DND_SYNC_ITEMSOURCE_STASH) == DND_ITEM_NULL)
						SetInventory("DnD_SelectedInventoryBox", 0);
				}
				HandleStashViewClicks(boxid, CheckInventory("MadeChoice"));
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT) {
				TakeInventory("DnD_StashView", 1);
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_CHARM) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			HandleItemPageInputs(pnum, boxid);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT) {
				TakeInventory("DnD_InventoryView", 1);
				UpdateMenuPosition(MENU_LOAD);
			}
		}
		else if(curopt == MENU_LOAD_CRAFTING) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			HandleCraftingInputs(boxid, curopt);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_LOAD);
		}
		else if(curopt == MENU_LOAD_CRAFTING_WEAPON) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			HandleCraftingInputs(boxid, curopt);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_LOAD_CRAFTING);
		}
		else if(curopt == MENU_LOAD_CRAFTING_INVENTORY) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			HandleCraftingInputs(boxid, curopt);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_LOAD_CRAFTING);
		}
		else if(curopt >= MENU_FIRST_TRADE && curopt <= MENU_LAST_TRADE) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice")) {
				if(boxid >= MBOX_1) {
					// we need to find which player this box corresponds to
					i = 0, temp = 0;
					// how many we skip
					j = MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE);
					for(; i < MAXPLAYERS && temp < boxid + j; ++i)
						if(PlayerInGame(i) && i != pnum)
							++temp;
					// i - 1 is the player number
					--i;
					// left click
					if(CheckInventory("MadeChoice") == 1) {
						if(!CheckInventory("DnD_Trade_Cooldown")) {
							// we aren't in trade panel
							if(!CheckInventory("InTradeView")) {
								if(!IsTrading(pnum)) {
									// handle trade protocol, initiate the request
									if(!IsTrading(i)) {
										if(!TradeMuteStatus(i, pnum)) {
											EngageTrade(pnum, i);
											SetActivator(i + P_TIDSTART);
											ACS_NamedExecuteAlways("DnD Announcer", 0, DND_ANNOUNCER_TRADEREQUEST, pnum, i + 1);
											SetActivator(pnum + P_TIDSTART);
											ACS_NamedExecuteAlways("DnD Trade Window", 0, pnum, false);
											ACS_NamedExecuteAlways("DnD Trade Window", 0, i, true);
											LocalAmbientSound("RPG/MenuChoose", 127);
										}
										else
											ShowActorPopup(pnum, POPUP_YOUAREMUTED, false, 0);
									}
									else
										ShowActorPopup(pnum, POPUP_TARGETISTRADING, false, 0);
								}
								else {
									// trade accept window is given to the other party, who engaged this
									if(IsTradingWith(pnum, i) && CheckInventory("DnD_TradeAcceptWindow")) {
										if(!TradeMuteStatus(i, pnum)) {
											// handle trade now, other party accepted
											GiveInventory("InTradeView", 1);
											GiveActorInventory(i + P_TIDSTART, "InTradeView", 1);
											LocalAmbientSound("RPG/MenuChoose", 127);
										}
										else
											ShowActorPopup(pnum, POPUP_YOUAREMUTED, false, 0);
									}
									else
										ShowActorPopup(pnum, POPUP_TARGETISTRADING, false, 0);
								}
							}
							else {
								// we are in trade panel now, handle boxes accordingly
								// give some time for the synchronization to settle in
								HandleTradeViewButtonClicks(boxid);
							}
						}
					}
					else {
						// right click mutes people
						if(!CheckInventory("InTradeView")) {
							ToggleMuteTrade(i);
							LocalAmbientSound("RPG/MenuChoose", 127);
						}
						else
							HandleTradeViewButtonClicks(boxid);
					}
				}
			}
			
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT) {
				if(curopt == MENU_FIRST_TRADE)
					UpdateMenuPosition(MENU_LOAD);
				else
					UpdateMenuPosition(curopt - 1);
			}
			else if(CheckInventory("MenuLR") == MENU_MOVE_RIGHT) {
				if(curopt != MENU_LAST_TRADE && PlayerCount() > MENU_TRADE_PLAYERCOUNT * (curopt - MENU_FIRST_TRADE + 1))
					UpdateMenuPosition(curopt + 1);
			}
		}
		else if(curopt >= MENU_FIRST_ACCESSORY_PAGE && curopt <= MENU_LAST_ACCESSORY_PAGE) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid >= MBOX_1) {
					// i is the accessory to toggle
					temp = boxid + ACCESSORY_PER_PAGE * (curopt - MENU_FIRST_ACCESSORY_PAGE) - 1;
					// I don't have this
					if(!CheckInventory(AccessoryInfo[temp][ACCESSORY_NAME])) {
						LocalAmbientSound("RPG/MenuError", 127);
						GiveInventory("DnD_ShowPopup", 1);
						GiveInventory("DnD_PopupError", 1);
						SetInventory("DnD_PopupId", POPUP_ACCESSORYNOTFOUND);
					}
					else if(IsAccessoryEquipped(0, 1 << temp)) { // I have and already equipped it
						LocalAmbientSound("RPG/MenuChoose", 127);
						UnequipAccessory(1 << temp);
					}
					else if(!ReachedAccessoryLimit()) { // I don't have this, and didn't equip
						LocalAmbientSound("RPG/MenuChoose", 127);
						EquipAccessory(1 << temp);
					}
					else {
						// make into some popup function later
						LocalAmbientSound("RPG/MenuError", 127);
						GiveInventory("DnD_ShowPopup", 1);
						GiveInventory("DnD_PopupError", 1);
						SetInventory("DnD_PopupId", POPUP_MAXACCESSORYEQUIPPED);
					}
				}
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT) {
				if(curopt != MENU_FIRST_ACCESSORY_PAGE)
					UpdateMenuPosition(curopt - 1);
				else
					UpdateMenuPosition(MENU_LOAD);
			}
			else if(CheckInventory("MenuLR") == MENU_MOVE_RIGHT) {
				if(curopt != MENU_LAST_ACCESSORY_PAGE)
					UpdateMenuPosition(curopt + 1);
			}
			SetInventory("MadeChoice", 0);
		}
		else if(curopt == MENU_SHOP) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid == MBOX_1)
					temp = MENU_SHOP_WEAPON;
				else if(boxid == MBOX_2)
					temp = MENU_SHOP_AMMOSELECT;
				else if(boxid == MBOX_3)
					temp = MENU_SHOP_ABILITY_1;
				else if(boxid == MBOX_4)
					temp = MENU_SHOP_ARTIFACT;
				else if(boxid == MBOX_5)
					temp = MENU_SHOP_TALENT;
				else if(boxid == MBOX_6)
					temp = MENU_SHOP_ARMOR1;
				else if(boxid == MBOX_7)
					temp = MENU_SHOP_ACCOUNT;
				else
					temp = -1;
				if(boxid != MAINBOX_NONE && temp != -1)
					UpdateMenuPosition(temp);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				ReturnToMain();
		}
		else if(curopt == MENU_SHOP_WEAPON) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE && boxid < MBOX_9) {
					UpdateMenuPosition(GetWeaponPage(boxid));
				}
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				ReturnToMain();
		}
		else if(curopt == MENU_SHOP_WEAPON1)
			HandleWeaponPageInput(boxid, SHOP_WEAPON1_BEGIN, SHOP_WEAPON_SLOT1END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON2)
			HandleWeaponPageInput(boxid, SHOP_WEAPON2_BEGIN, SHOP_WEAPON_SLOT2END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON3_1)
			HandleWeaponPageInput(boxid, SHOP_WEAPON31_BEGIN, SHOP_WEAPON_SLOT31END, -1, MENU_SHOP_WEAPON3_2);
		else if(curopt == MENU_SHOP_WEAPON3_2)
			HandleWeaponPageInput(boxid, SHOP_WEAPON32_BEGIN, SHOP_WEAPON_SLOT32END, MENU_SHOP_WEAPON3_1, -1);
		else if(curopt == MENU_SHOP_WEAPON4_1)
			HandleWeaponPageInput(boxid, SHOP_WEAPON41_BEGIN, SHOP_WEAPON_SLOT41END, -1, MENU_SHOP_WEAPON4_2);
		else if(curopt == MENU_SHOP_WEAPON4_2)
			HandleWeaponPageInput(boxid, SHOP_WEAPON42_BEGIN, SHOP_WEAPON_SLOT42END, MENU_SHOP_WEAPON4_1, -1);
		else if(curopt == MENU_SHOP_WEAPON5_1)
			HandleWeaponPageInput(boxid, SHOP_WEAPON51_BEGIN, SHOP_WEAPON_SLOT51END, -1, MENU_SHOP_WEAPON5_2);
		else if(curopt == MENU_SHOP_WEAPON5_2)
			HandleWeaponPageInput(boxid, SHOP_WEAPON52_BEGIN, SHOP_WEAPON_SLOT52END, MENU_SHOP_WEAPON5_1, -1);
		else if(curopt == MENU_SHOP_WEAPON6_1)
			HandleWeaponPageInput(boxid, SHOP_WEAPON61_BEGIN, SHOP_WEAPON_SLOT61END, -1, MENU_SHOP_WEAPON6_2);
		else if(curopt == MENU_SHOP_WEAPON6_2)
			HandleWeaponPageInput(boxid, SHOP_WEAPON62_BEGIN, SHOP_WEAPON_SLOT62END, MENU_SHOP_WEAPON6_1, -1);
		else if(curopt == MENU_SHOP_WEAPON7)
			HandleWeaponPageInput(boxid, SHOP_WEAPON7_BEGIN, SHOP_WEAPON_SLOT7END, -1, -1);
		else if(curopt == MENU_SHOP_WEAPON8)
			HandleWeaponPageInput(boxid, SHOP_WEAPON8_BEGIN, SHOP_WEAPON_SLOT8END, -1, -1);
		else if(curopt == MENU_SHOP_AMMOSELECT) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE)
					UpdateMenuPosition(SHOP_FIRSTAMMO_PAGE + boxid - 1);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_SHOP_AMMO_1)
			HandleAmmoPageInput(DND_AMMOSLOT_CLIP, boxid, -1, -1, false);
		else if(curopt == MENU_SHOP_AMMO_2)
			HandleAmmoPageInput(DND_AMMOSLOT_SHELL, boxid, -1, -1, false);
        else if(curopt == MENU_SHOP_AMMO_3)
			HandleAmmoPageInput(DND_AMMOSLOT_ROCKET, boxid, -1, -1, false);
        else if(curopt == MENU_SHOP_AMMO_4)
			HandleAmmoPageInput(DND_AMMOSLOT_CELL, boxid, -1, -1, false);
		else if(curopt == MENU_SHOP_AMMO_SPECIAL1)
			HandleAmmoPageInput(DND_AMMOSLOT_CELL, boxid, -1, -1, true);
		else if(curopt == MENU_SHOP_ABILITY_1) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(boxid - 1, SHOP_ABILITY1_BEGIN, SHOP_ABILITY1_END, TRADE_BUY | TRADE_ABILITY, false);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_SHOP);
			else if(CheckInventory("MenuLR") == MENU_MOVE_RIGHT)
				UpdateMenuPosition(MENU_SHOP_ABILITY_2);
		}
		else if(curopt == MENU_SHOP_ABILITY_2) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(boxid - 1, SHOP_ABILITY2_BEGIN, SHOP_LASTABILITY_INDEX, TRADE_BUY | TRADE_ABILITY, false);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_SHOP_ABILITY_1);
		}
		else if(curopt == MENU_SHOP_ARTIFACT) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(boxid - 1, SHOP_FIRSTARTI_INDEX, SHOP_LASTARTI_INDEX, TRADE_BUY | TRADE_ARTIFACT, false);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_SHOP_TALENT) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(boxid - 1, SHOP_TALENT_BEGIN, SHOP_LASTTALENT_INDEX, TRADE_BUY | TRADE_TALENT, false);
				SetInventory("MadeChoice", 0);
			} else if(CheckInventory("MadeChoice") == 2) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(boxid - 1, SHOP_TALENT_BEGIN, SHOP_LASTTALENT_INDEX, TRADE_BUY | TRADE_TALENT, true);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_SHOP_ARMOR1) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, curposx, 0, 1);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(boxid - 1, SHOP_ARMORPAGE1_BEGIN, SHOP_ARMORPAGE1_END, TRADE_BUY | TRADE_ARMOR, false);
				SetInventory("MadeChoice", 0);
			}
			else if(CheckInventory("MadeChoice") == 2 && boxid != MAINBOX_NONE) {
				ProcessTrade(boxid - 1, SHOP_ARMORPAGE1_BEGIN, SHOP_ARMORPAGE1_END, TRADE_BUY | TRADE_ARMOR | TRADE_ARMOR_REPLACE, false);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_SHOP);
			else if(CheckInventory("MenuLR") == MENU_MOVE_RIGHT)
				UpdateMenuPosition(MENU_SHOP_ARMOR2);
		}
		else if(curopt == MENU_SHOP_ARMOR2) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, curposx, 0, 1);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(boxid - 1, SHOP_ARMORPAGE2_BEGIN, SHOP_LASTARMOR_INDEX, TRADE_BUY | TRADE_ARMOR, false);
				SetInventory("MadeChoice", 0);
			}
			else if(CheckInventory("MadeChoice") == 2 && boxid != MAINBOX_NONE) {
				ProcessTrade(boxid - 1, SHOP_ARMORPAGE2_BEGIN, SHOP_LASTARMOR_INDEX, TRADE_BUY | TRADE_ARMOR | TRADE_ARMOR_REPLACE, false);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_SHOP_ARMOR1);
		}
		else if(curopt == MENU_SHOP_ACCOUNT) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid != MAINBOX_NONE)
					ProcessTrade(boxid - 1, SHOP_ACCOUNT_BEGIN, SHOP_ACCOUNT_END, TRADE_BUY | TRADE_ACCOUNT, false);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_SHOP);
		}
		else if(curopt == MENU_RESEARCH) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, curposx, 0, 1);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid == MBOX_1)
					UpdateMenuPosition(MENU_RESEARCH_BODY);
				if(boxid == MBOX_2)
					UpdateMenuPosition(MENU_RESEARCH_AMMO);
				if(boxid == MBOX_3)
					UpdateMenuPosition(MENU_RESEARCH_GUNS);
				if(boxid == MBOX_4)
					UpdateMenuPosition(MENU_RESEARCH_UTILITY);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				ReturnToMain();
		}
		else if(curopt == MENU_RESEARCH_GUNS) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, curposx, 0, 1);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid == MBOX_1)
					UpdateMenuPosition(MENU_RESEARCH_SLOTGUNS);
				if(boxid == MBOX_2)
					UpdateMenuPosition(MENU_RESEARCH_LUXURYGUNS);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_RESEARCH);
		}
		else if(curopt >= SHOP_RESPAGE_BEGIN && curopt <= SHOP_RESPAGE_END) {
			HandleResearchPageInput(curopt - SHOP_RESPAGE_BEGIN, boxid, curposx);
		}
		else if(curopt == MENU_ABILITY) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid == MBOX_1) {
					SetInventory("DashDisabled", !CheckInventory("DashDisabled"));
					ACS_NamedExecuteAlways("DnD Toggle User Dash", 0);
					LocalAmbientSound("RPG/MenuChoose", 127);
				}
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				ReturnToMain();
		}
		else if(curopt == MENU_HELP) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			if(CheckInventory("MadeChoice") == 1) {
				if(boxid >= MBOX_1 && boxid <= MENU_HELP_END - MENU_HELP_BEGIN + 1)
					temp = MENU_HELP_BEGIN + boxid - 1;
				else if(boxid > MENU_HELP_END - MENU_HELP_BEGIN + 1) {
					GiveInventory("SetMapInfo", 1);
					LocalAmbientSound("RPG/MenuChoose", 127);
					temp = -1;
				}
				if(boxid != MAINBOX_NONE && temp != -1)
					UpdateMenuPosition(temp);
				SetInventory("MadeChoice", 0);
			}
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				ReturnToMain();
		}
		else if(curopt >= MENU_HELP_BEGIN && curopt <= MENU_HELP_END) {
			ListenInput(LISTEN_LEFT | LISTEN_RIGHT, 0, 0, 0);
			SetInventory("MadeChoice", 0);
			if(CheckInventory("MenuLR") == MENU_MOVE_LEFT)
				UpdateMenuPosition(MENU_HELP);
		}
		HandleClickableButtonFrames();
		Delay(1);
	}
}

Script "DnD Toggle User Dash" (void) CLIENTSIDE {
	SetCVar("dnd_dashstatus", !GetCVar("dnd_dashstatus"));
}

Script "DnD Trade Cancel Button" (void) {
	Delay(4);
	CancelTradeRoutine(GetTradee());
}

Script "DnD Trade Countdown" (int p1, int p2) CLIENTSIDE {
	if(ConsolePlayerNumber() != p1)
		Terminate;
	// Handle timer display
	int lim = 7 * Clamp_Between(GetCVar("dnd_trade_timer"), 1, 10);
	int count = 0;
	
	SetFont("BIGFONT");
	while(count < lim && CheckActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed") && CheckActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed")) {
		SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
		HudMessage(s:"\c[W3]", d:(lim - count + 6) / 7; HUDMSG_PLAIN, RPGMENUTRADECOUNTDOWNID, -1, 110.4, 160.0, 0.0, 0.0);
		SetHudSize(HUDMAX_X * 3 / 2, HUDMAX_Y * 3 / 2, 1);
		Delay(5);
		++count;
	}
	
	DeleteText(RPGMENUTRADECOUNTDOWNID);
}

// p1 is us
Script "DnD Trade Counter" (int p1, int p2) {
	int lim = 7 * Clamp_Between(GetCVar("dnd_trade_timer"), 1, 10);
	int count = 0;
	while(count < lim && CheckActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed") && CheckActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed")) {
		Delay(5);
		++count;
	}
	if(count == lim) {
		TransferTradeItems(p1, p2);
		TransferTradeItems(p2, p1);
		ACS_NamedExecuteAlways("DnD Save Player Inventory", 0, p1 | (CheckActorInventory(p1 + P_TIDSTART, "DnD_CharacterID") << 16), p2 | (CheckActorInventory(p2 + P_TIDSTART, "DnD_CharacterID") << 16));
		// take away confirmation stuff
		TakeActorInventory(p1 + P_TIDSTART, "DnD_Trade_Confirmed", 1);
		TakeActorInventory(p2 + P_TIDSTART, "DnD_Trade_Confirmed", 1);
		// finish trade view related stuff
		GiveActorInventory(p1 + P_TIDSTART, "DnD_Trade_Cooldown", 1);
		GiveActorInventory(p2 + P_TIDSTART, "DnD_Trade_Cooldown", 1);
		CancelTrade(p1);
		CancelTrade(p2);
	}
}

Script "DnD Trade Window" (int pnum, int giveWindow) {
	SetActivator(pnum + P_TIDSTART);
	
	if(giveWindow)
		GiveInventory("DnD_TradeAcceptWindow", 1);
	
	int lim = 5 * Clamp_Between(GetCVar("dnd_trade_window"), 5, 20);
	for(int i = 0; i < lim && !CheckInventory("InTradeView"); ++i)
		Delay(7);
	
	if(!CheckInventory("InTradeView")) {
		BreakTradesBetween(pnum);
		TakeInventory("DnD_TradeAcceptWindow", 1);
	}
}

Script "DnD Menu Popup" (int pnum, int isSell, int activebox) {
	SetActivator((pnum & 0xFFFF) + P_TIDSTART);
	if(isSell) {
		GiveInventory("DnD_SellConfirm", 1);
		TakeInventory("DnD_ShowPopup", 1);
		TakeInventory("DnD_PopupError", 1);
		GiveInventory("DnD_PopupSell", 1);
		GiveInventory("DnD_ShowSellPopup", 1);
		SetInventory("DnD_PopupID", activebox);
		SetInventory("ActivePopupBox", activebox);
	}
	else {
		GiveInventory("DnD_ShowPopup", 1);
		GiveInventory("DnD_PopupError", 1);
		TakeInventory("DnD_PopupSell", 1);
		TakeInventory("DnD_ShowSellPopup", 1);
		SetInventory("ActivePopupBox", 0);
		SetInventory("DnD_PopupID", activebox);
	}
	
	ACS_NamedExecuteAlways("DnD Menu Popup Show", 0, pnum >> 16, pnum & 0xFFFF);
}

Script "DnD Menu Popup Show" (int id, int pnum) CLIENTSIDE {
	// 0 for buy being possible, 2 if credits was not enough, 1 if credits was enough but you are maxed on the item and 3 if neither were satisfied 4 if item can't be sold
	SetActivator(pnum + P_TIDSTART);
	
	if(ConsolePlayerNumber() != pnum)
		Terminate;
	
	int popuptype = POPUP_ERROR;
	if(CheckInventory("DnD_PopupSell"))
		popuptype = POPUP_SELL;

	SetHudSize(HUDMAX_X, HUDMAX_Y, 1);
	SetFont("DND_ERR");
	HudMessage(s:"A"; HUDMSG_FADEOUT, RPGMENUPOPUPID, -1, 216.1, 128.1, 1.0, 1.0);
	SetFont("SMALLFONT");
	str toshow = "", title = "";
	if(popuptype == POPUP_ERROR) {
		title = "\c[Q2]ERROR";
		// id is minimum 1
		toshow = PopupText[id];
		LocalAmbientSound("RPG/MenuError", 127);
	}
	else if(popuptype == POPUP_SELL) {
		title = "\c[Q2]CONFIRM";
		toshow = StrParam(s:"Are you sure you\nwant to sell your\n\cd", s:ShopItemNames[CheckInventory("ActivePopupBox")][SHOPNAME_TAG], s:"\c- ?");
	}

	HudMessage(s:title; HUDMSG_FADEOUT, RPGMENUPOPUPID - 1, -1, 316.4, 136.1, 1.0, 1.0);
	HudMessage(s:toshow; HUDMSG_FADEOUT, RPGMENUPOPUPID - 2, CR_GOLD, 224.1, 160.1, 1.0, 1.0);
}